{"componentChunkName":"component---src-layout-default-tsx","path":"/develop/writing-components/","result":{"data":{"mdx":{"id":"4431b038-eef3-5565-a74b-892cfe91ed04","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Writing Components\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Our components are built using the following language and libraries:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.typescriptlang.org/\"\n  }, \"Typescript\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://reactjs.org/\"\n  }, \"React\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.styled-components.com/\"\n  }, \"Styled Components\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/jxnblk/styled-system\"\n  }, \"Styled System\"))), mdx(\"p\", null, \"You \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"don't\"), \" have to be an expert in all of those technologies to start using Looker components today, but it's good to have an understanding about why they were chosen and how they are employed inside Looker UI Components when writing new components.\"), mdx(\"p\", null, \"The following technologies roughly form a \\\"stack\\\", in that each layer is used by the next to solve a more specific problem:\"), mdx(\"h3\", null, \"React & Typescript\"), mdx(\"p\", null, \"React is a Javascript library that makes it easy to build UI components as simple functions and classes.\"), mdx(\"p\", null, \"Components are written in Typescript, which provides a structural static type system, allowing our components to define strict, enforceable interfaces.\"), mdx(\"h3\", null, \"Styled Components\"), mdx(\"p\", null, \"Styled Components is a css-in-js library that allows developers to write styling in Typescript and couple it directly to a component. There are pros and cons to using CSS in this way. If you want to learn more about this approach \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://speakerdeck.com/vjeux/react-css-in-js\"\n  }, \"this talk is highly recommended\"), \".\"), mdx(\"p\", null, \"Styled Components also provides a Theme object which allows entire applications to adhere to a consistent style guide.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }, \"interface PersonProps {\\n  name: string\\n  age: number\\n}\\n\\nconst BasePersonDetail = ({name, age, ...props}: PersonProps) => {\\n  return (\\n    <Box2 {...props}>\\n      <Heading>{name}</Heading>\\n      <Text>Age: {age}</Text>\\n    </Box2>\\n  )\\n}\\n\\nconst PersonDetail = styled(BasePersonDetail)`\\n  border: 2px solid black;\\n`\\n\")), mdx(\"h3\", null, \"Styled System\"), mdx(\"p\", null, \"Styled System is a Styled Components helper library that provides some nice functions for tying parts of the theme object to properties on components. The entire library, and its types, are exported from for use in Looker projects.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }, \"import { space, SpaceProps } from './design-tokens'\\n\\ninterface PersonProps extends SpaceProps {\\n  name: string\\n  age: number\\n}\\n\\nconst BasePersonDetail = ({ name, age, ...props }: PersonProps) => {\\n  return (\\n    <Box2 {...props}>\\n      <Heading>{name}</Heading>\\n      <Text>Age: {age}</Text>\\n    </Box2>\\n  )\\n}\\n\\n// `space` adds some margin and padding properties to the underlying component\\n// which are tied into the theme object. See SpaceProps and Box.tsx for good examples.\\nconst PersonDetail = styled(BasePersonDetail)`\\n  ${space}\\n  border: 2px solid black;\\n`\\n\\n// Example use of the resulting component:\\n<PersonDetail mx=\\\"small\\\" age={21} name=\\\"Becky\\\" />\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Writing Components"}}},"pageContext":{"id":"4431b038-eef3-5565-a74b-892cfe91ed04"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}