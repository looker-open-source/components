{"componentChunkName":"component---src-layout-default-tsx","path":"/develop/extending/","result":{"data":{"mdx":{"id":"8a159a9e-1dd6-5b5f-9247-40713d18c02f","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"2. Extending\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Composition\"), mdx(\"p\", null, \"Looker UI Components (and React) rely heavily on the concept of composition, where smaller components can be composed to create higher-order behavior. In the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BoardCard\"), \" example below the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Card\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CardMedia\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CardContent\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Heading\"), \" are composed to define a what it means to display a Board object in Card format.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const BoardCard = ({ title, description, previewImage }) => (\\n    <Card raised width=\\\"24rem\\\">\\n      <CardMedia image={previewImage} />\\n      <CardContent>\\n        <Heading as=\\\"h3\\\" fontWeight=\\\"semiBold\\\">\\n          {title}\\n        </Heading>\\n        <Paragraph fontSize=\\\"small\\\" color=\\\"text2\\\">\\n          {description}\\n        </Paragraph>\\n      </CardContent>\\n    </Card>\\n  )\\n\\n  return (\\n    <BoardCard\\n      title=\\\"Business Metrics\\\"\\n      previewImage=\\\"https://www.fillmurray.com/384/192\\\"\\n      description=\\\"Important metrics we use to understand our daily operational performance.\\\"\\n    />\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Extending behavior\"), mdx(\"p\", null, \"In some cases we may not support the exact presentation or behavior necessary. Through composition and styling, most components can be extended and customized. Here's an example of a new LoggerButton that logs every click:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  // import React from 'react'\\n  // import { Button, ButtonProps } from '@looker/components'\\n\\n  const logHandler = event => {\\n    /**\\n     *  Place an actual logging function here.\\n     *  For our example we'll simply log to the browser console.\\n     **/\\n    console.log('You clicked:', event.currentTarget)\\n  }\\n\\n  const LoggerButton = ({ onClick, ...props }) => {\\n    const handleClick = event => {\\n      logHandler(event)\\n      if (onClick) onClick(event)\\n    }\\n\\n    return (\\n      <ButtonOutline onClick={handleClick} {...props}>\\n        {props.children}\\n      </ButtonOutline>\\n    )\\n  }\\n\\n  return (\\n    <LoggerButton onClick={() => alert('Thanks for the click.')}>\\n      Click to run example\\n    </LoggerButton>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Extending styling\"), mdx(\"p\", null, \"Styling can also be extended, but care is needed to ensure you do not violate Looker's design principles.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  // import { Button } from '@looker/components'\\n  // import styled from 'styled-components'\\n\\n  const CustomButton = styled(Button)`\\n    background: white;\\n    border-color: transparent;\\n    border-radius: 100%;\\n    color: hotpink;\\n    font-size: 2rem;\\n    transition: transform 1.5s, background 2s;\\n    width: 42px;\\n\\n    &:hover,\\n    &:focus {\\n      background: hotpink;\\n      border-color: transparent;\\n      color: white;\\n      transform: rotate(360deg);\\n    }\\n\\n    &:active {\\n      background: orange;\\n    }\\n  `\\n\\n  return <CustomButton size=\\\"large\\\">+</CustomButton>\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"2. Extending"}}},"pageContext":{"id":"8a159a9e-1dd6-5b5f-9247-40713d18c02f"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}