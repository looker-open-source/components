{"componentChunkName":"component---src-layout-default-tsx","path":"/develop/theme/","result":{"data":{"mdx":{"id":"41c93160-19ba-5282-8d35-c4f048e9c208","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"3. Theme\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"To help stay within Looker's design principles, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/looker-open-source/components/blob/main/packages/design-tokens/src/theme.ts\"\n  }, \"we publish a theme object\"), \", along with libraries, like Styled Components and styled-system, to easily access the theme object within components. For example, when styling components using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styled\"), \" function, the theme object becomes part of a component's props:\"), mdx(\"h2\", null, \"ComponentsProvider\"), mdx(\"p\", null, \"Looker Components require that a Styled Components \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeProvider\"), \" be available and that theme specified have the same structure that is provided by Looker Component's stock \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme\"), \" object.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ComponentsProvider\"), \" is provided out-of-the-box to handle all of this.\"), mdx(\"p\", null, \"See below for information on extending the stock theme for your own use case.\"), mdx(\"p\", null, \"NOTE: For the sake of brevity examples within the documentation generally don't show the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ComponentsProvider\"), \". It's injected as part of the site's code sandbox setup.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  /**\\n   *  import { Button, ComponentsProvider } from '@looker/components'\\n   **/\\n\\n  return (\\n    <ComponentsProvider>\\n      <Button>Just a regular button</Button>\\n    </ComponentsProvider>\\n  )\\n}\\n\")), mdx(\"p\", null, \"You can use the theme's properties within your custom components:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  /**\\n   *  import { Button, ComponentsProvider, theme } from '@looker/components'\\n   *  import styled from 'styled-components'\\n   **/\\n\\n  const PositiveButton = styled(Button)`\\n    border-color: ${({ theme }) => theme.colors.positive};\\n    background-color: ${({ theme }) => theme.colors.positive};\\n  `\\n\\n  return (\\n    <ComponentsProvider>\\n      <PositiveButton>Engage!</PositiveButton>\\n    </ComponentsProvider>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Customizing the Theme\"), mdx(\"p\", null, \"You can customize the theme provided by Looker Components by passing colors, fonts, and more into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"themeCustomizations\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  /**\\n   *  import { Button, ComponentsProvider } from '@looker/components'\\n   **/\\n\\n  return (\\n    <ComponentsProvider themeCustomizations={{ colors: { key: 'hotpink' } }}>\\n      <Button>Pink is so Pretty!</Button>\\n    </ComponentsProvider>\\n  )\\n}\\n\")), mdx(\"p\", null, \"The following colors are available for customization. The first three are most likely to require customization since they are heavily used throughout the Looker Components library:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"key: Key color is applied strategically across the UI. Used for default action buttons, toggle switches, interactive component accents\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"text: Default text color\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"background: Default page background used for application background\")), mdx(\"p\", null, \"These colors are less likely to require customization:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pageBackground: Used as page background in some themes. pageBackground and background have a subtle difference, wherein the pageBackground is closer to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ui1\"), \" but blends are calculated from a more \\\"absolute\\\" background color (white or black)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"link: Link text color, used for Breadcrumb, link\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"critical: Critical intent color used for: Delete button, error and validation messages\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"warn: Warn intent color used for Warning banner\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"positive: Positive intent color used for Positive banner\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"inform: Inform intent color used for Info banner\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"calculation: Indicates a calculated value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"dimension: Indicates dimensionality\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"measure: Indicates a measure\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"title: Used by Heading. This is generally identical to colors.text5\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"body: Used by Paragraph, Ul/Ol. This is generally identical to colors.text5\")), mdx(\"p\", null, \"The following font family options may be customized (use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fontSources\"), \" property to specify the sources):\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"body: Used for body text\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"brand: Used for headings\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"code: Used for code snippets\")), mdx(\"p\", null, \"Additional properties to customize:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"brandAnimation: The Google Material ripple effect for pressable elements\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"externalLabel: True sets the field label style to external, false sets it to the Google Material floating label style\")), mdx(\"h2\", null, \"Nesting ComponentsProvider (ThemeProviders)\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ExtendComponentsThemeProvider\"), \" is a Styled Components' ThemeProvider that acts as a React Context and in so doing is able to support the standard behavior of nested contexts - the theme defined nearest to the component will be the version used.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  /**\\n   *  import { Button, ComponentsProvider } from '@looker/components'\\n   **/\\n\\n  return (\\n    <ComponentsProvider>\\n      <Space>\\n        <Button>Stock Theme</Button>\\n\\n        <ExtendComponentsThemeProvider\\n          themeCustomizations={{ colors: { key: 'hotpink' } }}\\n        >\\n          <Button>Button with Custom Theme</Button>\\n        </ExtendComponentsThemeProvider>\\n      </Space>\\n    </ComponentsProvider>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"3. Theme"}}},"pageContext":{"id":"41c93160-19ba-5282-8d35-c4f048e9c208"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}