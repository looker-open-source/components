{"componentChunkName":"component---src-layout-default-tsx","path":"/foundations/spacing/","result":{"data":{"mdx":{"id":"2a718603-a6cf-528d-a772-0ce72ca144c7","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Spacing\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar SpacingOptionsTable = makeShortcode(\"SpacingOptionsTable\");\nvar LegacySpaceTable = makeShortcode(\"LegacySpaceTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Consistent spacing is the foundation for a well structured user interface. We provide a set of spacing rules that takes the guess work out of spacing UI elements.\"), mdx(\"h2\", null, \"Spacing Values\"), mdx(\"p\", null, \"Our spacing values are based on a 4px unit, each step up in the spacing scale increases the size by 1 unit, or 4px. The steps of our spacing scale are named for the amount of spacing units they represent and follow the naming pattern \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"u{number * spacingUnit}\"), \".\"), mdx(\"p\", null, \"To calculate the size you can multiply the number of units by 4 to get the pixel value of a given step, so \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"u2\"), \" is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"2 * 4\"), \" which is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"8px\"), \" of spacing.\"), mdx(SpacingOptionsTable, {\n    mdxType: \"SpacingOptionsTable\"\n  }), mdx(\"h2\", null, \"Legacy Values\"), mdx(\"p\", null, \"Previously we used t-shirt sizing for our spacing scale names. This worked decently for a small set of values, but as our system has matured we needed a more flexible naming system to allow for more values and an easier way to quickly understand what size the named mapped to.\"), mdx(\"p\", null, \"As an example, in our legacy naming scheme \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"medium\"), \" represented \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"16px\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"large\"), \" represented \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"20px\"), \", but you had to memorize that. In our new naming pattern all you need to memorize is that we use a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"4px\"), \" unit of spacing and you can quickly calculate the size you are applying, so in our new pattern we have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"u4\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"16px\"), \" (4 \", \"*\", \" 4) and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"u5\"), \" for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"20px\"), \" (4 \", \"*\", \" 5).\"), mdx(\"p\", null, \"Below is a table of the legacy names mapped to our new naming pattern.\"), mdx(LegacySpaceTable, {\n    mdxType: \"LegacySpaceTable\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Spacing"}}},"pageContext":{"id":"2a718603-a6cf-528d-a772-0ce72ca144c7"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}