{"componentChunkName":"component---src-layout-default-tsx","path":"/foundations/","result":{"data":{"mdx":{"id":"43c0ef90-d3c2-5bb6-9987-bf6800a9b6a0","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Accessibility\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Best Practices\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Buttons \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"do not\"), \" open a new page, use links instead\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Buttons can open dialogs and menus, but should use the proper \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#related-aria-attributes\"\n  }, \"ARIA attributes\"))), mdx(\"h2\", null, \"Markup Expectations\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Always\"), \" use the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<button>\"), \" element. This solves most of the accessibly concerns for free.\")), mdx(\"h2\", null, \"Labeling Expectations\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use clear and descriptive labels. By default this is the text inside the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Button>\"), \" component.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ambiguous labels like \\\"click here\\\", \\\"run\\\", \\\"save\\\" are ok for sighted users but can lack context for users using assistive technology. Use the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-label\"), \" attribute to provide an accessible label for all \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Button>\"), \" components with potentially ambiguous labels.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Icon only buttons must provide a descriptive label using the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-label\"), \" attribute.\")), mdx(\"h2\", null, \"Focus Expectations\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Buttons with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \":focus\"), \" should have an outline and/or a visible change to show it has focus.\")), mdx(\"h2\", null, \"Keyboard Expectations\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Buttons with focus should be activated when user hits the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ENTER\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SPACEBAR\"), \" keys\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If button has focus, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TAB\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SHIFT+TAB\"), \" should move focus to next focusable element.\")), mdx(\"h2\", null, \"Related Aria Attributes\"), mdx(\"h3\", null, \"aria-label\"), mdx(\"p\", null, \"Use this to provide more context and an accessible label for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Button>\"), \" components. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Must be\"), \" used for buttons with ambiguous labels and icon only buttons.\"), mdx(\"p\", null, \"For example \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Button aria-label=\\\"Save Dashboard\\\">Save</Button>\"), \" would be announced as \\\"Save Dashboard Button\\\" by a screen reader instead of just \\\"Save Button\\\".\"), mdx(\"h3\", null, \"aria-haspopup\"), mdx(\"p\", null, \"Use this to indicate that when the buttons is pressed a popup is triggered. A popup can be a dialog or menu.\"), mdx(\"p\", null, \"For example say you have an icon-only button that reveals a set of options in a context menu when clicked, you would do the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Button aria-haspopup=\\\"true\\\" aria-label=\\\"Look Settings\\\">\\n  Settings\\n</Button>\\n\")), mdx(\"p\", null, \"This would be announced as \\\"Look Settings popup button\\\" by a screen reader.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Accessibility"}}},"pageContext":{"id":"43c0ef90-d3c2-5bb6-9987-bf6800a9b6a0"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}