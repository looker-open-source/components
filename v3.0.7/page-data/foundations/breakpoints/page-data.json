{"componentChunkName":"component---src-layout-default-tsx","path":"/foundations/breakpoints/","result":{"data":{"mdx":{"id":"687e1a78-a766-5117-b548-7d8f83ee59a7","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Breakpoints\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar BreakpointTable = makeShortcode(\"BreakpointTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Breakpoints give hooks for components and layouts to adapt and change in relation to the window size of the users device.\"), mdx(\"p\", null, \"We use a mobile first approach to breakpoints, that means we use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"min-width\"), \" property for our media queries. This technique is used for applying basic layout styles first and then using breakpoints to adjust for wider screens.\"), mdx(\"h2\", null, \"Available Breakpoints\"), mdx(BreakpointTable, {\n    mdxType: \"BreakpointTable\"\n  }), mdx(\"p\", null, \"There are a few ways to use the breakpoints, for simpler responsive behaviors you can use them as an array of values inline like\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Box2 bg={['green', 'blue', 'red', 'purple']} p=\\\"u10\\\" color=\\\"white\\\">\\n  My background changes color as you resize the window\\n</Box2>\\n\")), mdx(\"p\", null, \"Another option if you are writing more complex responsive behaviors you can access the breakpoints from the theme and use them a styled block\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }, \"const ResponsiveBox = styled(Box)`\\n  background: green;\\n\\n  // make the background red at breakpoint[0](480px)\\n  @media (min-width ${({ theme }) => theme.breakpoints[0]}) {\\n    background: red;\\n  }\\n\\n  // make the background red at breakpoint[1](768x)\\n  @media (min-width ${({ theme }) => theme.breakpoints[1]}) {\\n    background: blue;\\n  }\\n`\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Breakpoints"}}},"pageContext":{"id":"687e1a78-a766-5117-b548-7d8f83ee59a7"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}