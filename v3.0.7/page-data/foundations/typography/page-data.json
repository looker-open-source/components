{"componentChunkName":"component---src-layout-default-tsx","path":"/foundations/typography/","result":{"data":{"mdx":{"id":"833bc01d-2d24-5477-aaf0-a1a20f530ba3","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Typography\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar FontWeightDemo = makeShortcode(\"FontWeightDemo\");\nvar TypeScaleDemo = makeShortcode(\"TypeScaleDemo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Typography sets the tone and flow of an interface's content. Looker's design system has built-in typography aims to create a harmonious hierarchy, maximize legibility, and present the content as clearly as possible.\"), mdx(\"h2\", null, \"Family\"), mdx(\"h3\", null, \"Roboto\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"body\"), \" font is Roboto, a sans serif typeface. It was chosen for its open and friendly appearance as well as having excellent legibility for digital applications.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"brand\"), \" font defaults to Roboto a sans serif typeface. It is used for headings, buttons and tabs, this can be set independently of the body font in the theme.\"), mdx(\"h3\", null, \"Roboto Mono\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"code\"), \" font is Roboto Mono, a fixed-width typeface. It is used for code and structured data display.\"), mdx(FontWeightDemo, {\n    mdxType: \"FontWeightDemo\"\n  }), mdx(\"h2\", null, \"Type scale\"), mdx(\"p\", null, \"The type scale is designed to provide consistent and harmonious typographic styles.\"), mdx(TypeScaleDemo, {\n    mdxType: \"TypeScaleDemo\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Typography"}}},"pageContext":{"id":"833bc01d-2d24-5477-aaf0-a1a20f530ba3"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}