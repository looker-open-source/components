{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/fields/field-text/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"a735070b-d2dc-5f76-bb94-e2f04c926bf2","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"FieldText\",\n  \"github\": \"components/src/Form/Fields/FieldText/FieldText.tsx\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldText />\"), \" component is composed of an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<InputText />\"), \" component and a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Label />\"), \" component. Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldText />\"), \" allows for rendering validation messages. By default, the label will render directly above the input field, which is the recommended convention, however this is adjustable with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inline\"), \" property.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<SpaceVertical>\\n  <FieldText name=\\\"firstName\\\" label=\\\"First Name\\\" />\\n  <FieldText name=\\\"lastName\\\" label=\\\" Last Name\\\" inline />\\n  <FieldText name=\\\"requiredField\\\" label=\\\"A required field\\\" required />\\n</SpaceVertical>\\n\")), mdx(\"h3\", null, \"FieldText Validation\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldText />\"), \" component accepts \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validationMessage\"), \" as a property. This is an object with properties \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"message\"), \".\"), mdx(\"p\", null, \"See \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ValidationMessage\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/looker-open-source/components/blob/main/packages/components/src/Form/ValidationMessage/ValidationMessage.tsx\"\n  }, \"here\")), mdx(\"p\", null, \"If you have multiple fields in need of validation, it is recommended that you wrap them in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Form />\"), \" component and pass to it a dictionary with key as field name and value as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ValidationMessage\"), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"Note: In the current implementation, any \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"ValidationMessage\"), \" set in a \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"<FieldText />\"), \" component will be overridden by \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"ValidationMessages\"), \" set in the parent \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"<Form />\"), \" component. Because of this, it is highly recommended that you only ever directly set \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"ValidationMessage\"), \" if a \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"<FieldText />\"), \" is outside a \", mdx(\"inlineCode\", {\n    parentName: \"em\"\n  }, \"<Form />\"), \".\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<FieldText\\n  name=\\\"someField\\\"\\n  label=\\\"Some Field\\\"\\n  validationMessage={{ type: 'error', message: 'This is an error' }}\\n  alignValidationMessage=\\\"right\\\"\\n/>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components/src/Form/Fields/FieldText/FieldText.tsx","status":null,"storybook":true,"storybookPath":null,"title":"FieldText"}}},"pageContext":{"id":"a735070b-d2dc-5f76-bb94-e2f04c926bf2"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}