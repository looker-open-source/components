{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/dialogs/drawer/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"45ec3975-1f50-55b0-b60f-6814067e464e","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Drawer\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Drawer is a specialized form of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dialog\"), \" that is attached to the edge of the viewport.\"), mdx(\"h1\", null, \"Standard Use\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Drawer content=\\\"Something in the drawer\\\">\\n  <Button>Open Drawer</Button>\\n</Drawer>\\n\")), mdx(\"h2\", null, \"onAfterClose and onAfterOpne function\"), mdx(\"p\", null, \"onAfterClose: this function will be called after the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Drawer\"), \" is closed\\nonAfterOpne: this function will be called after the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Drawer\"), \" is open\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Drawer\\n  content=\\\"My neat dialog\\\"\\n  onAfterClose={() => alert(`Close`)}\\n  onAfterOpen={() => alert(`Open`)}\\n>\\n  <ButtonOutline>Open Drawer</ButtonOutline>\\n</Drawer>\\n\")), mdx(\"h1\", null, \"useDrawer\"), mdx(\"p\", null, \"We provide a custom hook that returns the opener function and rendered drawer.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const { dialog, setOpen } = useDrawer({\\n    content: 'Drawer Content',\\n  })\\n\\n  return (\\n    <>\\n      {dialog}\\n      <ButtonOutline onClick={() => setOpen(true)}>Open Drawer</ButtonOutline>\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Width\"), mdx(\"p\", null, \"All variants of Drawer allow you to specify \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"width\"), \" - it can be specified as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xxsmall\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xsmall\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"small\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"medium\"), \", & \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"large\"), \".\"), mdx(\"p\", null, \"By default, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"width\"), \" defaults to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"small\"), \" so that Dialog Surface will conform to the width of its content.\"), mdx(\"h2\", null, \"Placement\"), mdx(\"p\", null, \"Determines how surface is positioned in the the viewport.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"right\"), \" (default) - surface is centered horizontally and vertically above mobile breakpoint.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"mobile\"), \": positioned at top of window and covers entire width.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"width\"), \": defaults to 100% in mobile breakpoint and 37.5rem above that unless otherwise specified\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"height\"), \": fits content unless it's explicitly specified with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"minHeight\"), \" prop\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"left\"), \" - positioned to cover nearly the entire window.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"mobile & tablet\"), \": cover the entire window.\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [placement, setPlacement] = useState('right')\\n  const options = [\\n    {\\n      label: 'Left',\\n      value: 'left',\\n    },\\n    {\\n      label: 'Right',\\n      value: 'right',\\n      detail: 'default',\\n    },\\n  ]\\n\\n  return (\\n    <Space>\\n      <Drawer placement={placement} content=\\\"Drawer content\\\">\\n        <ButtonOutline>Open Drawer</ButtonOutline>\\n      </Drawer>\\n      <FieldRadioGroup\\n        label=\\\"Placement\\\"\\n        inputsInline\\n        options={options}\\n        value={placement}\\n        onChange={setPlacement}\\n      />\\n    </Space>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":null,"status":null,"storybook":true,"storybookPath":null,"title":"Drawer"}}},"pageContext":{"id":"45ec3975-1f50-55b0-b60f-6814067e464e"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}