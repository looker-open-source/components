{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/dialogs/confirm/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"e995b75c-9cbf-566f-b84d-1c513fc49afa","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Confirm\",\n  \"github\": \"components/src/Dialog/Confirm/Confirm.tsx\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Confirm provides a helpful composition of dialog components to drive the most common use case: driving user action to confirm or cancel a specific outcome.\"), mdx(\"h1\", null, \"Standard Use\"), mdx(\"p\", null, \"Confirm makes use of the render prop pattern to provide \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"open\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"close\"), \" functions to be called when needed.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Confirm\\n  title=\\\"Confirm Something\\\"\\n  message=\\\"Is this what you want to do?\\\"\\n  onConfirm={close => {\\n    alert('You did something')\\n    close()\\n  }}\\n>\\n  {open => <Button onClick={open}>Do Something</Button>}\\n</Confirm>\\n\")), mdx(\"p\", null, \"Updating color and text of the button\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Confirm\\n  confirmLabel=\\\"Delete\\\"\\n  buttonColor=\\\"critical\\\"\\n  title=\\\"Delete Something\\\"\\n  message=\\\"Is this what you want to do?\\\"\\n  onConfirm={close => {\\n    alert('You deleted something')\\n    close()\\n  }}\\n>\\n  {open => (\\n    <Button color=\\\"critical\\\" onClick={open}>\\n      Delete\\n    </Button>\\n  )}\\n</Confirm>\\n\")), mdx(\"h1\", null, \"useConfirm\"), mdx(\"p\", null, \"If you want more control over markup and state, we provide a custom hook that returns the opener function and rendered confirmation dialog. The following example illustrates how the opener can be called outside the Confirm component.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  function handleConfirm(close) {\\n    alert('You deleted it')\\n    close()\\n  }\\n\\n  const [confirmationDialog, openDialog] = useConfirm({\\n    confirmLabel: 'Yes, Delete all',\\n    buttonColor: 'critical',\\n    title: `Delete all`,\\n    message: 'Are you sure you want to delete all?',\\n    onConfirm: handleConfirm,\\n  })\\n\\n  return (\\n    <>\\n      {confirmationDialog}\\n      <ButtonOutline onClick={openDialog}>useConfirm</ButtonOutline>\\n    </>\\n  )\\n}\\n\")), mdx(\"h1\", null, \"ConfirmLayout\"), mdx(\"p\", null, \"We've found that most Dialogs involve the same common elements: Title, Message, a primary action (usually \\\"Confirm\\\"), and a secondary action (usually \\\"Cancel\\\").\"), mdx(\"p\", null, \"To help standardize that layout, we created the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ConfirmLayout\"), \" component for composing the relevant pieces. This is handy if you need something like Confirm in a separate context (e.g. when you need to lay out surface content for use in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/v3.0.7/components/dialogs/dialog\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Dialog\")), \").\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  function handleConfirm() {\\n    alert('Changes discarded')\\n  }\\n  function handleCancel() {\\n    alert('Went back')\\n  }\\n\\n  return (\\n    <ConfirmLayout\\n      title=\\\"Discard Changes?\\\"\\n      titleIcon={<Icon icon={<Warning />} color=\\\"critical\\\" size={22} />}\\n      message=\\\"Are you sure you want to close the dialog? Unsaved changes will be lost.\\\"\\n      primaryButton={\\n        <Button onClick={handleConfirm} color=\\\"critical\\\">\\n          Discard Changes\\n        </Button>\\n      }\\n      secondaryButton={\\n        <ButtonTransparent onClick={handleCancel} color=\\\"neutral\\\">\\n          Go Back\\n        </ButtonTransparent>\\n      }\\n    />\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components/src/Dialog/Confirm/Confirm.tsx","status":null,"storybook":true,"storybookPath":null,"title":"Confirm"}}},"pageContext":{"id":"e995b75c-9cbf-566f-b84d-1c513fc49afa"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}