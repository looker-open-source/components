{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/inline-input-text/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"74530537-1cbe-5f22-bf5c-5d5a6e0f750a","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"InlineInputText\",\n  \"github\": \"components/src/InlineInputText/InlineInputText.tsx\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"InlineInputText\"), mdx(\"p\", null, \"Input styled to have underline follow the input.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Flex alignItems=\\\"center\\\" justifyContent=\\\"space-around\\\">\\n  <Heading>\\n    <InlineInputText value=\\\"Type here...\\\" />\\n  </Heading>\\n  <Paragraph color=\\\"text1\\\">\\n    <InlineInputText placeholder=\\\"Type here...\\\" />\\n  </Paragraph>\\n</Flex>\\n\")), mdx(\"h2\", null, \"Simple\"), mdx(\"p\", null, \"Using the prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"simple\"), \" the input won't be as visible until hover or focus\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<InlineInputText simple value=\\\"Type here...\\\" />\\n\")), mdx(\"h2\", null, \"Disabled\"), mdx(\"p\", null, \"Using the prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disabled\"), \" the input won't be editable\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<InlineInputText disabled value=\\\"can't change me\\\" />\\n\")), mdx(\"h2\", null, \"ReadOnly\"), mdx(\"p\", null, \"Using the prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"readOnly\"), \" the input won't be editable\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<InlineInputText readOnly value=\\\"can't change me\\\" />\\n\")), mdx(\"p\", null, \"Using external value.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [value, setValue] = React.useState('Type here...')\\n  const onChange = e => {\\n    setValue(e.currentTarget.value)\\n  }\\n  const onClick = e => {\\n    setValue('You clicked the button')\\n  }\\n  return (\\n    <Flex alignItems=\\\"center\\\" justifyContent=\\\"space-around\\\">\\n      <InlineInputText value={value} onChange={onChange} />\\n      <Button onClick={onClick}>Click Me</Button>\\n    </Flex>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components/src/InlineInputText/InlineInputText.tsx","status":null,"storybook":true,"storybookPath":null,"title":"InlineInputText"}}},"pageContext":{"id":"74530537-1cbe-5f22-bf5c-5d5a6e0f750a"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}