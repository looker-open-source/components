{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/checkbox-group/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"825648aa-49a7-5320-af70-88540733061c","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"CheckboxGroup\",\n  \"github\": \"components/src/Form/OptionsGroup/CheckboxGroup.tsx\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Groups of checkbox can be displayed with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CheckboxGroup\"), \". \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Disabled\"), \" can be used on each checkbox specifically or on the group. Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultValue\"), \" will render a checked checkbox.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const options = [\\n    {\\n      label: 'Cheddar',\\n      value: 'cheddar',\\n    },\\n    {\\n      label: 'Gouda',\\n      value: 'gouda',\\n    },\\n  ]\\n\\n  const optionsDisabled = [\\n    {\\n      label: 'Cheddar',\\n      value: 'cheddar',\\n    },\\n    {\\n      disabled: true,\\n      label: 'Gouda',\\n      value: 'gouda',\\n    },\\n  ]\\n\\n  return (\\n    <Grid m=\\\"u10\\\">\\n      <CheckboxGroup\\n        defaultValue={['cheddar']}\\n        name=\\\"group1\\\"\\n        options={options}\\n      />\\n      <CheckboxGroup\\n        defaultValue={['cheddar']}\\n        inline\\n        name=\\\"group1\\\"\\n        options={options}\\n      />\\n      <CheckboxGroup name=\\\"group1\\\" options={optionsDisabled} />\\n      <CheckboxGroup inline name=\\\"group1\\\" options={optionsDisabled} />\\n      <CheckboxGroup disabled name=\\\"group1\\\" options={options} />\\n      <CheckboxGroup disabled inline name=\\\"group1\\\" options={options} />\\n    </Grid>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Controlled\"), mdx(\"p\", null, \"Control externally via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" props.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \";() => {\\n  const options = [\\n    {\\n      label: 'Cheddar',\\n      value: 'cheddar',\\n    },\\n    {\\n      label: 'Gouda',\\n      value: 'gouda',\\n    },\\n  ]\\n  const [value, setValue] = useState(['cheddar'])\\n  return (\\n    <Space align=\\\"start\\\">\\n      <CheckboxGroup\\n        name=\\\"cheeses\\\"\\n        value={value}\\n        onChange={setValue}\\n        options={options}\\n      />\\n      <Paragraph>Current selection: {value.join(', ')}</Paragraph>\\n    </Space>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components/src/Form/OptionsGroup/CheckboxGroup.tsx","status":null,"storybook":null,"storybookPath":null,"title":"CheckboxGroup"}}},"pageContext":{"id":"825648aa-49a7-5320-af70-88540733061c"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}