{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/select-multi/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"c26e315f-daf0-585c-9799-186ecec4cfcf","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"SelectMulti\",\n  \"github\": \"components/src/Form/Inputs/Select/SelectMulti.tsx\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SelectMulti\"), \" component is an extension of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/v3.0.7/components/forms/select\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Select\")), \" component that supports multiple selected values and has the following specific features:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The input field renders an underlying \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/components/v3.0.7/components/forms/input-chips\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"InputChips\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An on-the-fly \\\"Create\\\" option allows the user to enter custom values (see \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#showcreate\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"showCreate\")), \" prop)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Option list stays open by default so the user can select multiple options (see \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#closeonselect\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"closeOnSelect\")), \" prop)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Values can be cleared individually or all at once (does not use the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Select\"), \" component's \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isClearable\"), \" prop)\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space>\\n  <SelectMulti\\n    options={[\\n      { value: 'Cheddar' },\\n      { value: 'Gouda' },\\n      { value: 'Swiss' },\\n      { value: 'Feta' },\\n      { value: 'Mascarpone' },\\n      { value: 'Brie' },\\n      { value: 'Mozzarella' },\\n      { value: 'Cotija' },\\n      { value: 'Pepperjack' },\\n    ]}\\n    placeholder=\\\"Cheeses\\\"\\n    flex={1}\\n  />\\n  <SelectMulti\\n    options={[\\n      { value: '0', label: 'Sunday' },\\n      { value: '1', label: 'Monday' },\\n      { value: '2', label: 'Tuesday' },\\n      { value: '3', label: 'Wednesday' },\\n      { value: '4', label: 'Thursday' },\\n      { value: '5', label: 'Friday' },\\n      { value: '6', label: 'Saturday' },\\n    ]}\\n    defaultValues={['1']}\\n    flex={1}\\n  />\\n</Space>\\n\")), mdx(\"h2\", null, \"closeOnSelect\"), mdx(\"p\", null, \"With the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"closeOnSelect\"), \" prop, the option list closes after an option is selected.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<SelectMulti\\n  options={[\\n    { value: 'Cheddar' },\\n    { value: 'Gouda' },\\n    { value: 'Swiss' },\\n    { value: 'Feta' },\\n    { value: 'Mascarpone' },\\n    { value: 'Brie' },\\n    { value: 'Mozzarella' },\\n    { value: 'Cotija' },\\n    { value: 'Pepperjack' },\\n  ]}\\n  defaultValues={['Swiss', 'Brie']}\\n  closeOnSelect\\n/>\\n\")), mdx(\"h2\", null, \"freeInput\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"freeInput\"), \" prop when the user needs to be able to easily enter values not found in the list of options.\\nThis enables the inputting behavior of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/v3.0.7/components/forms/input-chips/\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"InputChips\")), \" where values are separated\\nby the enter key, comma, or tab or newline character when pasting. This prop also supports accepting values copy-pasted in from another \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SelectMulti\"), \".\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validate\"), \" callback to ensure that values entered via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"freeInput\"), \" are valid, and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onValidationFail\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onDuplicate\"), \"\\ncallbacks to handle invalid values. By default, any leading or trailing whitespace will be trimmed from\\nentered values, before validation. To avoid this, use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"formatInputValue={false}\"), \", or provide a callback for custom formatting.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  function validate(value) {\\n    return value.charAt(0).toUpperCase() === value.charAt(0)\\n  }\\n  const [message, setMessage] = React.useState('')\\n  function handleValidationFail(values) {\\n    setMessage(`Please capitalize: ${values.join(', ')}`)\\n  }\\n  function resetMessage() {\\n    setMessage('')\\n  }\\n  return (\\n    <SpaceVertical align=\\\"stretch\\\">\\n      <SelectMulti\\n        options={[\\n          { value: 'Cheddar' },\\n          { value: 'Gouda' },\\n          { value: 'Swiss' },\\n          { value: 'Feta' },\\n          { value: 'Mascarpone' },\\n          { value: 'Brie' },\\n          { value: 'Mozzarella' },\\n          { value: 'Cotija' },\\n          { value: 'Pepperjack' },\\n        ]}\\n        isFilterable\\n        onFilter={resetMessage}\\n        placeholder=\\\"Type values or select from the list\\\"\\n        freeInput\\n        validate={validate}\\n        onValidationFail={handleValidationFail}\\n      />\\n      <Paragraph>{message}</Paragraph>\\n    </SpaceVertical>\\n  )\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputChips\"), \" component provides the prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clearIconLabel\"), \" to customize the input icon label, the same is available to the individual \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Chip\"), \" with the prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chipIconLabel\"), \". Hover over the the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" icon to see the tooltip.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space>\\n  <SelectMulti\\n    clearIconLabel=\\\"remove all chips\\\"\\n    defaultValues={['Cheddar']}\\n    flex={1}\\n    options={[\\n      { value: 'Cheddar' },\\n      { value: 'Gouda' },\\n      { value: 'Swiss' },\\n      { value: 'Feta' },\\n    ]}\\n    placeholder=\\\"Cheeses\\\"\\n  />\\n  <SelectMulti\\n    defaultValues={['Gouda', 'Feta']}\\n    chipIconLabel=\\\"remove this chip\\\"\\n    flex={1}\\n    options={[\\n      { value: 'Cheddar' },\\n      { value: 'Gouda' },\\n      { value: 'Swiss' },\\n      { value: 'Feta' },\\n    ]}\\n  />\\n  <SelectMulti\\n    clearIconLabel=\\\"remove all chips\\\"\\n    defaultValues={['Cheddar', 'Swiss']}\\n    chipIconLabel=\\\"remove this chip\\\"\\n    flex={1}\\n    options={[\\n      { value: 'Cheddar' },\\n      { value: 'Gouda' },\\n      { value: 'Swiss' },\\n      { value: 'Feta' },\\n    ]}\\n  />\\n</Space>\\n\")), mdx(\"h2\", null, \"removeOnBackspace\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"removeOnBackspace\"), \" prop inherits from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/v3.0.7/components/forms/input-chips/#removeonbackspace\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"InputChips\")), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components/src/Form/Inputs/Select/SelectMulti.tsx","status":null,"storybook":true,"storybookPath":null,"title":"SelectMulti"}}},"pageContext":{"id":"c26e315f-daf0-585c-9799-186ecec4cfcf"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}