{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/input-text/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"f9a3cd31-6a90-5a0b-b2fa-849c3c03eb24","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"InputText\",\n  \"github\": \"components/src/Form/Inputs/InputText/InputText.tsx\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<InputText />\"), \" component renders a single text input element on the page, with no accompanying label. It is generally used to construct higher-order components like the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldText />\"), \". If you are building a form, you probably want to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldText />\"), \" instead as it provides label and validation support.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<InputText />\\n\")), mdx(\"h2\", null, \"Before & After\"), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"iconBefore\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"iconAfter\"), \" to render an icon before or after the input.\"), mdx(\"p\", null, \"For more custom content, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"before\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"after\"), \" accept a React node. A string is passed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"before\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"after\"), \" will have formatting applied, while JSX will be rendered as-is.\\nIf both \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"iconBefore\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"before\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"iconAfter\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"after\"), \" are passed, a warning will appear in the console and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputText\"), \" will not render.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<SpaceVertical>\\n  <Space>\\n    <InputText iconBefore={<Settings />} />\\n    <InputText iconAfter={<Done />} />\\n  </Space>\\n  <Space>\\n    <InputText before=\\\"$\\\" />\\n    <InputText\\n      after={\\n        <Tooltip placement=\\\"top\\\" content=\\\"Try again\\\">\\n          <Text color=\\\"critical\\\" fontSize=\\\"xsmall\\\">\\n            Oops!\\n          </Text>\\n        </Tooltip>\\n      }\\n    />\\n  </Space>\\n</SpaceVertical>\\n\")), mdx(\"h2\", null, \"autoResize\"), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"autoResize\"), \" to allow the width of the component to adjust to the current value or placeholder.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<InputText autoResize placeholder=\\\"Start typing\\\" />\\n\")), mdx(\"h2\", null, \"Name and ID\"), mdx(\"p\", null, \"A name and ID can be specified in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<InputText />\"), \" component. Names are important if the input is used in the context of a form, in which case a name is required for the value of the input to be captured.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<InputText name=\\\"someName\\\" id=\\\"someId\\\" />\\n\")), mdx(\"h3\", null, \"Disabled\"), mdx(\"p\", null, \"Use the disable property to make an input field un-editable.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<InputText disabled />\\n<InputText value=\\\"Hello!\\\" disabled />\\n<InputText placeholder=\\\"Placeholder example\\\" disabled />\\n\")), mdx(\"h3\", null, \"Placeholders\"), mdx(\"p\", null, \"Placeholders are used to give a hint to the user of the expected value for the input. They should not be used as a complete replacement of labels.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<InputText placeholder=\\\"Enter your text here...\\\" />\\n\")), mdx(\"h3\", null, \"ReadOnly Property\"), mdx(\"p\", null, \"As the name suggests, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"readOnly\"), \" makes the text un-editable.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<InputText value=\\\"You can't change me.\\\" readOnly />\\n\")), mdx(\"h3\", null, \"Required Property\"), mdx(\"p\", null, \"When set for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<InputText />\"), \" in the context of a form, the input field must be filled out before submitting the form.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<form>\\n  <InputText required />\\n  <br />\\n  <br />\\n  <Button>Submit</Button>\\n</form>\\n\")), mdx(\"h2\", null, \"Accessibility\"), mdx(\"h3\", null, \"Best Practices\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Placeholders are not a substitute for labels.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use the correct \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types_\"\n  }, \"input type\"), \" for the required data to get more accessible fields for free.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"See related \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#related-aria-attributes\"\n  }, \"ARIA attributes\"))), mdx(\"h3\", null, \"Markup Expectations\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Always\"), \" use the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<input>\"), \" element with the proper \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"type\"), \" attribute for the content, e.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<input type=\\\"text\\\">\"), \" for text content and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<input type\\\"=number\\\">\"), \" for numbers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Always\"), \" include an unique id on the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<input>\"), \" element so it can be referenced by a label \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<input type=\\\"text\\\" id=\\\"first-name\\\">\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fields that are required \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"must have\"), \" the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"required\"), \" attribute: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<input type=\\\"text\\\" id=\\\"first-name\\\" required>\"))), mdx(\"h3\", null, \"Labeling Expectations\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use clear and descriptive labels that avoid ambiguity.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make required fields obvious.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Always\"), \" include a descriptive label with each input, the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"for\"), \" attribute of the label should match the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"id\"), \" of the input it labels\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<label htmlFor=\\\"first-name\\\">First Name</label>\\n<input id=\\\"first-name\\\" type=\\\"text\\\" />\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fields with validations \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"must have\"), \" a the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-desrcibedby\"), \" attribute to ensure the error message for the field is read by assistive technology.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<label htmlFor=\\\"first-name\\\">First Name</label>\\n<input\\n  id=\\\"first-name\\\"\\n  type=\\\"text\\\"\\n  aria-describedby=\\\"fn-error-message\\\"\\n  required\\n/>\\n<p id=\\\"fn-error-message\\\">This field is required</p>\\n\")), mdx(\"h3\", null, \"Focus Expectations\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Input fields with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \":focus\"), \" should have an outline and/or a visible change to show it has focus.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the input field with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \":focus\"), \" has an error, the error should be read by a screen reader\")), mdx(\"h3\", null, \"Keyboard Expectations\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If input has focus, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TAB\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SHIFT+TAB\"), \" should move focus to next focusable element...\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If input has focus the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Enter\"), \" key should submit the form.\")), mdx(\"h3\", null, \"Related Aria Attributes\"), mdx(\"h4\", null, \"aria-describedby\"), mdx(\"p\", null, \"Use this to provide a detailed descriptions of a field that contains errors.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<label htmlFor=\\\"email\\\">Email Address</label>\\n<input id=\\\"email\\\" type=\\\"email\\\" aria-describedby=\\\"email-error-message\\\" />\\n<p id=\\\"email-error-message\\\">Please enter a valid email address</p>\\n\")), mdx(\"p\", null, \"This would announce \\\"Email Address, edit text. Please enter a valid email address\\\"\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components/src/Form/Inputs/InputText/InputText.tsx","status":null,"storybook":true,"storybookPath":null,"title":"InputText"}}},"pageContext":{"id":"f9a3cd31-6a90-5a0b-b2fa-849c3c03eb24"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}