{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/input-hidden/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"7396fd45-33b4-5834-b8e5-544bef47bbe2","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"InputHidden\",\n  \"prop\": \"InputHidden\",\n  \"github\": \"components/src/Form/Inputs/InputHidden/InputHidden.tsx\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<InputHidden />\"), \" component renders a single hidden input element on the page. This is used for storing static values in forms, and meant to remain invisible to the user and screen readers.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<InputHidden />\\n\")), mdx(\"h2\", null, \"Name and ID\"), mdx(\"p\", null, \"A name and ID can be specified in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<InputHidden />\"), \" component. Names are important if the input is used in the context of a form, in which case a name is required for the value of the input to be captured.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<InputHidden name=\\\"someName\\\" id=\\\"someId\\\" />\\n\")), mdx(\"h2\", null, \"Accessibility\"), mdx(\"h3\", null, \"Best Practices\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use InputHidden to include static values (such as user ID) as part of form submission. These fields will not be rendered visually or read by screen readers.\")), mdx(\"h3\", null, \"Focus Expectations\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Input hidden fields should not be focusable.\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components/src/Form/Inputs/InputHidden/InputHidden.tsx","status":null,"storybook":null,"storybookPath":null,"title":"InputHidden"}}},"pageContext":{"id":"7396fd45-33b4-5834-b8e5-544bef47bbe2"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}