{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/input-search/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"963ab610-0302-5480-af2e-fc4a4d710aea","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"InputSearch\",\n  \"github\": \"components/src/Form/Inputs/InputSearch/InputSearch.tsx\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<InputSearch />\"), \" component renders a single search input element.\\nYou can add a placeholder, and a starter value, also a summary text and a closing button associated with it.\\nTo remove the button use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isClearable={false}\"), \".\\nIf you don't want to see the search \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Icon\"), \" use the prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hideSearchIcon\"), \".\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"autoResize\"), \" prop to allow the input's width to adjust to its current value or placeholder.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<SpaceVertical align=\\\"start\\\">\\n  <InputSearch placeholder=\\\"Type your search\\\" />\\n  <InputSearch placeholder=\\\"Type your search\\\" value=\\\"test search\\\" />\\n  <InputSearch\\n    width=\\\"50%\\\"\\n    placeholder=\\\"Type your search\\\"\\n    defaultValue=\\\"test search 0\\\"\\n    summary={'some text'}\\n  />\\n  <InputSearch\\n    placeholder=\\\"Type your search\\\"\\n    defaultValue=\\\"test search 1\\\"\\n    isClearable={false}\\n  />\\n  <InputSearch hideSearchIcon placeholder=\\\"No search icon here\\\" />\\n  <InputSearch autoResize placeholder=\\\"Start typing to resize\\\" />\\n</SpaceVertical>\\n\")), mdx(\"h2\", null, \"Controlled Example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \";() => {\\n  const ExampleInputSearch = ({\\n    defaultValue = '',\\n    isClearable,\\n    searchResults = [],\\n  }) => {\\n    const [keyword, setKeyword] = React.useState(defaultValue)\\n    return (\\n      <InputSearch\\n        placeholder=\\\"Type your search\\\"\\n        summary={\\n          keyword.length > 0 ? `You typed ${keyword.length} characters` : ''\\n        }\\n        value={keyword}\\n        onChange={setKeyword}\\n        isClearable={isClearable}\\n      />\\n    )\\n  }\\n  return (\\n    <>\\n      <ExampleInputSearch />\\n      <Divider my=\\\"medium\\\" />\\n      <ExampleInputSearch defaultValue=\\\"test search 2\\\" />\\n      <Divider my=\\\"medium\\\" />\\n      <ExampleInputSearch defaultValue=\\\"test search 3\\\" isClearable={false} />\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Disabled\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disable\"), \" property to make an input field un-editable.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<SpaceVertical align=\\\"start\\\">\\n  <InputSearch disabled />\\n  <InputSearch disabled value=\\\"value Disabled\\\" />\\n  <InputSearch disabled placeholder=\\\"placeholder Disabled\\\" />\\n</SpaceVertical>\\n\")), mdx(\"h2\", null, \"ReadOnly property\"), mdx(\"p\", null, \"As the name suggests, readOnly makes the text un-editable.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<InputSearch readOnly value=\\\"You can't change me.\\\" />\\n\")), mdx(\"h2\", null, \"Options (experimental)\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"options\"), \" prop offers users suggestions or results as they type, similar to a filterable\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/v3.0.7/components/forms/select/\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Select\")), \", but without the intent to restrict the field's value.\"), mdx(\"p\", null, \"Additional props \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onSelectOption\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"changeOnSelect\"), \" (defaults to true), which determines whether the input\\nwill be updated with the selected option's value, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clearOnClose\"), \" (defaults to the opposite of\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"changeOnSelect\"), \"), which determines whether the input value will persist after the option list is closed,\\n(via blur, escape, etc).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const cheeses = [\\n    {\\n      description: 'Delicious cheese',\\n      detail: 'Netherlands ',\\n      value: 'Gouda',\\n    },\\n    { value: 'Cheddar' },\\n  ]\\n\\n  const cheeses2 = [{ value: 'Jack' }, { value: 'Swiss' }]\\n\\n  const handleSelectOption = option =>\\n    option && alert(`You picked ${option.value}`)\\n\\n  return (\\n    <Space>\\n      <InputSearch\\n        options={cheeses}\\n        onSelectOption={handleSelectOption}\\n        changeOnSelect={false}\\n        placeholder=\\\"Options act like results\\\"\\n      />\\n      <InputSearch\\n        options={cheeses2}\\n        placeholder=\\\"Options act like suggestions\\\"\\n      />\\n    </Space>\\n  )\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputSearch\"), \" component provides the prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clearIconLabel\"), \" to customize the input icon label. Hover over the the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" icon to see the tooltip.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<InputSearch clearIconLabel=\\\"remove search\\\" value=\\\"You can't change me.\\\" />\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components/src/Form/Inputs/InputSearch/InputSearch.tsx","status":null,"storybook":true,"storybookPath":null,"title":"InputSearch"}}},"pageContext":{"id":"963ab610-0302-5480-af2e-fc4a4d710aea"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}