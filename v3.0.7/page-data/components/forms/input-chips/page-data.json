{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/input-chips/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"970b01e7-1169-56a5-ab4f-0e1a9c8ffbb4","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"InputChips\",\n  \"github\": \"components/src/Form/Inputs/InputChips/InputChips.tsx\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputChips\"), \" component takes an array of strings (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"values\"), \") and renders them each as a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/v3.0.7/components/content/chip\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Chip\")), \" inside a text box.\\nThe input value is converted to chip values as the user types via the \", mdx(\"strong\", null, \"comma\"), \" or \", mdx(\"strong\", null, \"enter\"), \" keys, or on blur.\\nChips can be selected, via keyboard commands or clicking, and copy-pasted.\\nThe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"values\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" props are required \\u2013 \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputChips\"), \" is a controlled component.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputChips\"), \" also supports \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"summary\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isClearable\"), \", similar to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../input-search\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"InputSearch\")), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"autoResize\"), \", similar to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../input-text\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"InputText\")), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  function ExampleInputChips({ values: initialValues = [], ...props }) {\\n    const [values, setValues] = React.useState(initialValues)\\n    function handleChange(newValues) {\\n      setValues(newValues)\\n    }\\n    return (\\n      <InputChips\\n        placeholder=\\\"Enter multiple values\\\"\\n        summary={values.length > 0 && `You've entered ${values.length} items`}\\n        values={values}\\n        onChange={handleChange}\\n        {...props}\\n      />\\n    )\\n  }\\n  return (\\n    <SpaceVertical align=\\\"start\\\">\\n      <ExampleInputChips />\\n      <ExampleInputChips values={['mango', 'kiwi']} />\\n      <ExampleInputChips values={[]} isClearable={false} />\\n      <ExampleInputChips values={[]} autoResize />\\n    </SpaceVertical>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Controlled Input Value\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inputValue\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onInputChange\"), \" props allow control of the typed value. We also provide an optional \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClear\"), \" event hook that can be used for post-event cleanup or rendering helpful undo functionality.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [values, setValues] = React.useState([])\\n  const previousInputValues = usePreviousValue(values)\\n  const [inputValue, setInputValue] = React.useState('')\\n  const [renderUndoButton, setRenderUndoButton] = React.useState(false)\\n  function handleChange(newValues) {\\n    setValues(newValues)\\n    setRenderUndoButton(false)\\n  }\\n  function handleInputChange(newValue) {\\n    setInputValue(newValue)\\n  }\\n  function handleClear() {\\n    setRenderUndoButton(true)\\n  }\\n  function handleUndo() {\\n    setValues(previousInputValues)\\n    setRenderUndoButton(false)\\n  }\\n  return (\\n    <>\\n      <InputChips\\n        placeholder=\\\"Enter multiple values\\\"\\n        summary={values.length > 0 && `You've entered ${values.length} items`}\\n        values={values}\\n        inputValue={inputValue}\\n        onChange={handleChange}\\n        onInputChange={handleInputChange}\\n        onClear={handleClear}\\n        mb=\\\"u3\\\"\\n      />\\n      {renderUndoButton && (\\n        <>\\n          You cleared the values! <Button onClick={handleUndo}>Undo</Button>\\n        </>\\n      )}\\n      {inputValue !== '' && (\\n        <Paragraph>\\n          You are typing: <strong>{inputValue}</strong>\\n        </Paragraph>\\n      )}\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Validation\"), mdx(\"p\", null, \"If a duplicate value is entered, it will not be added to the values list.\\nThe optional \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validate\"), \" prop is a function returning a boolean that is called for each value that is entered.\\nIf it returns false, the value is not added. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onValidationFail\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onDuplicate\"), \" are optional handlers for when\\ninvalid and duplicate values are entered.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const emailValidator = new RegExp(\\n    /^(([^<>()\\\\[\\\\]\\\\\\\\.,:\\\\s@\\\"]+(\\\\.[^<>()\\\\[\\\\]\\\\\\\\.,:\\\\s@\\\"]+)*)|(\\\".+\\\"))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}])|(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$/\\n  )\\n  const [values, setValues] = React.useState([])\\n  const [invalidValue, setInvalidValue] = React.useState('')\\n  const [duplicateValue, setDuplicateValue] = React.useState('')\\n\\n  function handleChange(newValues) {\\n    setValues(newValues)\\n    setInvalidValue('')\\n    setDuplicateValue('')\\n  }\\n  function validate(valueToValidate) {\\n    return emailValidator.test(valueToValidate)\\n  }\\n  function handleInvalid(invalidValue) {\\n    setInvalidValue(invalidValue)\\n  }\\n  function handleDuplicate(duplicateValue) {\\n    setDuplicateValue(duplicateValue)\\n  }\\n  return (\\n    <>\\n      <InputChips\\n        placeholder=\\\"Enter email addresses\\\"\\n        values={values}\\n        validate={validate}\\n        onChange={handleChange}\\n        onValidationFail={handleInvalid}\\n        onDuplicate={handleDuplicate}\\n        mb=\\\"u3\\\"\\n      />\\n      <Paragraph>\\n        {invalidValue !== ''\\n          ? `You entered an invalid email: ${invalidValue}`\\n          : duplicateValue !== ''\\n          ? `${duplicateValue} has already been entered`\\n          : ''}\\n      </Paragraph>\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"formatInputValue\"), mdx(\"p\", null, \"Use this callback to format values after there are entered, before validation.\\nBy default, any leading or trailing whitespace will be trimmed \\u2013 to avoid this,\\nuse \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"formatInputValue={false}\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [values, setValues] = React.useState([])\\n  return (\\n    <Space>\\n      <InputChips\\n        placeholder=\\\"Values are not trimmed\\\"\\n        values={values}\\n        onChange={setValues}\\n        formatInputValue={false}\\n        width=\\\"50%\\\"\\n      />\\n      <pre>{JSON.stringify(values)}</pre>\\n    </Space>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"removeOnBackspace\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"removeOnBackspace\"), \" prop defaults to true.\\nWhen set to false, hitting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Backspace\"), \" key while focused in the input will not remove values.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [values, setValues] = React.useState(['mango', 'kiwi'])\\n  function handleChange(newValues) {\\n    setValues(newValues)\\n  }\\n  return (\\n    <InputChips\\n      placeholder=\\\"Backspace does not remove values\\\"\\n      values={values}\\n      onChange={handleChange}\\n      removeOnBackspace={false}\\n    />\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Disabled\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disable\"), \" property to make an input field un-editable.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<SpaceVertical>\\n  <InputChips disabled values={['disabled']} />\\n  <InputChips\\n    placeholder=\\\"this is a disabled placeholder\\\"\\n    disabled\\n    values={[]}\\n  />\\n</SpaceVertical>\\n\")), mdx(\"h2\", null, \"ReadOnly property\"), mdx(\"p\", null, \"As the name suggests, readOnly makes the text un-editable.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<InputChips\\n  placeholder=\\\"or here ether.\\\"\\n  readOnly\\n  values={['you', \\\"can't\\\", 'change', 'me', 'here']}\\n/>\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputChips\"), \" component provides the prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clearIconLabel\"), \" to customize the input icon label, the same is available to the individual \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Chip\"), \" with the prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chipIconLabel\"), \". Hover over the the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" icon to see the tooltip.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<InputChips\\n  placeholder=\\\"hover the x on the right corner\\\"\\n  clearIconLabel=\\\"remove all\\\"\\n  chipIconLabel=\\\"remove this chip\\\"\\n  values={['you', \\\"can't\\\", 'change', 'me', 'here']}\\n/>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components/src/Form/Inputs/InputChips/InputChips.tsx","status":null,"storybook":true,"storybookPath":null,"title":"InputChips"}}},"pageContext":{"id":"970b01e7-1169-56a5-ab4f-0e1a9c8ffbb4"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}