{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/input-select/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"7468aac2-aa70-574e-977c-e9ed1c29f4f7","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Select\",\n  \"github\": \"components/src/Form/Inputs/Select/Select.tsx\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Select />\"), \" component renders a single menu on the page, with no accompanying label. It is generally used to construct higher-order components like the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldText />\"), \". If you are building a form, you probably want to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FieldSelect />\"), \" instead as it provides label and validation support.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space>\\n  <Select\\n    options={[\\n      { value: 'cheddar', label: 'Cheddar' },\\n      { value: 'gouda', label: 'Gouda' },\\n      { value: 'swiss', label: 'Swiss' },\\n    ]}\\n  />\\n  <Select\\n    options={[\\n      { value: 'cheddar', label: 'Cheddar' },\\n      { value: 'gouda', label: 'Gouda' },\\n      { value: 'swiss', label: 'Swiss' },\\n    ]}\\n    defaultValue=\\\"gouda\\\"\\n  />\\n  <Select placeholder=\\\"awesome!\\\" />\\n  <Select\\n    defaultValue=\\\"Some Value\\\"\\n    options={[\\n      { value: '1', label: 'thing' },\\n      { value: 'Some Value', label: \\\"Some Value's Label\\\" },\\n      { value: '2', label: 'other' },\\n    ]}\\n  />\\n</Space>\\n\")), mdx(\"h2\", null, \"Filtering\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isFilterable\"), \" option allows the user to type in the input, triggering the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onFilter\"), \" callback,\\nwhich should be used to narrow the options passed to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Select\"), \". Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isClearable\"), \" prop to allow\\nthe user to delete the current value.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [value, setValue] = React.useState()\\n  const [searchTerm, setSearchTerm] = React.useState('')\\n\\n  function handleChange(value) {\\n    setValue(value)\\n  }\\n  function handleFilter(term) {\\n    setSearchTerm(term)\\n  }\\n\\n  const newOptions = React.useMemo(() => {\\n    const options = [\\n      { label: 'Apples', value: '1' },\\n      { label: 'Bananas', value: '2' },\\n      { label: 'Oranges', value: '3' },\\n      { label: 'Pineapples', value: '4' },\\n      { label: 'Kiwis', value: '5' },\\n    ]\\n    if (searchTerm === '') return options\\n    return options.filter(option => {\\n      return option.label.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1\\n    })\\n  }, [searchTerm])\\n\\n  return (\\n    <Select\\n      maxWidth={400}\\n      options={newOptions}\\n      aria-label=\\\"Fruits\\\"\\n      placeholder=\\\"Controlled, searchable, clearable\\\"\\n      isClearable\\n      isFilterable\\n      value={value}\\n      onChange={handleChange}\\n      onFilter={handleFilter}\\n    />\\n  )\\n}\\n\")), mdx(\"h2\", null, \"showCreate\"), mdx(\"p\", null, \"When \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isFilterable\"), \" is true, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"showCreate\"), \" prop along with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"formatCreateLabel\"), \" (defaults to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'Create \\\"${input value}\\\"'\"), \")\\nto allow the user to enter a value not found in the options.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [value, setValue] = React.useState('')\\n  const [searchTerm, setSearchTerm] = React.useState('')\\n\\n  const newOptions = React.useMemo(() => {\\n    const options = [\\n      { value: 'Apples' },\\n      { value: 'Bananas' },\\n      { value: 'Oranges' },\\n      { value: 'Pineapples' },\\n      { value: 'Kiwis' },\\n    ]\\n    if (searchTerm === '') return options\\n    return options.filter(option => {\\n      return option.value.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1\\n    })\\n  }, [searchTerm])\\n\\n  function formatCreateLabel(inputValue) {\\n    return `Add new fruit: ${inputValue}`\\n  }\\n\\n  return (\\n    <Select\\n      maxWidth={400}\\n      options={newOptions}\\n      aria-label=\\\"Fruits\\\"\\n      placeholder=\\\"Controlled, searchable, creatable\\\"\\n      isFilterable\\n      value={value}\\n      onChange={setValue}\\n      onFilter={setSearchTerm}\\n      showCreate\\n      formatCreateLabel={formatCreateLabel}\\n    />\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Groups\"), mdx(\"p\", null, \"Options can be organized into groups, with an optional \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"label\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Select\\n  maxWidth={400}\\n  options={[\\n    {\\n      label: 'CHEESES',\\n      options: [\\n        { value: 'cheddar', label: 'Cheddar' },\\n        { value: 'gouda', label: 'Gouda' },\\n        { value: 'swiss', label: 'Swiss' },\\n      ],\\n    },\\n    {\\n      label: 'FRUITS',\\n      options: [\\n        { value: 'grape', label: 'Grapes' },\\n        { value: 'apple', label: 'Apples' },\\n        { value: 'strawberries', label: 'Strawberries' },\\n      ],\\n    },\\n    {\\n      options: [\\n        { value: 'pizza', label: 'Pizza' },\\n        { value: 'hamburgers', label: 'Hamburgers' },\\n      ],\\n    },\\n  ]}\\n/>\\n\")), mdx(\"h2\", null, \"Descriptions\"), mdx(\"p\", null, \"Options can have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"description\"), \" property.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Select\\n  maxWidth={400}\\n  options={[\\n    { value: 'cheddar', label: 'Cheddar', description: 'Popular in the US' },\\n    { value: 'gouda', label: 'Gouda', description: 'Dutch sheeps milk' },\\n    { value: 'swiss', label: 'Swiss', description: 'Full of holes' },\\n  ]}\\n/>\\n\")), mdx(\"h2\", null, \"Disabled Property\"), mdx(\"p\", null, \"Use the disable property to make an input field uneditable.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space>\\n  <Select\\n    disabled\\n    options={[\\n      { value: 'cheddar', label: 'Cheddar' },\\n      { value: 'gouda', label: 'Gouda' },\\n      { value: 'swiss', label: 'Swiss' },\\n    ]}\\n  />\\n  <Select\\n    defaultValue=\\\"gouda\\\"\\n    disabled\\n    options={[\\n      { value: 'cheddar', label: 'Cheddar' },\\n      { value: 'gouda', label: 'Gouda' },\\n      { value: 'swiss', label: 'Swiss' },\\n    ]}\\n  />\\n</Space>\\n\")), mdx(\"h2\", null, \"Placeholder\"), mdx(\"p\", null, \"Placeholders are used to give a hint to the user of the expected value for the input.\\nTo allow the user to clear the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Select\"), \"'s value, add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isClearable\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space>\\n  <Select\\n    placeholder=\\\"Select your cheese of choice...\\\"\\n    options={[\\n      { value: 'cheddar', label: 'Cheddar' },\\n      { value: 'gouda', label: 'Gouda' },\\n      { value: 'swiss', label: 'Swiss' },\\n    ]}\\n  />\\n  <Select\\n    placeholder=\\\"Value can be cleared\\\"\\n    isClearable\\n    options={[\\n      { value: 'cheddar', label: 'Cheddar' },\\n      { value: 'gouda', label: 'Gouda' },\\n      { value: 'swiss', label: 'Swiss' },\\n    ]}\\n  />\\n</Space>\\n\")), mdx(\"h2\", null, \"isLoading\"), mdx(\"p\", null, \"Indicates that options are currently being loaded.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Select maxWidth={400} placeholder=\\\"Loading options\\\" isLoading />\\n\")), mdx(\"h2\", null, \"scrollIntoView for improved UX on a long list of options\"), mdx(\"p\", null, \"If you're rendering a long list which scrolls beyond the max-height of the list, you can leverage the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scrollIntoView\"), \" option property to focus the list to a helpful scroll position. Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scrollIntoView\"), \" will also highlight the option, so that keyboard navigation will start from there as well.\"), mdx(\"p\", null, \"When you open the following list, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Mascarpone\"), \" will be highlighted and visible at the bottom of the menu:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Select\\n  maxWidth={400}\\n  placeholder=\\\"Select your cheese of choice...\\\"\\n  options={[\\n    { value: 'cheddar', label: 'Cheddar' },\\n    { value: 'gouda', label: 'Gouda' },\\n    { value: 'swiss', label: 'Swiss' },\\n    { value: 'string', label: 'String' },\\n    { value: 'parmesan', label: 'Parmigiano Reggiano' },\\n    { value: 'roquefort', label: 'Roquefort' },\\n    { value: 'brie', label: 'Brie' },\\n    { value: 'gruyere', label: 'Gruyere' },\\n    { value: 'feta', label: 'Feta' },\\n    { value: 'mozzarella', label: 'Mozzarella' },\\n    { value: 'manchego', label: 'Manchego' },\\n    { value: 'gorgonzola', label: 'Gorgonzola' },\\n    { value: 'epoisses', label: 'Epoisses' },\\n    { value: 'monterey-jack', label: 'Monterey Jack' },\\n    { value: 'muenster', label: 'Muenster' },\\n    { value: 'provolone', label: 'Provolone' },\\n    { value: 'blue', label: 'Blue' },\\n    { value: 'camembert', label: 'Camembert' },\\n    { value: 'havarti', label: 'Havarti' },\\n    { value: 'ricotta', label: 'Ricotta' },\\n    { value: 'mascarpone', label: 'Mascarpone', scrollIntoView: true },\\n  ]}\\n/>\\n\")), mdx(\"h2\", null, \"Windowing\"), mdx(\"p\", null, \"Another feature for long lists. Because rendering hundreds of options results in poor performance,\\nif there are 100 or more options, the option list will be \\\"windowed\\\", (a.k.a. \\\"virtualized\\\") and only the\\noptions visibile in the scroll area will be rendered, plus a buffer of 5 above and below. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"windowing\"), \"\\nprop can be used to override this \\u2013 either by setting it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" for under 100 or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" for over 100.\"), mdx(\"p\", null, \"To observe the performance impact, add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"windowing={false}\"), \" after \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"options={options1k}\"), \" below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const options1k = Array.from(Array(1000), (_, index) => ({\\n    value: `${index}`,\\n  }))\\n  return (\\n    <Select\\n      maxWidth={400}\\n      placeholder=\\\"So many options...\\\"\\n      options={options1k}\\n    />\\n  )\\n}\\n\")), mdx(\"h2\", null, \"List Layout\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"listLayout\"), \" prop to control layout properties of the list,\\nlike width and height, separately from the input.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space>\\n  <Select\\n    maxWidth={400}\\n    listLayout={{ width: 'auto' }}\\n    placeholder=\\\"Accommodate wide options\\\"\\n    options={[\\n      {\\n        value: 'short',\\n        label: 'Short label',\\n      },\\n      {\\n        value: 'long',\\n        label:\\n          'Incredibly long label that causes the list to be wider than the input',\\n      },\\n    ]}\\n  />\\n  <Select\\n    maxWidth={400}\\n    listLayout={{ width: '90vw', maxWidth: 700, maxHeight: 300 }}\\n    options={[\\n      { value: 'cheddar', label: 'Cheddar' },\\n      { value: 'gouda', label: 'Gouda' },\\n      { value: 'swiss', label: 'Swiss' },\\n      { value: 'string', label: 'String' },\\n      { value: 'parmesan', label: 'Parmigiano Reggiano' },\\n      { value: 'roquefort', label: 'Roquefort' },\\n      { value: 'brie', label: 'Brie' },\\n      { value: 'gruyere', label: 'Gruyere' },\\n      { value: 'feta', label: 'Feta' },\\n      { value: 'mozzarella', label: 'Mozzarella' },\\n      { value: 'manchego', label: 'Manchego' },\\n      { value: 'gorgonzola', label: 'Gorgonzola' },\\n      { value: 'epoisses', label: 'Epoisses' },\\n      { value: 'monterey-jack', label: 'Monterey Jack' },\\n      { value: 'muenster', label: 'Muenster' },\\n      { value: 'provolone', label: 'Provolone' },\\n      { value: 'blue', label: 'Blue' },\\n      { value: 'camembert', label: 'Camembert' },\\n      { value: 'havarti', label: 'Havarti' },\\n      { value: 'ricotta', label: 'Ricotta' },\\n      { value: 'mascarpone', label: 'Mascarpone' },\\n    ]}\\n  />\\n</Space>\\n\")), mdx(\"h2\", null, \"autoResize\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"autoResize\"), \" prop to allow the width of the component to adjust to the current value or placeholder, which is useful\\nwhen the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Select\"), \" is meant to be rendered inline and horizontal space is at a premium.\\nThe container will default to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display: inline-flex\"), \" and both the container and list will default to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"width: auto\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Select\\n  autoResize\\n  placeholder=\\\"Width adjusts to current value\\\"\\n  options={[\\n    {\\n      value: 'short',\\n      label: 'Short label',\\n    },\\n    {\\n      value: 'long',\\n      label: 'Very long label that widens the input considerably',\\n    },\\n  ]}\\n/>\\n\")), mdx(\"h2\", null, \"Indicator\"), mdx(\"p\", null, \"The default indicator renders a checkmark for the selected option and a spacer for the unselected options.\\nTo customize this, use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"indicator\"), \" property (either at the component or option level), which accepts a React node (including \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" to remove it\\ncompletely) or a function accepting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OptionIndicatorProps\"), \" and returning a React node.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Select\\n  maxWidth={400}\\n  indicator={({ isActive, isSelected }) => (\\n    <Icon icon={isSelected ? <Favorite /> : isActive ? <Add /> : <Remove />} />\\n  )}\\n  options={[\\n    { value: 'cheddar', label: 'Cheddar' },\\n    { value: 'gouda', label: 'Gouda', indicator: '***' },\\n    { value: 'swiss', label: 'Swiss' },\\n  ]}\\n/>\\n\")), mdx(\"h2\", null, \"Icons\"), mdx(\"p\", null, \"Define an icon for each option that will display in the list to the left of the option label as well as in the\\ninput when the option is selected. Use icons from our \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/v3.0.7/components/content/icon#icon-library\"\n  }, \"list\"), \" or custom JSX.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space>\\n  <Select\\n    placeholder=\\\"Select a visualization\\\"\\n    options={[\\n      { icon: <ChartBar />, label: 'Bar', value: 'bar' },\\n      { icon: <BarChart />, label: 'Column', value: 'column' },\\n      { icon: <ShowChart />, label: 'Line', value: 'line' },\\n      { icon: <Map />, label: 'Map', value: 'map' },\\n      { icon: <PieChart />, label: 'Pie', value: 'pie' },\\n      { icon: <TableChart />, label: 'Table', value: 'table' },\\n    ]}\\n  />\\n  <Select\\n    placeholder=\\\"Custom Icons\\\"\\n    options={[\\n      {\\n        icon: (\\n          <svg\\n            viewBox=\\\"0 0 24 24\\\"\\n            width=\\\"20px\\\"\\n            height=\\\"20px\\\"\\n            xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n          >\\n            <path\\n              d=\\\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM13 17H11V15H13V17ZM13 13H11V7H13V13Z\\\"\\n              fill=\\\"#7FFFD4\\\"\\n            />\\n          </svg>\\n        ),\\n        label: 'Aqua',\\n        value: 'Aqua',\\n      },\\n      {\\n        icon: (\\n          <svg\\n            viewBox=\\\"0 0 24 24\\\"\\n            width=\\\"20px\\\"\\n            height=\\\"20px\\\"\\n            xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n          >\\n            <path\\n              d=\\\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM13 17H11V15H13V17ZM13 13H11V7H13V13Z\\\"\\n              fill=\\\"#ff00e6\\\"\\n            />\\n          </svg>\\n        ),\\n        label: 'Pink',\\n        value: 'Pink',\\n      },\\n    ]}\\n  />\\n</Space>\\n\")), mdx(\"h2\", null, \"Detail\"), mdx(\"p\", null, \"Right aligned content in the option.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Select\\n  maxWidth={400}\\n  placeholder=\\\"Select food\\\"\\n  options={[\\n    { detail: 'Cheese', value: 'Gouda' },\\n    { detail: 'Fruit', value: 'Apple' },\\n  ]}\\n/>\\n\")), mdx(\"h2\", null, \"Preface\"), mdx(\"p\", null, \"Content rendered above the option label.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Select\\n  maxWidth={400}\\n  placeholder=\\\"Select a field\\\"\\n  options={[\\n    {\\n      label: 'Cost',\\n      description: 'Cost to stock - not the price the customer paid',\\n      preface: 'Inventory items',\\n      value: 'inventory_items.cost',\\n    },\\n    { label: 'Count', preface: 'Order Items', value: 'order_items.count' },\\n    {\\n      label: 'Sale Price',\\n      description: 'What the customer actually paid',\\n      preface: 'Order Items',\\n      value: 'order_items.sale_price',\\n    },\\n    {\\n      label: 'Retail Price',\\n      description: 'Base retail price',\\n      preface: 'Inventory Items',\\n      value: 'inventory_items.retail_price',\\n    },\\n    {\\n      label: 'Count',\\n      preface: 'Inventory Items',\\n      value: 'inventory_items.count',\\n    },\\n  ]}\\n/>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components/src/Form/Inputs/Select/Select.tsx","status":null,"storybook":true,"storybookPath":null,"title":"Select"}}},"pageContext":{"id":"7468aac2-aa70-574e-977c-e9ed1c29f4f7"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}