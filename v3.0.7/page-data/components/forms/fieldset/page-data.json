{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/forms/fieldset/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"e6b78b4f-945a-57e8-8bd4-a7b81f51c3dc","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Fieldset\",\n  \"github\": \"components/src/Form/Fieldset/Fieldset.tsx\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Fieldset\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Fieldset />\"), \" component is used to wrap Field components into groups.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Fieldset legend=\\\"This is the Legend\\\">\\n  <FieldText label=\\\"First Label\\\" />\\n  <FieldText label=\\\"Second Label\\\" />\\n  <FieldText label=\\\"Third Label\\\" />\\n</Fieldset>\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fieldset\"), \" can be displayed inline\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Fieldset inline legend=\\\"This is the Legend\\\">\\n  <FieldText label=\\\"First Label\\\" />\\n  <FieldText label=\\\"Second Label\\\" />\\n  <FieldText\\n    label=\\\"Third Label\\\"\\n    validationMessage={{ type: 'error', message: 'This is an error' }}\\n  />\\n</Fieldset>\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Field\"), \" can be individually displayed as inline inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fieldset\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Fieldset legend=\\\"This is the Legend\\\">\\n  <FieldText inline label=\\\"First Label\\\" />\\n  <FieldText inline label=\\\"Second Label\\\" />\\n</Fieldset>\\n\")), mdx(\"h3\", null, \"hideLabel and fieldsHideLabel\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fieldsHideLabel\"), \" visually hides all child \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Label\"), \"s inside a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fieldset\"), \", while preserving them in the DOM to improve accessibility.\"), mdx(\"p\", null, \"Additionally, each individual \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Field\"), \" accepts a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hideLabel\"), \" prop to hide that single label, or override the containing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fieldset\"), \" label settings.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<>\\n  <Fieldset fieldsHideLabel legend=\\\"This is the Legend 1\\\">\\n    <FieldText label=\\\"First Label\\\" />\\n    <FieldText label=\\\"Second Label\\\" />\\n    <FieldText label=\\\"Third Label\\\" hideLabel={false} />\\n  </Fieldset>\\n  <Fieldset legend=\\\"This is the Legend 1\\\">\\n    <FieldText label=\\\"First Label\\\" hideLabel />\\n    <FieldText label=\\\"Second Label\\\" />\\n    <FieldText label=\\\"Third Label\\\" />\\n  </Fieldset>\\n  <FieldText label=\\\"FieldText First Label\\\" hideLabel={false} />\\n  <FieldText label=\\\"FieldText Second Label\\\" />\\n  <FieldText label=\\\"FieldText Third Label\\\" hideLabel />\\n</>\\n\")), mdx(\"h2\", null, \"Legend\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"legend\"), \" property allows for a heading which is by default aligned above and to the left.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Fieldset legend=\\\"This is the Legend\\\" />\\n\")), mdx(\"h2\", null, \"Label\"), mdx(\"p\", null, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"label\"), \" as a prop in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Field\"), \" gives a larger clickable area since the area where the label is placed also is associated to the component that has the label.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Fieldset legend=\\\"This is the Legend\\\">\\n  <FieldCheckbox name=\\\"box1\\\" label=\\\"you can click here\\\" />\\n  <FieldCheckbox name=\\\"box2\\\" label=\\\"here too\\\" />\\n  <FieldCheckbox name=\\\"box3\\\" label=\\\"also here\\\" />\\n</Fieldset>\\n\")), mdx(\"h3\", null, \"Accordion Mode\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fieldset\"), \" offers an accordion mode via the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"accordion\"), \" prop.\"), mdx(\"p\", null, \"In accordion mode, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"legend\"), \" acts as a disclosure and clicking on it will show (or hide) the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fieldset\"), \"'s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"children\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Fieldset legend=\\\"This is the Legend\\\" accordion>\\n  <FieldCheckbox name=\\\"box1\\\" label=\\\"you can click here\\\" />\\n  <FieldCheckbox name=\\\"box2\\\" label=\\\"here too\\\" />\\n  <FieldCheckbox name=\\\"box3\\\" label=\\\"also here\\\" />\\n</Fieldset>\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" Using accordion mode without passing a value to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"legend\"), \" will throw a console warning and will result in a regular \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fieldset\"), \".\"), mdx(\"h3\", null, \"Controlling a Fieldset Accordion\"), mdx(\"p\", null, \"All \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Accordion\"), \" props pertaining to open state control can be used on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fieldset\"), \". Simply pass said props to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Fieldset\"), \" while the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"accordion\"), \" prop is true.\"), mdx(\"p\", null, \"Viable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Accordion\"), \" props include:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"defaultOpen\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"isOpen\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"toggleOpen\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"onOpen\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"onClose\")), mdx(\"p\", null, \"For more details on the props listed above, visit the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../content/accordion\"\n  }, \"Accordion documentation\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Fieldset\\n  legend=\\\"This is the Legend\\\"\\n  accordion\\n  defaultOpen\\n  onOpen={() => alert('Opening the pod bay doors')}\\n  onClose={() => alert('Closing the pod bay doors')}\\n>\\n  <FieldCheckbox name=\\\"box1\\\" label=\\\"you can click here\\\" />\\n  <FieldCheckbox name=\\\"box2\\\" label=\\\"here too\\\" />\\n  <FieldCheckbox name=\\\"box3\\\" label=\\\"also here\\\" />\\n</Fieldset>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components/src/Form/Fieldset/Fieldset.tsx","status":null,"storybook":true,"storybookPath":null,"title":"Fieldset"}}},"pageContext":{"id":"e6b78b4f-945a-57e8-8bd4-a7b81f51c3dc"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}