{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/layout/flex/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"7127a0f8-0455-5e8c-997a-0bb6523a855c","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Flex & FlexItem\",\n  \"github\": \"components/src/Layout/Flex/Flex.tsx\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar ItemDistribution = makeShortcode(\"ItemDistribution\");\nvar AligningItems = makeShortcode(\"AligningItems\");\nvar AligningContent = makeShortcode(\"AligningContent\");\nvar AdjustingIndividualAlignment = makeShortcode(\"AdjustingIndividualAlignment\");\nvar FlexItemExample = makeShortcode(\"FlexItemExample\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(MessageBar, {\n    noActions: true,\n    intent: \"warn\",\n    mb: \"u4\",\n    mdxType: \"MessageBar\"\n  }, mdx(Paragraph, {\n    mdxType: \"Paragraph\"\n  }, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"Flex\"), \" has been deprecated. Use a more specific layout helper such as\", mdx(\"a\", {\n    href: \"./space\"\n  }, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"Space\"), \" or \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"SpaceVertical\")), \" or \", mdx(\"a\", {\n    href: \"./grid\"\n  }, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"Grid\"))), mdx(Paragraph, {\n    mdxType: \"Paragraph\"\n  }, mdx(\"strong\", null, \"NOTE:\"), \" \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"<Box2 display=\\\"flex\\\" />\"), \" is functionally identical to today's \", mdx(Code, {\n    mdxType: \"Code\"\n  }, \"Flex\"), \".\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Flex />\"), \" component creates a flex container for you to place \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FlexItem />\"), \" components inside. It lets you utilize \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout\"\n  }, \"flex box\"), \" to create a wide variety of layouts, with powerful alignment, directional, and space distribution abilities.\"), mdx(\"p\", null, \"If you are not familiar with flex box, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\"\n  }, \"here is a great guide\"), \" for how it works.\"), mdx(\"h2\", null, \"Basic Usage\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Flex />\"), \" component has the ability to control the layout direction and order of its children. By default the children will layout in a row.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Flex>\\n  <FlexItem>\\uD83D\\uDC4B</FlexItem>\\n  <FlexItem>\\uD83D\\uDCAA</FlexItem>\\n  <FlexItem>\\uD83D\\uDCE6</FlexItem>\\n</Flex>\\n\")), mdx(\"h2\", null, \"Changing direction and order\"), mdx(\"p\", null, \"You can change the layout direction and order of flex children by using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flexDirection\"), \" property. Below we use the same children in each example but can adjust the layout quickly using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flexDirection\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Flex>\\n  <Flex mr=\\\"u5\\\">\\n    <FlexItem>1\\uFE0F\\u20E3</FlexItem>\\n    <FlexItem>2\\uFE0F\\u20E3</FlexItem>\\n    <FlexItem>3\\uFE0F\\u20E3</FlexItem>\\n  </Flex>\\n  <Flex flexDirection=\\\"column\\\" mr=\\\"u5\\\">\\n    <FlexItem>1\\uFE0F\\u20E3</FlexItem>\\n    <FlexItem>2\\uFE0F\\u20E3</FlexItem>\\n    <FlexItem>3\\uFE0F\\u20E3</FlexItem>\\n  </Flex>\\n  <Flex flexDirection=\\\"column-reverse\\\" mr=\\\"u5\\\">\\n    <FlexItem>1\\uFE0F\\u20E3</FlexItem>\\n    <FlexItem>2\\uFE0F\\u20E3</FlexItem>\\n    <FlexItem>3\\uFE0F\\u20E3</FlexItem>\\n  </Flex>\\n  <Flex flexDirection=\\\"row-reverse\\\" mr=\\\"u5\\\">\\n    <FlexItem>1\\uFE0F\\u20E3</FlexItem>\\n    <FlexItem>2\\uFE0F\\u20E3</FlexItem>\\n    <FlexItem>3\\uFE0F\\u20E3</FlexItem>\\n  </Flex>\\n</Flex>\\n\")), mdx(\"h2\", null, \"Item distribution\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Flex>\"), \" component allows you to control how its children are distributed within its container. Using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"justifyContent\"), \" property you can adjust the distribution of the children. Below is a table with all the justify options:\"), mdx(ItemDistribution, {\n    mdxType: \"ItemDistribution\"\n  }), mdx(\"p\", null, \"Here is a visual example of how using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"justifyContent\"), \" affects the distribution of items in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Flex />\"), \" component.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Flex justifyContent=\\\"flex-start\\\" mb=\\\"u4\\\" bg=\\\"ui1\\\">\\n  <Box>\\n    <Text fontSize=\\\"xxxxlarge\\\">\\uD83D\\uDD7A</Text>\\n  </Box2>\\n  <Box>\\n    <Text fontSize=\\\"xxxxlarge\\\">\\uD83C\\uDFB6</Text>\\n  </Box2>\\n  <Box>\\n    <Text fontSize=\\\"xxxxlarge\\\">\\uD83D\\uDC83</Text>\\n  </Box2>\\n</Flex>\\n<Flex justifyContent=\\\"space-between\\\" mb=\\\"u4\\\" bg=\\\"ui1\\\">\\n  <Box>\\n    <Text fontSize=\\\"xxxxlarge\\\">\\uD83D\\uDD7A</Text>\\n  </Box2>\\n  <Box>\\n    <Text fontSize=\\\"xxxxlarge\\\">\\uD83C\\uDFB6</Text>\\n  </Box2>\\n  <Box>\\n    <Text fontSize=\\\"xxxxlarge\\\">\\uD83D\\uDC83</Text>\\n  </Box2>\\n</Flex>\\n<Flex justifyContent=\\\"space-around\\\" mb=\\\"u4\\\" bg=\\\"ui1\\\">\\n  <Box>\\n    <Text fontSize=\\\"xxxxlarge\\\">\\uD83D\\uDD7A</Text>\\n  </Box2>\\n  <Box>\\n    <Text fontSize=\\\"xxxxlarge\\\">\\uD83C\\uDFB6</Text>\\n  </Box2>\\n  <Box>\\n    <Text fontSize=\\\"xxxxlarge\\\">\\uD83D\\uDC83</Text>\\n  </Box2>\\n</Flex>\\n<Flex justifyContent=\\\"space-evenly\\\" mb=\\\"u4\\\" bg=\\\"ui1\\\">\\n  <Box>\\n    <Text fontSize=\\\"xxxxlarge\\\">\\uD83D\\uDD7A</Text>\\n  </Box2>\\n  <Box>\\n    <Text fontSize=\\\"xxxxlarge\\\">\\uD83C\\uDFB6</Text>\\n  </Box2>\\n  <Box>\\n    <Text fontSize=\\\"xxxxlarge\\\">\\uD83D\\uDC83</Text>\\n  </Box2>\\n</Flex>\\n<Flex justifyContent=\\\"center\\\" mb=\\\"u4\\\" bg=\\\"ui1\\\">\\n  <Box>\\n    <Text fontSize=\\\"xxxxlarge\\\">\\uD83D\\uDD7A</Text>\\n  </Box2>\\n  <Box>\\n    <Text fontSize=\\\"xxxxlarge\\\">\\uD83C\\uDFB6</Text>\\n  </Box2>\\n  <Box>\\n    <Text fontSize=\\\"xxxxlarge\\\">\\uD83D\\uDC83</Text>\\n  </Box2>\\n</Flex>\\n<Flex justifyContent=\\\"flex-end\\\" mb=\\\"u4\\\" bg=\\\"ui1\\\">\\n  <Box>\\n    <Text fontSize=\\\"xxxxlarge\\\">\\uD83D\\uDD7A</Text>\\n  </Box2>\\n  <Box>\\n    <Text fontSize=\\\"xxxxlarge\\\">\\uD83C\\uDFB6</Text>\\n  </Box2>\\n  <Box>\\n    <Text fontSize=\\\"xxxxlarge\\\">\\uD83D\\uDC83</Text>\\n  </Box2>\\n</Flex>\\n\")), mdx(\"h2\", null, \"Aligning Items\"), mdx(\"p\", null, \"Flex box allows for quickly adjusting the alignment of items inside the flex container. Below are available alignment types:\"), mdx(AligningItems, {\n    mdxType: \"AligningItems\"\n  }), mdx(\"p\", null, \"Here is an example of using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"alignItems\"), \" to adjust how items are aligned within the flex container.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Flex mb=\\\"u10\\\">\\n  <FlexItem p=\\\"u10\\\" bg=\\\"ui1\\\">\\n    Default (stretch)\\n  </FlexItem>\\n  <FlexItem p=\\\"u5\\\" bg=\\\"ui2\\\">\\n    One\\n  </FlexItem>\\n  <FlexItem p=\\\"u4\\\" bg=\\\"ui3\\\">\\n    Two\\n  </FlexItem>\\n  <FlexItem p=\\\"u3\\\" bg=\\\"ui4\\\">\\n    Three\\n  </FlexItem>\\n</Flex>\\n<Flex alignItems=\\\"center\\\" mb=\\\"u10\\\">\\n  <FlexItem p=\\\"u10\\\" bg=\\\"ui1\\\">\\n    Center\\n  </FlexItem>\\n  <FlexItem p=\\\"u5\\\" bg=\\\"ui2\\\">\\n    One\\n  </FlexItem>\\n  <FlexItem p=\\\"u4\\\" bg=\\\"ui3\\\">\\n    Two\\n  </FlexItem>\\n  <FlexItem p=\\\"u3\\\" bg=\\\"ui4\\\">\\n    Three\\n  </FlexItem>\\n</Flex>\\n<Flex alignItems=\\\"flex-start\\\" mb=\\\"u10\\\">\\n  <FlexItem p=\\\"u10\\\" bg=\\\"ui1\\\">\\n    Start\\n  </FlexItem>\\n  <FlexItem p=\\\"u5\\\" bg=\\\"ui2\\\">\\n    Two\\n  </FlexItem>\\n  <FlexItem p=\\\"u4\\\" bg=\\\"ui3\\\">\\n    Three\\n  </FlexItem>\\n  <FlexItem p=\\\"u3\\\" bg=\\\"ui4\\\">\\n    Four\\n  </FlexItem>\\n</Flex>\\n<Flex alignItems=\\\"flex-end\\\" mb=\\\"u10\\\">\\n  <FlexItem p=\\\"u10\\\" bg=\\\"ui1\\\">\\n    End\\n  </FlexItem>\\n  <FlexItem p=\\\"u5\\\" bg=\\\"ui2\\\">\\n    Two\\n  </FlexItem>\\n  <FlexItem p=\\\"u4\\\" bg=\\\"ui3\\\">\\n    Three\\n  </FlexItem>\\n  <FlexItem p=\\\"u3\\\" bg=\\\"ui4\\\">\\n    Four\\n  </FlexItem>\\n</Flex>\\n<Flex alignItems=\\\"baseline\\\" mb=\\\"u10\\\">\\n  <FlexItem p=\\\"u10\\\" bg=\\\"ui1\\\">\\n    Baseline\\n  </FlexItem>\\n  <FlexItem p=\\\"u5\\\" bg=\\\"ui2\\\">\\n    Two\\n  </FlexItem>\\n  <FlexItem p=\\\"u4\\\" bg=\\\"ui3\\\">\\n    Three\\n  </FlexItem>\\n  <FlexItem p=\\\"u3\\\" bg=\\\"ui4\\\">\\n    Four\\n  </FlexItem>\\n</Flex>\\n\")), mdx(\"h2\", null, \"Aligning Content\"), mdx(\"p\", null, \"If you have multiple rows of flex items, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"alignContent\"), \" property determines how the rows are distributed within the flex container.\"), mdx(AligningContent, {\n    mdxType: \"AligningContent\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Flex justifyContent=\\\"space-between\\\">\\n  <Flex\\n    alignContent=\\\"space-around\\\"\\n    width=\\\"30%\\\"\\n    height=\\\"150px\\\"\\n    flexWrap=\\\"wrap\\\"\\n    bg=\\\"key\\\"\\n  >\\n    <FlexItem width=\\\"70%\\\" m=\\\"u3\\\" p=\\\"u2\\\" bg=\\\"ui1\\\">\\n      Aligned w/\\n    </FlexItem>\\n    <FlexItem width=\\\"30%\\\" m=\\\"u3\\\" p=\\\"u2\\\" bg=\\\"ui1\\\">\\n      Space\\n    </FlexItem>\\n    <FlexItem width=\\\"50%\\\" m=\\\"u3\\\" p=\\\"u2\\\" bg=\\\"ui1\\\">\\n      Betwen\\n    </FlexItem>\\n  </Flex>\\n  <Flex\\n    alignContent=\\\"flex-end\\\"\\n    width=\\\"30%\\\"\\n    height=\\\"150px\\\"\\n    flexWrap=\\\"wrap\\\"\\n    bg=\\\"inform\\\"\\n  >\\n    <FlexItem width=\\\"70%\\\" m=\\\"u3\\\" p=\\\"u2\\\" bg=\\\"ui2\\\">\\n      Aligned w/\\n    </FlexItem>\\n    <FlexItem width=\\\"30%\\\" m=\\\"u3\\\" p=\\\"u2\\\" bg=\\\"ui2\\\">\\n      Flex\\n    </FlexItem>\\n    <FlexItem width=\\\"50%\\\" m=\\\"u3\\\" p=\\\"u2\\\" bg=\\\"ui2\\\">\\n      End\\n    </FlexItem>\\n  </Flex>\\n  <Flex\\n    alignContent=\\\"center\\\"\\n    width=\\\"30%\\\"\\n    height=\\\"150px\\\"\\n    flexWrap=\\\"wrap\\\"\\n    bg=\\\"positive\\\"\\n  >\\n    <FlexItem width=\\\"70%\\\" m=\\\"u3\\\" p=\\\"u2\\\" bg=\\\"ui3\\\">\\n      Aligned w/\\n    </FlexItem>\\n    <FlexItem width=\\\"30%\\\" m=\\\"u3\\\" p=\\\"u2\\\" bg=\\\"ui3\\\">\\n      Flex\\n    </FlexItem>\\n    <FlexItem width=\\\"50%\\\" m=\\\"u3\\\" p=\\\"u2\\\" bg=\\\"ui3\\\">\\n      Center\\n    </FlexItem>\\n  </Flex>\\n</Flex>\\n\")), mdx(\"h2\", null, \"Wrapping Flex Items\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flexWrap\"), \" property determines if flex items should be forced into a single line or if they can wrap onto multiple lines.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Flex width=\\\"80%\\\" flexWrap=\\\"nowrap\\\" mb=\\\"u5\\\">\\n  <FlexItem width=\\\"40%\\\" p=\\\"u5\\\" bg=\\\"ui4\\\">\\n    These Lines\\n  </FlexItem>\\n  <FlexItem width=\\\"40%\\\" p=\\\"u5\\\" bg=\\\"ui2\\\">\\n    Will NOT\\n  </FlexItem>\\n  <FlexItem width=\\\"40%\\\" p=\\\"u5\\\" bg=\\\"ui3\\\">\\n    Wrap\\n  </FlexItem>\\n</Flex>\\n<Flex width=\\\"50%\\\" flexWrap=\\\"wrap\\\" mb=\\\"u5\\\">\\n  <FlexItem width=\\\"40%\\\" p=\\\"u5\\\" bg=\\\"ui4\\\">\\n    These Lines\\n  </FlexItem>\\n  <FlexItem width=\\\"40%\\\" p=\\\"u5\\\" bg=\\\"ui2\\\">\\n    Will\\n  </FlexItem>\\n  <FlexItem width=\\\"40%\\\" p=\\\"u5\\\" bg=\\\"ui3\\\">\\n    Wrap\\n  </FlexItem>\\n</Flex>\\n<Flex width=\\\"50%\\\" flexWrap=\\\"wrap-reverse\\\" mb=\\\"u5\\\">\\n  <FlexItem width=\\\"40%\\\" p=\\\"u5\\\" bg=\\\"ui4\\\">\\n    These Lines\\n  </FlexItem>\\n  <FlexItem width=\\\"40%\\\" p=\\\"u5\\\" bg=\\\"ui2\\\">\\n    Will\\n  </FlexItem>\\n  <FlexItem width=\\\"40%\\\" p=\\\"u5\\\" bg=\\\"ui3\\\">\\n    Wrap Reverse\\n  </FlexItem>\\n</Flex>\\n\")), mdx(\"h2\", null, \"Responsive Behavior\"), mdx(\"p\", null, \"Many of the properties you can set on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Flex />\"), \" component will accept an array of values that will then be applied at different breakpoints. There are 5 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/v3.0.7/#!/Breakpoints\"\n  }, \"breakpoints\"), \" slots that you can target. Here is an example of what that looks like.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Flex\\n  flexDirection={[\\n    'column', // column up to the first breakpoint\\n    null, // stay a column past first breakpoint\\n    'row', // switch to row layout after second breakpoint\\n  ]}\\n>\\n  <FlexItem p=\\\"u4\\\" bg=\\\"ui5\\\">\\n    \\uD83D\\uDC4B\\n  </FlexItem>\\n  <FlexItem p=\\\"u4\\\" bg=\\\"ui3\\\">\\n    \\uD83D\\uDCAA\\n  </FlexItem>\\n  <FlexItem p=\\\"u4\\\" bg=\\\"ui1\\\">\\n    \\uD83D\\uDCE6\\n  </FlexItem>\\n</Flex>\\n\")), mdx(\"h2\", null, \"FlexItem\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FlexItem />\"), \" component lets you have more control of the properties that apply to just children inside a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Flex />\"), \" container. These properties affect how a flex item aligns its self, it's order, and how it resizes to fill the available space in the flex container.\"), mdx(\"h3\", null, \"Adjusting Individual Alignment\"), mdx(\"p\", null, \"Using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"alignSelf\"), \" property on a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FlexItem />\"), \" allows you to override the the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"alignItems\"), \" value from the flex container. This is useful if you need to adjust how a single flex item aligns itself in the container.\"), mdx(AdjustingIndividualAlignment, {\n    mdxType: \"AdjustingIndividualAlignment\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Flex height=\\\"200px\\\" bg=\\\"key\\\">\\n  <FlexItem alignSelf=\\\"flex-start\\\">\\n    <Box2 m=\\\"u3\\\" p=\\\"u5\\\" bg=\\\"ui1\\\">\\n      Flex Start\\n    </Box2>\\n  </FlexItem>\\n  <FlexItem alignSelf=\\\"flex-end\\\">\\n    <Box2 m=\\\"u3\\\" p=\\\"u5\\\" bg=\\\"ui1\\\">\\n      Flex End\\n    </Box2>\\n  </FlexItem>\\n  <FlexItem alignSelf=\\\"center\\\">\\n    <Box2 m=\\\"u3\\\" p=\\\"u5\\\" bg=\\\"ui1\\\">\\n      Center\\n    </Box2>\\n  </FlexItem>\\n  <FlexItem alignSelf=\\\"baseline\\\">\\n    <Box2 m=\\\"u3\\\" p=\\\"u5\\\" bg=\\\"ui1\\\">\\n      Baseline\\n    </Box2>\\n  </FlexItem>\\n</Flex>\\n\")), mdx(\"h3\", null, \"Item Order\"), mdx(\"p\", null, \"By default flex items are laid our in source order, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"order\"), \" property on a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FlexItem />\"), \" allows you to adjust how an individual flex item is is ordered in a flex container.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"order\"), \" value default is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \", so setting an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"order=\\\"1\\\"\"), \" will put the item at the end unless another flex item has a higher \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"order\"), \" set. You can also use negative numbers to set an item at the beginning.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Flex bg=\\\"ui1\\\" mb=\\\"u5\\\">\\n  <FlexItem>\\n    <Box2 m=\\\"u3\\\" p=\\\"u5\\\" bg=\\\"ui2\\\">\\n      0\\n    </Box2>\\n  </FlexItem>\\n  <FlexItem>\\n    <Box2 m=\\\"u3\\\" p=\\\"u5\\\" bg=\\\"ui1\\\">\\n      1\\n    </Box2>\\n  </FlexItem>\\n  <FlexItem>\\n    <Box2 m=\\\"u3\\\" p=\\\"u5\\\" bg=\\\"ui3\\\">\\n      2\\n    </Box2>\\n  </FlexItem>\\n  <FlexItem>\\n    <Box2 m=\\\"u3\\\" p=\\\"u5\\\" bg=\\\"ui5\\\" color=\\\"inverseOn\\\">\\n      3\\n    </Box2>\\n  </FlexItem>\\n  <FlexItem>\\n    <Box2 m=\\\"u3\\\" p=\\\"u5\\\" bg=\\\"ui4\\\">\\n      4\\n    </Box2>\\n  </FlexItem>\\n</Flex>\\n<Flex bg=\\\"ui1\\\">\\n  <FlexItem>\\n    <Box2 m=\\\"u3\\\" p=\\\"u5\\\" bg=\\\"ui2\\\">\\n      0\\n    </Box2>\\n  </FlexItem>\\n  <FlexItem order=\\\"2\\\">\\n    <Box2 m=\\\"u3\\\" p=\\\"u5\\\" bg=\\\"ui1\\\">\\n      1\\n    </Box2>\\n  </FlexItem>\\n  <FlexItem order=\\\"1\\\">\\n    <Box2 m=\\\"u3\\\" p=\\\"u5\\\" bg=\\\"ui3\\\">\\n      2\\n    </Box2>\\n  </FlexItem>\\n  <FlexItem>\\n    <Box2 m=\\\"u3\\\" p=\\\"u5\\\" bg=\\\"ui5\\\" color=\\\"inverseOn\\\">\\n      3\\n    </Box2>\\n  </FlexItem>\\n  <FlexItem order=\\\"-1\\\">\\n    <Box2 m=\\\"u3\\\" p=\\\"u5\\\" bg=\\\"ui4\\\">\\n      4\\n    </Box2>\\n  </FlexItem>\\n</Flex>\\n\")), mdx(\"h3\", null, \"Controlling Item Size\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<FlexItem>\"), \" has two properties for managing its size. You can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flexBasis\"), \" property or the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flex\"), \" property.\"), mdx(\"h4\", null, \"Flex Basis example.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flexBasis\"), \" property defines the flex-items' default size before the remaining space is distributed.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Flex>\\n  <FlexItem flexBasis=\\\"20%\\\">\\n    <Box2 p=\\\"u3\\\" m=\\\"u3\\\" bg=\\\"ui4\\\">\\n      I am 20% of container\\n    </Box2>\\n  </FlexItem>\\n  <FlexItem flexBasis=\\\"5.5rem\\\">\\n    <Box2 p=\\\"u3\\\" m=\\\"u3\\\" bg=\\\"ui3\\\">\\n      I am 5.5rem of container\\n    </Box2>\\n  </FlexItem>\\n  <FlexItem flexBasis=\\\"150px\\\">\\n    <Box2 p=\\\"u3\\\" m=\\\"u3\\\" bg=\\\"ui2\\\">\\n      I am 150px of container\\n    </Box2>\\n  </FlexItem>\\n  <FlexItem>\\n    <Box2 p=\\\"u3\\\" m=\\\"u3\\\" bg=\\\"ui1\\\">\\n      I am sized to my content\\n    </Box2>\\n  </FlexItem>\\n</Flex>\\n\")), mdx(\"h3\", null, \"Flex Example\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flex\"), \" property is a shorthand for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flex-grow\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flex-shrink\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flex-basis\"), \" properties. It specifies how a flex item will grow or shrink to fit the space in its flex container.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note\"), \": The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flex\"), \" syntax can be a bit confusing, if you need a more detail set of examples check out this \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/flex\"\n  }, \"MDN flex overview\"), \".\"), mdx(FlexItemExample, {\n    mdxType: \"FlexItemExample\"\n  }), mdx(\"h3\", null, \"Flex Grow Example\"), mdx(\"p\", null, \"Below we set the flex grow value of the first flex item to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"2\"), \" so it will take up a factor of two in the flex container\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Flex>\\n  <FlexItem flex=\\\"2\\\">\\n    <Box2 p=\\\"u3\\\" bg=\\\"ui4\\\">\\n      Flex: 2\\n    </Box2>\\n  </FlexItem>\\n  <FlexItem flex=\\\"1\\\">\\n    <Box2 p=\\\"u3\\\" bg=\\\"ui3\\\">\\n      Flex: 1\\n    </Box2>\\n  </FlexItem>\\n  <FlexItem flex=\\\"1\\\">\\n    <Box2 p=\\\"u3\\\" bg=\\\"ui2\\\">\\n      Flex: 1\\n    </Box2>\\n  </FlexItem>\\n</Flex>\\n\")), mdx(\"h3\", null, \"Flex Shrink\"), mdx(\"p\", null, \"Below we have a flex container with a set width of 500px and each child's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flex-basis\"), \" is set to 200px. The flex shrink value on the last two flex items is set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1\"), \" and they will now shrink so that all the flex items fit within the flex container.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Flex width=\\\"500px\\\">\\n  <FlexItem flex=\\\"1 0 200px\\\">\\n    <Box2 p=\\\"u3\\\" bg=\\\"ui4\\\">\\n      No Shrink\\n    </Box2>\\n  </FlexItem>\\n  <FlexItem flex=\\\"1 1 200px\\\">\\n    <Box2 p=\\\"u3\\\" bg=\\\"ui3\\\">\\n      I'll shrink\\n    </Box2>\\n  </FlexItem>\\n  <FlexItem flex=\\\"1 1 200px\\\">\\n    <Box2 p=\\\"u3\\\" bg=\\\"ui2\\\">\\n      I'll shrink\\n    </Box2>\\n  </FlexItem>\\n</Flex>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components/src/Layout/Flex/Flex.tsx","status":null,"storybook":null,"storybookPath":null,"title":"Flex & FlexItem"}}},"pageContext":{"id":"7127a0f8-0455-5e8c-997a-0bb6523a855c"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}