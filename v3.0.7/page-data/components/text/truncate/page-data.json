{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/text/truncate/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"c78fd5ee-332d-5b46-854d-d68ce2293354","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Truncate\",\n  \"github\": \"components/src/Text/Truncate.tsx\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Truncate\"), \" can be used when you want to prevent text from wrapping. Text will be limited to a single line, and if it overflows an ellipsis will be rendered. In addition, a tooltip will be activated to display the full text on hover.\"), mdx(MessageBar, {\n    intent: \"warn\",\n    noActions: true,\n    mdxType: \"MessageBar\"\n  }, mdx(\"strong\", null, \"Caveat:\"), \" the direct parent of this component must have a width or max-width styled on it or else it will invisibly overflow without rendering the proper ellipsis.\"), mdx(Paragraph, {\n    mdxType: \"Paragraph\"\n  }, \"\\xA0\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Truncate>\\n  <strong>Hover over text to see the full content:</strong> Earliest proposed\\n  dates for the origin of cheesemaking range from around 8000 BCE, when sheep\\n  were first domesticated. Since animal skins and inflated internal organs have,\\n  since ancient times, provided storage vessels for a range of foodstuffs, it is\\n  probable that the process of cheese making was discovered accidentally by\\n  storing milk in a container made from the stomach of an animal, resulting in\\n  the milk being turned to curd and whey by the rennet from the stomach. There\\n  is a legend\\u2014with variations\\u2014about the discovery of cheese by an Arab trader\\n  who used this method of storing milk.\\n</Truncate>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components/src/Text/Truncate.tsx","status":null,"storybook":null,"storybookPath":null,"title":"Truncate"}}},"pageContext":{"id":"c78fd5ee-332d-5b46-854d-d68ce2293354"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}