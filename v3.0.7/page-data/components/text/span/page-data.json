{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/text/span/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"2d7f0a66-7113-5249-ba10-57e0b0a67299","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Span\",\n  \"github\": \"components/src/Text/Span.tsx\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"By default the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Span />\"), \" component will render text wrapped in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<span>\"), \", if you need another html element for semantic purposes you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"element\"), \" property.\"), mdx(\"p\", null, \"Note: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@looker/components\"), \" also exports a, now deprecated, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Text\"), \" component that is identical to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Span\"), \" except that it has a default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fontSize=\\\"medium\\\"\"), \" rather than inheriting it's parent element's fontSize.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Span>By default I am a span</Span>\\n<Paragraph>Wrapped in a paragraph tag</Paragraph>\\n<Code>Wrapped in a code tag</Code>\\n\\n\")), mdx(\"h2\", null, \"Text Size\"), mdx(\"p\", null, \"If you need to adjust the font-size of the rendered text, you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" property and a value from the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/v3.0.7/#!/Typography\"\n  }, \"type scale\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Span fontSize=\\\"xxxxlarge\\\">Sized to xxxxlarge</Span>\\n<Span fontSize=\\\"xxlarge\\\">Sized to xxlarge</Span>\\n<Span fontSize=\\\"small\\\">Sized to small</Span>\\n\")), mdx(\"h2\", null, \"Weight & Transform\"), mdx(\"p\", null, \"Common patterns for text is to adjust the font weight and transform the text. Below is an example of using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"weight\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"textTransform\"), \" properties to modify the rendered text\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Span fontSize=\\\"small\\\" textTransform=\\\"uppercase\\\" fontWeight=\\\"semiBold\\\">\\n  A great story\\n</Span>\\n<Span fontSize=\\\"xxxxlarge\\\" fontWeight=\\\"light\\\">\\n  This is a great headline\\n</Span>\\n<Span fontSize=\\\"small\\\" textTransform=\\\"caps\\\">\\n  Some metadata about this story\\n</Span>\\n\")), mdx(\"h2\", null, \"Color\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Text\"), \" supports a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"), \" prop that supports the full theme color object. Common uses are shown in the example below:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Span>Regular Text</Span>\\n<Span color=\\\"text1\\\">`text1` Text</Span>\\n<Span color=\\\"text2\\\">`text2` Text</Span>\\n<Span color=\\\"critical\\\">Critical Text</Span>\\n<Span color=\\\"positive\\\">Positive Text</Span>\\n\")), mdx(\"h2\", null, \"Text Alignment\"), mdx(\"p\", null, \"You can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"align\"), \" property to change the alignment of the rendered text, below is an example with aligned text put into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Card />\"), \"s.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Card>\\n  <CardContent>\\n    <Paragraph> I am aligned left by default</Paragraph>\\n  </CardContent>\\n</Card>\\n<Card>\\n  <CardContent>\\n    <Paragraph textAlign=\\\"center\\\">\\n      This is how you can center align Paragraph text\\n    </Paragraph>\\n  </CardContent>\\n</Card>\\n<Card>\\n  <CardContent>\\n    <Paragraph textAlign=\\\"right\\\">\\n      This is how you can right align Paragraph text\\n    </Paragraph>\\n  </CardContent>\\n</Card>\\n\")), mdx(\"h2\", null, \"Truncate\"), mdx(\"p\", null, \"At times you may want your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Paragraph />\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Heading />\"), \" to truncate instead of the text wrapping, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"truncate\"), \" property will do that for you. For a multiline truncate, use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"truncateLines\"), \" (this is not supported in IE11).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<div style={{ width: '40%' }}>\\n  <Heading truncate as=\\\"h2\\\">\\n    Hello there I am a heading that will truncate to one line \\uD83C\\uDF55\\uD83E\\uDD51\\uD83C\\uDF6A\\uD83E\\uDD53\\n  </Heading>\\n  <Paragraph truncateLines={2}>\\n    And I am some text that is super long and gets truncated at two lines with\\n    an ellipsis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce\\n    a ultrices dolor. Suspendisse nulla purus, condimentum id pharetra vel,\\n    aliquet et dui. Mauris elementum sollicitudin risus, eget convallis felis\\n    ultrices feugiat. Mauris et ante euismod lacus posuere euismod vel eu ipsum.\\n    Fusce iaculis accumsan est, a volutpat magna porta nec.\\n  </Paragraph>\\n</div>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components/src/Text/Span.tsx","status":null,"storybook":true,"storybookPath":null,"title":"Span"}}},"pageContext":{"id":"2d7f0a66-7113-5249-ba10-57e0b0a67299"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}