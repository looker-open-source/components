{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/filters/summary/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"c383261e-aa74-5a44-a32e-ed2cb18660a3","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"summary\",\n  \"github\": \"filter-expressions/src/utils/summary/summary.ts\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(ImportMessage, {\n    packageName: \"filter-components\",\n    mdxType: \"ImportMessage\"\n  }, \"summary\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"summary\"), \" function returns a localized, human-readable summary of a\\nfilter expression, given the expression's type, the expression itself,\\nand the user attributes and field, if applicable.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const type = 'number'\\n  const [expression, setExpression] = useState('[0,20],>30')\\n  const handleChange = value => {\\n    setExpression(value.expression)\\n  }\\n  return (\\n    <Popover\\n      content={\\n        <PopoverContent>\\n          <Filter\\n            expressionType={type}\\n            expression={expression}\\n            onChange={handleChange}\\n          />\\n        </PopoverContent>\\n      }\\n    >\\n      <Button>{summary({ type, expression })}</Button>\\n    </Popover>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"filter-expressions/src/utils/summary/summary.ts","status":null,"storybook":null,"storybookPath":null,"title":"summary"}}},"pageContext":{"id":"c383261e-aa74-5a44-a32e-ed2cb18660a3"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}