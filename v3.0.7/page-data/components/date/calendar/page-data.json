{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/date/calendar/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"773c9c3b-3e12-5c05-ab79-eadf5898331f","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Calendar\",\n  \"github\": \"components-date/src/Calendar/Calendar.tsx\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar CalendarPropTable = makeShortcode(\"CalendarPropTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(ImportMessage, {\n    packageName: \"components-date\",\n    mdxType: \"ImportMessage\"\n  }, \"Calendar\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Calendar\"), \" is a stateless component which renders a standard calendar month. It accepts a limited amount of props, and is the foundation of our more useful \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/v3.0.7/components/forms/input-date\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"InputDate\")), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDateRange\"), \" components.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Calendar />\\n\")), mdx(\"h2\", null, \"Props\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Calendar\"), \" shares many of the same props as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDate\"), \". Please \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/v3.0.7/components/forms/input-date\"\n  }, \"view those docs\"), \" for interactive examples. But if you wish to use Calendar to build fully custom experiences, the following props are available for you:\"), mdx(CalendarPropTable, {\n    mdxType: \"CalendarPropTable\"\n  }), mdx(\"h2\", null, \"Size\"), mdx(\"p\", null, \"We support three sizes: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"small\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"medium (default)\")), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"large\"), \". The font and grid are sized accordingly.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [value, setValue] = useState('medium')\\n  return (\\n    <>\\n      <div>\\n        <ButtonToggle value={value} onChange={setValue}>\\n          <ButtonItem>small</ButtonItem>\\n          <ButtonItem>medium</ButtonItem>\\n          <ButtonItem>large</ButtonItem>\\n        </ButtonToggle>\\n      </div>\\n      <Calendar size={value} />\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Navigation Callbacks\"), mdx(\"p\", null, \"We support four different callbacks to hook into various navigation events:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"onNextClick\"), \": the user clicked the right arrow\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"onPrevClick\"), \": the user clicked the right arrow\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"onNowClick\"), \": the user clicked the month label to return to the current month\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"onMonthChange\"), \": the user navigated to a new month (could be through any mouse or keyboard interaction)\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const onNextClick = date =>\\n    alert(`Clicked \\\"Next\\\" (${date.getMonth() + 1}/${date.getFullYear()})`)\\n  const onNowClick = date =>\\n    alert(`Clicked \\\"Now\\\" (${date.getMonth() + 1}/${date.getFullYear()})`)\\n  const onPrevClick = date =>\\n    alert(`Clicked \\\"Prev\\\" (${date.getMonth() + 1}/${date.getFullYear()})`)\\n  const onMonthChange = date =>\\n    alert(`Month Changed (${date.getMonth() + 1}/${date.getFullYear()})`)\\n  return (\\n    <Calendar\\n      onNextClick={onNextClick}\\n      onNowClick={onNowClick}\\n      onPrevClick={onPrevClick}\\n      onMonthChange={onMonthChange}\\n    />\\n  )\\n}\\n\")), mdx(\"h2\", null, \"I18n\"), mdx(\"p\", null, \"Install the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://date-fns.org/\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"date-fns\")), \" package, import the necessary locale, and pass it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ComponentsProvider\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }, \"import { ComponentsProvider } from '@looker/components'\\nimport { Calendar } from '@looker/components'\\nimport ko from 'date-fns/locale/ko'\\n\\nexport const App = () => {\\n  return (\\n    <ComponentsProvider dateLocale={ko}>\\n      <Calendar />\\n    </ComponentsProvider>\\n  )\\n}\\n\")), mdx(\"p\", null, \"The locale can also be passed directly to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Calendar\"), \" component.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }, \"import { Calendar } from '@looker/components'\\nimport ko from 'date-fns/locale/ko'\\n\\nexport const LocalizedCalendar = () => {\\n  return <Calendar locale={ko} />\\n}\\n\")), mdx(\"h3\", null, \"firstDayOfWeek\"), mdx(\"p\", null, \"The calendar will use the locale's default to determine which day the week starts on.\\nUse the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"firstDayOfWeek\"), \" prop to override this \\u2013 0 for Sunday, 1 for Monday, etc.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Calendar firstDayOfWeek={1} />\\n\")), mdx(\"h3\", null, \"selectMonth\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"selectMonth\"), \" prop turns the month and year in the title of the calendar into dropdowns.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Calendar selectMonth />\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components-date/src/Calendar/Calendar.tsx","status":null,"storybook":null,"storybookPath":null,"title":"Calendar"}}},"pageContext":{"id":"773c9c3b-3e12-5c05-ab79-eadf5898331f"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}