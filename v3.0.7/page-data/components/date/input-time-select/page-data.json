{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/date/input-time-select/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"c15d4339-b61e-5d5b-a1d5-32996d95f0cc","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"InputTimeSelect\",\n  \"github\": \"components-date/src/InputTimeSelect/InputTimeSelect.tsx\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(ImportMessage, {\n    packageName: \"components-date\",\n    mdxType: \"ImportMessage\"\n  }, \"InputTimeSelect\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputTimeSelect\"), \" provides a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/v3.0.7/components/forms/select\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Select\")), \"-based dropdown UI for picking a 24-hour time value. This is an alternative to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/v3.0.7/components/forms/input-time\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"InputTime\")), \", which provides an HTML5-standard time picking experience.\"), mdx(\"p\", null, \"The default implementation provides a dropdown list of times in 15-minute increments, formatted in for a 12-hour clock.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<InputTimeSelect />\\n\")), mdx(\"h1\", null, \"Intervals\"), mdx(\"p\", null, \"You can choose from any of the following options: 5, 10, 15, 20, 30, or 60 minute intervals.\"), mdx(\"p\", null, \"We've limited allowed intervals to a few approved options rather than accepting any number. This is to protect against uninteded use where an engineer might specify 1-minute intervals and generate an unusable select box with 1400 options. We also wouldn't want to support bizarre instances of a random numbers like 37 or 152 minute intervals.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Fieldset>\\n  <SpaceVertical gap=\\\"u1\\\">\\n    <Heading as=\\\"h4\\\">5-minute</Heading>\\n    <InputTimeSelect interval={5} />\\n  </SpaceVertical>\\n  <SpaceVertical gap=\\\"u1\\\">\\n    <Heading as=\\\"h4\\\">10-minute</Heading>\\n    <InputTimeSelect interval={10} />\\n  </SpaceVertical>\\n  <SpaceVertical gap=\\\"u1\\\">\\n    <Heading as=\\\"h4\\\">15-minute</Heading>\\n    <InputTimeSelect interval={15} />\\n  </SpaceVertical>\\n  <SpaceVertical gap=\\\"u1\\\">\\n    <Heading as=\\\"h4\\\">60-minute</Heading>\\n    <InputTimeSelect interval={20} />\\n  </SpaceVertical>\\n  <SpaceVertical gap=\\\"u1\\\">\\n    <Heading as=\\\"h4\\\">30-minute</Heading>\\n    <InputTimeSelect interval={30} />\\n  </SpaceVertical>\\n  <SpaceVertical gap=\\\"u1\\\">\\n    <Heading as=\\\"h4\\\">60-minute</Heading>\\n    <InputTimeSelect interval={60} />\\n  </SpaceVertical>\\n</Fieldset>\\n\")), mdx(\"h1\", null, \"12- or 24-hour formatting\"), mdx(\"p\", null, \"Depending on readability preference, the time picker can format the labels in either 12- or 24-hour time. Regardless of label formatting, this component returns a 24-hour time formatted string when changed.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [value, setValue] = useState('14:00')\\n  return (\\n    <Grid>\\n      <SpaceVertical gap=\\\"u2\\\">\\n        <Heading as=\\\"h3\\\">12-hour</Heading>\\n        <Space>\\n          <InputTimeSelect format=\\\"12h\\\" value={value} onChange={setValue} />\\n          <Text color=\\\"text2\\\">{value}</Text>\\n        </Space>\\n      </SpaceVertical>\\n      <SpaceVertical gap=\\\"u2\\\">\\n        <Heading as=\\\"h3\\\">24-hour</Heading>\\n        <Space>\\n          <InputTimeSelect format=\\\"24h\\\" value={value} onChange={setValue} />\\n          <Text color=\\\"text2\\\">{value}</Text>\\n        </Space>\\n      </SpaceVertical>\\n    </Grid>\\n  )\\n}\\n\")), mdx(\"h1\", null, \"Controlled Component\"), mdx(\"p\", null, \"Consistent with all other inputs, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputTimeSelect\"), \" accepts \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" props for use in a controlled form setting.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"value\"), \" accepts a 24-hour formatted time string (e.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"15:45\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onChange\"), \" returns a 24-hour time string\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [value, setValue] = useState('14:00')\\n  return (\\n    <Space>\\n      <InputTimeSelect value={value} onChange={setValue} />\\n      <Text color=\\\"text2\\\">{value}</Text>\\n    </Space>\\n  )\\n}\\n\")), mdx(\"h1\", null, \"DefaultValue\"), mdx(\"p\", null, \"If you don't want to control the form value externally, but still want to listen for changes, you can still pass in an initial \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultValue\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  return (\\n    <Flex>\\n      <InputTimeSelect defaultValue=\\\"15:45\\\" />\\n    </Flex>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components-date/src/InputTimeSelect/InputTimeSelect.tsx","status":null,"storybook":null,"storybookPath":null,"title":"InputTimeSelect"}}},"pageContext":{"id":"c15d4339-b61e-5d5b-a1d5-32996d95f0cc"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}