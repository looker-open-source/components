{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/date/input-date/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"1e43739f-5202-53a6-8805-9a7bebea81d2","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"InputDate\",\n  \"github\": \"components-date/src/InputDate/InputDate.tsx\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(ImportMessage, {\n    packageName: \"components-date\",\n    mdxType: \"ImportMessage\"\n  }, \"InputDate\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDate\"), \" provides a text input and calendar to select a single date, which can be used as a form input or filter.\"), mdx(\"h2\", null, \"Value & Default Value\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDate\"), \" can be initialized with a default selected date.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<InputDate value={new Date('February 3, 2009')} />\\n<InputDate defaultValue={new Date('June 3, 2019')} />\\n\")), mdx(\"h2\", null, \"Change Event\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDate\"), \" accepts a single event callback: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \". The handler will receive a javascript \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Date\"), \" object.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [selectedDate, setSelectedDate] = useState(new Date())\\n  const handleChange = date => {\\n    setSelectedDate(date)\\n  }\\n  return (\\n    <Space gap=\\\"u10\\\">\\n      <InputDate onChange={handleChange} defaultValue={selectedDate} />\\n      <Box2 p=\\\"u5\\\" height=\\\"100%\\\" borderLeft>\\n        <Heading>Selected:</Heading>\\n        <Text color=\\\"text2\\\">\\n          <DateFormat>{selectedDate}</DateFormat>\\n        </Text>\\n      </Box2>\\n    </Space>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Date Validation\"), mdx(\"h3\", null, \"validationType\"), mdx(\"p\", null, \"If you handle form validation externally (such as treating this date field as required), \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDate\"), \" accepts the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validationType\"), \" prop to render an error state.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<InputDate validationType=\\\"error\\\" />\\n\")), mdx(\"h3\", null, \"onValidationFail\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDate\"), \" has built-in validation to verify that users enter a valid date string when manually typing into the provided textarea. If you wish to build into this validation, you can pass an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onValidationFail\"), \" callback which will fire on blur if the text value does not match expected localized format.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [isValid, setIsValid] = useState(true)\\n  const handleChange = () => setIsValid(true)\\n  const handleValidationFail = () => setIsValid(false)\\n\\n  const message = isValid ? 'Valid Input' : 'Invalid Input'\\n  const color = isValid ? undefined : 'critical'\\n\\n  return (\\n    <Space gap=\\\"u15\\\">\\n      <InputDate\\n        onChange={handleChange}\\n        onValidationFail={handleValidationFail}\\n      />\\n      <SpaceVertical>\\n        <Paragraph color=\\\"text2\\\">\\n          INSTRUCTIONS: Try typing an invalid date string (ex:\\n          'not/a/valid/date') and clicking or tabbing away to trigger blur\\n          event.\\n        </Paragraph>\\n        <Heading>Result:</Heading>\\n        <Text color={color}>{message}</Text>\\n      </SpaceVertical>\\n    </Space>\\n  )\\n}\\n\")), mdx(\"h3\", null, \"selectMonth\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"selectMonth\"), \" prop turns the month and year in the title of the calendar into dropdowns.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<InputDate selectMonth />\\n\")), mdx(\"h2\", null, \"I18n\"), mdx(\"p\", null, \"See \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"locale\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"firstDayOfWeek\"), \" props on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"calendar\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Calendar\")), \" component.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components-date/src/InputDate/InputDate.tsx","status":null,"storybook":true,"storybookPath":null,"title":"InputDate"}}},"pageContext":{"id":"1e43739f-5202-53a6-8805-9a7bebea81d2"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}