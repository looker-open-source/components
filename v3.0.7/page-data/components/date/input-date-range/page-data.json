{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/date/input-date-range/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"5c9acf76-83a2-52fc-81ef-890d81c94c31","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"InputDateRange\",\n  \"github\": \"components-date/src/InputDateRange/InputDateRange.tsx\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(ImportMessage, {\n    packageName: \"components-date\",\n    mdxType: \"ImportMessage\"\n  }, \"InputDateRange\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDateRange\"), \" provides an interface to select to a date range, either through the calendar interface or text input boxes.\"), mdx(\"h2\", null, \"Value\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDateRange\"), \" can receive a value from an outside source and will update accordingly.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [value, setValue] = useState()\\n  const handleButtonClick = () => {\\n    setValue({ from: new Date('Feb 1, 2020'), to: new Date('Feb 29, 2020') })\\n  }\\n  const handleChange = dateRange => {\\n    setValue(dateRange)\\n  }\\n  return (\\n    <>\\n      <Box2 mb=\\\"u4\\\">\\n        <Button onClick={handleButtonClick}>Select February 2020</Button>\\n      </Box2>\\n      <InputDateRange value={value} onChange={handleChange} />\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Default Value\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDateRange\"), \" can be initialized with a default selected date range, for use in uncontrolled form.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<InputDateRange\\n  defaultValue={{\\n    from: new Date('June 3, 2019'),\\n    to: new Date('June 8, 2019'),\\n  }}\\n/>\\n\")), mdx(\"h2\", null, \"Change Event\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDateRange\"), \" accepts a single event callback: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \". The handler will receive a date range object.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [selectedDate, setSelectedDate] = useState({\\n    from: new Date(),\\n    to: new Date(),\\n  })\\n  const handleChange = dateRange => {\\n    setSelectedDate(dateRange)\\n  }\\n  return (\\n    <>\\n      <Box2 mb=\\\"u4\\\" pb=\\\"u3\\\" borderBottom>\\n        <Heading>Selected:</Heading>{' '}\\n        <Text color=\\\"text2\\\">\\n          <DateFormat>{selectedDate.from}</DateFormat> &mdash;\\n          <DateFormat>{selectedDate.to}</DateFormat>\\n        </Text>\\n      </Box2>\\n      <InputDateRange onChange={handleChange} defaultValue={selectedDate} />\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"onValidationFail\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDateRange\"), \" has built-in validation to verify that users enter a valid date string when manually typing into the provided textarea. If you wish to hook into this validation, you can pass an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onValidationFail\"), \" callback which will fire on blur if the text value does not match expected localized format.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [isValid, setIsValid] = useState(true)\\n  const handleChange = () => setIsValid(true)\\n  const handleValidationFail = () => setIsValid(false)\\n\\n  const message = isValid ? 'Valid Input' : 'Invalid Input'\\n  const color = isValid ? undefined : 'critical'\\n\\n  return (\\n    <SpaceVertical>\\n      <Text color=\\\"text2\\\">\\n        INSTRUCTIONS: Try typing an invalid date string (ex: 'not/a/valid/date')\\n        and clicking or tabbing away to trigger blur event.\\n      </Text>\\n      <Heading>Result:</Heading>\\n      <Text color={color}>{message}</Text>\\n      <Divider />\\n      <InputDateRange\\n        onChange={handleChange}\\n        onValidationFail={handleValidationFail}\\n      />\\n    </SpaceVertical>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"I18n\"), mdx(\"p\", null, \"See \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"locale\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"firstDayOfWeek\"), \" props on the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"calendar\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Calendar\")), \" component.\"), mdx(\"h2\", null, \"Composing InputDateRange in a Popover\"), mdx(\"p\", null, \"A common UI pattern is to combine \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputDateRange\"), \" with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/v3.0.7/components/overlays/popover\"\n  }, \"Popover\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/v3.0.7/components/actions/button\"\n  }, \"Button\"), \", and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/v3.0.7/components/content/date-time-format\"\n  }, \"DateFormat\"), \". This enables the full calendar functionality without having to take up so much space on the page.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [selectedDateRange, setSelectedDateRange] = useState({\\n    from: new Date(),\\n    to: new Date(),\\n  })\\n  return (\\n    <Popover\\n      content={\\n        <Box2 p=\\\"u3\\\">\\n          <InputDateRange\\n            defaultValue={selectedDateRange}\\n            onChange={setSelectedDateRange}\\n          />\\n        </Box2>\\n      }\\n    >\\n      <Button>\\n        <DateFormat>{selectedDateRange.from}</DateFormat> &mdash;\\n        <DateFormat>{selectedDateRange.to}</DateFormat>\\n      </Button>\\n    </Popover>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components-date/src/InputDateRange/InputDateRange.tsx","status":null,"storybook":true,"storybookPath":null,"title":"InputDateRange"}}},"pageContext":{"id":"5c9acf76-83a2-52fc-81ef-890d81c94c31"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}