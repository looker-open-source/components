{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/content/list/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"3c23181d-d663-5ea7-b66f-183fa509d0f2","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"List\",\n  \"storybook\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar ListItemPropTable = makeShortcode(\"ListItemPropTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List\"), \", along with its companion component \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ListItem\"), \", renders a list of items. However, unlike standard \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ul\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"li\"), \" elements, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ListItem\"), \" come prebuilt with a number of props to simplify item style and behavior customization.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<List>\\n  <ListItem icon={<DateRange />} description=\\\"Orange-y\\\" detail=\\\"England\\\">\\n    Cheddar\\n  </ListItem>\\n  <ListItem icon={<Pivot />} detail=\\\"Netherlands\\\">\\n    Gouda\\n  </ListItem>\\n  <ListItem icon={<AnalyticsApp />} detail=\\\"Italy\\\">\\n    Mozzarella\\n  </ListItem>\\n  <ListItem icon={<LogoRings />} detail=\\\"Switzerland\\\">\\n    Swiss\\n  </ListItem>\\n</List>\\n\")), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fontFamily\"), \" prop to change the font on all text elements in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<List fontFamily=\\\"code\\\">\\n  <ListItem icon={<DateRange />} description=\\\"Orange-y\\\" detail=\\\"England\\\">\\n    Cheddar\\n  </ListItem>\\n  <ListItem icon={<Pivot />} detail=\\\"Netherlands\\\">\\n    Gouda\\n  </ListItem>\\n  <ListItem icon={<AnalyticsApp />} detail=\\\"Italy\\\">\\n    Mozzarella\\n  </ListItem>\\n  <ListItem icon={<LogoRings />} detail=\\\"Switzerland\\\">\\n    Swiss\\n  </ListItem>\\n</List>\\n\")), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"density\"), \" prop to set the size and spacing of your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List\"), \". As \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"density\"), \" decreases, so does the height and spacing of your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List\"), \"'s child \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ListItem\"), \"s.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"density\"), \" values range from -3 to 1.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [density, setDensity] = useState(0)\\n  return (\\n    <>\\n      {`Density: ${density}`}\\n      <Space gap=\\\"u3\\\" mt=\\\"u3\\\">\\n        <Button onClick={() => density !== 1 && setDensity(density + 1)}>\\n          + Density\\n        </Button>\\n        <Button onClick={() => density !== -3 && setDensity(density - 1)}>\\n          - Density\\n        </Button>\\n      </Space>\\n      <Divider />\\n      <List density={density}>\\n        <ListItem icon={<DateRange />}>Item 1</ListItem>\\n        <ListItem icon={<DateRange />}>Item 2</ListItem>\\n        <ListItem icon={<DateRange />}>Item 3</ListItem>\\n      </List>\\n    </>\\n  )\\n}\\n\")), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"iconGutter\"), \" prop if you want \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ListItem\"), \" children without icons to align their text with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ListItem\"), \" children with icons.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<>\\n  <List>\\n    <ListItem icon={<DateRange />}>Item 1</ListItem>\\n    <ListItem>Item 2</ListItem>\\n    <ListItem>Item 3</ListItem>\\n  </List>\\n  <Divider />\\n  <List iconGutter>\\n    <ListItem icon={<DateRange />}>Item 1</ListItem>\\n    <ListItem>Item 2</ListItem>\\n    <ListItem>Item 3</ListItem>\\n  </List>\\n</>\\n\")), mdx(\"h2\", null, \"ListItem\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ListItem\"), \" renders an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"li\"), \" element and should be the child of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List\"), \" element.\"), mdx(\"p\", null, \"The table below displays \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ListItem\"), \"'s prop names and descriptions.\"), mdx(ListItemPropTable, {\n    mdxType: \"ListItemPropTable\"\n  }), mdx(\"p\", null, \"Note: In addition these custom props, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ListItem\"), \" also accepts standard handlers like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onKeyDown\"), \", etc.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<ListItem\\n  icon={<DateRange />}\\n  description=\\\"An Island\\\"\\n  detail=\\\"England\\\"\\n  onClick={() => alert('Get that Cheddar')}\\n>\\n  Cheddar\\n</ListItem>\\n\")), mdx(\"h2\", null, \"Customizing a ListItem detail\"), mdx(\"p\", null, \"You can customize the look and behavior of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detail\"), \" elements by providing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detail\"), \" prop an object with an \\\"options\\\" property.\"), mdx(\"p\", null, \"Enabling the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hoverDisclosure\"), \" option will hide and show the detail on hover on and hover off.\"), mdx(\"p\", null, \"Enabling the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"accessory\"), \" option will render the detail element outside of the label container. This option is most commonly used when you'd like to have a button as your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detail\"), \" element.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<List>\\n  <ListItem\\n    icon={<Tag />}\\n    detail={\\n      <IconButton\\n        icon={<Pivot />}\\n        label={<Pivot />}\\n        onClick={() => alert(\\\"You've pivoted!\\\")}\\n      />\\n    }\\n    itemRole=\\\"none\\\"\\n  >\\n    ListItem (Standard)\\n  </ListItem>\\n  <ListItem\\n    icon={<Tag />}\\n    detail={{\\n      content: (\\n        <IconButton\\n          icon={<Pivot />}\\n          label={<Pivot />}\\n          onClick={() => alert(\\\"You've pivoted!\\\")}\\n        />\\n      ),\\n      options: {\\n        accessory: true,\\n        hoverDisclosure: true,\\n      },\\n    }}\\n  >\\n    ListItem (Options Enabled)\\n  </ListItem>\\n</List>\\n\")), mdx(\"h2\", null, \"Windowing\"), mdx(\"p\", null, \"If a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List\"), \" contains more than 100 children it will use windowing to display\\nonly the visible items for performance reasons. Windowing uses the item height to calculate\\npositioning for natural scrolling behavior.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" A parent element of your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List\"), \" should have an explicit height. If no explicit height is set, your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List\"), \" will attempt to render all child items and not utilize the windowing logic.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":null,"status":null,"storybook":true,"storybookPath":null,"title":"List"}}},"pageContext":{"id":"3c23181d-d663-5ea7-b66f-183fa509d0f2"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}