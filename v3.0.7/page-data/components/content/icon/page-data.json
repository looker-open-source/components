{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/content/icon/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"e31201bb-72af-5f05-829c-b55357067730","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Icon\",\n  \"storybook\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar IconList = makeShortcode(\"IconList\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Icon />\"), \" component uses the property \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"icon\"), \" to display the correct icon.\"), mdx(\"p\", null, \"Icon is expected be a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ReactNode\"), \" element (most likely an SVG).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space around>\\n  <Icon icon={<Done />} />\\n  <Icon icon={<Favorite />} size=\\\"large\\\" />\\n  <Icon icon={<Settings />} size=\\\"small\\\" />\\n</Space>\\n\")), mdx(\"h2\", null, \"Color\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"), \" defaults to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"currentColor\"), \" - that is, the text color of the component they are embedded within. However the developer can explicitly specify color as a prop.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space around>\\n  <Icon icon={<Delete />} color=\\\"inform\\\" />\\n  <Flex alignItems=\\\"center\\\" color=\\\"critical\\\" bg=\\\"criticalSubtle\\\" p=\\\"u5\\\">\\n    <Icon icon={<Delete />} display=\\\"inline-flex\\\" />\\n    Text color is red so the Icon is as well\\n  </Flex>\\n</Space>\\n\")), mdx(\"h2\", null, \"Size\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" can be specified by using the size prop. By default the size will be medium.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space around>\\n  <Icon icon={<Beaker />} color=\\\"inform\\\" size=\\\"xxsmall\\\" />\\n  <Icon icon={<Beaker />} color=\\\"inform\\\" size=\\\"xsmall\\\" />\\n  <Icon icon={<Beaker />} color=\\\"inform\\\" size=\\\"small\\\" />\\n  <Icon icon={<Beaker />} color=\\\"inform\\\" size=\\\"medium\\\" />\\n  <Icon icon={<Beaker />} color=\\\"inform\\\" size=\\\"large\\\" />\\n</Space>\\n\")), mdx(\"h2\", null, \"Accessibility\"), mdx(\"p\", null, \"When using an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Icon\"), \" we strongly encourage specification of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"title\"), \" attribute. If an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Icon\"), \" is used without an explicitly specified \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"title\"), \" attribute \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-hidden=\\\"true\\\"\"), \" will be added to hide the icon from screen readers. The assumption will be made that other efforts have been made to give the user context.\"), mdx(\"h1\", null, \"Material Design Icons\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://styled-icons.js.org/\"\n  }, \"Styled Icons\"), \" has a massive suite of prebuilt icons for an array of icon libraries including the Material Design collection. Within suite of components we often leverage \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@styled-icons/material\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@styled-icons/material-outlined\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@styled-icons/material-rounded\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }, \"import { Add } from '@styled-icons/material/Add'\\nimport { Add } from '@styled-icons/material-outlined/Add'\\nimport { Add } from '@styled-icons/material-rounded/Add'\\n\")), mdx(\"h1\", null, \"@looker/icons Library\"), mdx(\"p\", null, \"The Looker Components team ships a small suite of Looker-specific icons via a NPM package - \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@looker/icons\"), \". Below you can see a complete list of the icons we ship in our package. To use one simply add the package to your project and import the apppriate icon:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }, \"import { Pivot } from './icons'\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Tip:\"), \" you can click an icon below to copy it to your clipboard.\"), mdx(IconList, {\n    mdxType: \"IconList\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":null,"status":null,"storybook":true,"storybookPath":null,"title":"Icon"}}},"pageContext":{"id":"e31201bb-72af-5f05-829c-b55357067730"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}