{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/content/progress-circular/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"37db1763-a73a-5dec-95b7-02da05881cc7","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"ProgressCircular\",\n  \"storybook\": true,\n  \"status\": \"experimental\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ProgressCircular\"), \" helps express an unspecified wait time or displays the length of a process\"), mdx(\"h2\", null, \"Showing a generic loading state\"), mdx(\"p\", null, \"To show a generic loading state or process, use the default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ProgressCircular\"), \" behavior.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space justifyContent=\\\"center\\\">\\n  <ProgressCircular />\\n</Space>\\n\")), mdx(\"h2\", null, \"Rendering defined async progress\"), mdx(\"p\", null, \"If the process has known steps to completion, you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"progress\"), \" prop to indicate a more precise loading state. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"progress\"), \" prop accepts a number from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1\"), \", where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \" is 0% complete and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1\"), \" is 100% complete.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const options = [\\n    { value: '0', label: '0%' },\\n    { value: '.25', label: '25%' },\\n    { value: '.50', label: '50%' },\\n    { value: '.75', label: '75%' },\\n    { value: '1', label: '100%' },\\n  ]\\n\\n  const [progress, setProgress] = useState(options[2].value)\\n\\n  return (\\n    <SpaceVertical>\\n      <ProgressCircular progress={progress} />\\n      <Space>\\n        <ButtonToggle\\n          value={progress}\\n          options={options}\\n          onChange={setProgress}\\n        />\\n      </Space>\\n    </SpaceVertical>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Size\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ProgressCircular\"), \" is available in four sizes, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xsmall\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"small\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"medium\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"large\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space justifyContent=\\\"center\\\">\\n  <ProgressCircular size=\\\"xsmall\\\" />\\n  <ProgressCircular size=\\\"small\\\" />\\n  <ProgressCircular size=\\\"medium\\\" />\\n  <ProgressCircular />\\n</Space>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":null,"status":"experimental","storybook":true,"storybookPath":null,"title":"ProgressCircular"}}},"pageContext":{"id":"37db1763-a73a-5dec-95b7-02da05881cc7"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}