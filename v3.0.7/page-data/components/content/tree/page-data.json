{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/content/tree/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"e76a65dd-50b4-5f6e-8e92-a4d926a34e56","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tree\",\n  \"storybook\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar ListItemPropTable = makeShortcode(\"ListItemPropTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \", like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Accordion\"), \", is a collapsible section component designed for hiding and showing content. However, unlike \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Accordion\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" has a more structured interface and is best used when building tree views like a file structure or a sidebar.\"), mdx(\"p\", null, \"Use the required \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"label\"), \" prop to set the text of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" disclosure. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"label\"), \" alternatively accepts a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ReactNode\"), \" for more advanced layouts.\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"icon\"), \" prop to display an icon next to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" label.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<TreeCollection>\\n  <Tree label=\\\"Orders\\\" icon={<TableChart />}>\\n    <TreeItem icon={<Tag />}>Cost</TreeItem>\\n    <TreeItem icon={<Place />}>Location</TreeItem>\\n    <TreeItem icon={<FieldTier />}>Tier</TreeItem>\\n    <TreeItem icon={<Check />}>Oui ou Non</TreeItem>\\n  </Tree>\\n</TreeCollection>\\n\")), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detail\"), \" to display an element in the negative space of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" label.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<TreeCollection>\\n  <Tree\\n    label=\\\"Orders\\\"\\n    icon={<TableChart />}\\n    detail={\\n      <IconButton\\n        icon={<Info />}\\n        label=\\\"Get Info\\\"\\n        onClick={() => alert(\\\"You've got info!\\\")}\\n      />\\n    }\\n  >\\n    <TreeItem icon={<Tag />}>Cost</TreeItem>\\n  </Tree>\\n</TreeCollection>\\n\")), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"border\"), \" prop if you would like to have vertical lines expand from your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \"'s indicator icon when open.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<TreeCollection>\\n  <Tree border label=\\\"Orders\\\" icon={<TableChart />} defaultOpen>\\n    <Tree label=\\\"Created\\\" defaultOpen>\\n      <TreeItem>Created Date</TreeItem>\\n      <TreeItem>Created Month</TreeItem>\\n      <TreeItem>Created Year</TreeItem>\\n      <TreeItem>Created Quarter</TreeItem>\\n    </Tree>\\n  </Tree>\\n</TreeCollection>\\n\")), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"selected\"), \" prop to display a light grey background on your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \".\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color='key'\"), \" prop to get more colorful backgrounds when your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" (or its child \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \"s and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeItem\"), \"s) is hovered or selected.\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disabled\"), \" prop to present your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" in a disabled state. Note that using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disabled\"), \" will not change any \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" behavior like opening and closing on click.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<TreeCollection>\\n  <Tree selected label=\\\"Orders\\\" icon={<TableChart />} defaultOpen>\\n    <Tree disabled label=\\\"Created\\\" defaultOpen>\\n      <TreeItem selected>Created Date</TreeItem>\\n      <TreeItem disabled>Created Month</TreeItem>\\n      <TreeItem>Created Year</TreeItem>\\n      <TreeItem>Created Quarter</TreeItem>\\n    </Tree>\\n  </Tree>\\n  <Tree color=\\\"key\\\" selected label=\\\"Orders\\\" icon={<TableChart />} defaultOpen>\\n    <Tree disabled label=\\\"Created\\\" defaultOpen>\\n      <TreeItem selected>Created Date</TreeItem>\\n      <TreeItem disabled>Created Month</TreeItem>\\n      <TreeItem>Created Year</TreeItem>\\n      <TreeItem>Created Quarter</TreeItem>\\n    </Tree>\\n  </Tree>\\n</TreeCollection>\\n\")), mdx(\"h2\", null, \"Truncating Tree Items & Labels\"), mdx(\"p\", null, \"Occasionally tree item labels will wrap to a second line when the text content is very long, or the available space is very narrow. The text content will wrap by default, but if that is undesirable you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"truncate\"), \" prop to limit text content to a single line.\"), mdx(\"p\", null, \"When text content overflows, it will render a tooltip to view the entire content, which is consistent with the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/v3.0.7/components/text/truncate\"\n  }, \"Truncate\"), \" component.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<>\\n  <Heading>Default Text Wrapping Layout</Heading>\\n  <TreeCollection>\\n    <Tree\\n      border\\n      label=\\\"A very long label that wraps to a second line. Both the label and the tree item will wrap to two or more lines because there is just too much text.\\\"\\n      icon={<TableChart />}\\n      defaultOpen\\n    >\\n      <TreeItem icon={<IdeDimension />}>\\n        Cheese is a dairy product, derived from milk and produced in wide ranges\\n        of flavours, textures and forms by coagulation of the milk protein\\n        casein. It comprises proteins and fat from milk, usually the milk of\\n        cows, buffalo, goats, or sheep.\\n      </TreeItem>\\n    </Tree>\\n  </TreeCollection>\\n</>\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<>\\n  <Heading>Truncated Text</Heading>\\n  <TreeCollection>\\n    <Tree\\n      border\\n      label=\\\"A very label that wraps to a second line. Sometimes you don't want to take up extra vertical space, and instead it will cut off the text.\\\"\\n      truncate\\n      icon={<TableChart />}\\n      defaultOpen\\n    >\\n      <TreeItem icon={<IdeDimension />} truncate>\\n        Hover over me for a tooltip of the full content. Cheese is a dairy\\n        product, derived from milk and produced in wide ranges of flavours,\\n        textures and forms by coagulation of the milk protein casein. It\\n        comprises proteins and fat from milk, usually the milk of cows, buffalo,\\n        goats, or sheep.\\n      </TreeItem>\\n    </Tree>\\n  </TreeCollection>\\n</>\\n\")), mdx(\"h2\", null, \"Nesting Trees\"), mdx(\"p\", null, \"You can nest trees within each other by passing a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" in as a child of another \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" will automatically indent any child \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeItem\"), \"s based on their depth in the hierarchy.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<TreeCollection>\\n  <Tree defaultOpen label=\\\"Orders\\\" icon={<TableChart />}>\\n    <Tree defaultOpen label=\\\"Created\\\">\\n      <TreeItem>Created Date</TreeItem>\\n      <TreeItem>Created Month</TreeItem>\\n      <TreeItem>Created Year</TreeItem>\\n      <TreeItem>Created Quarter</TreeItem>\\n    </Tree>\\n  </Tree>\\n</TreeCollection>\\n\")), mdx(\"h2\", null, \"Tree Callbacks\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onOpen\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClose\"), \" props if you would like to trigger callbacks on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" open or close, respectively.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Tree\\n  onOpen={() => alert('Open!')}\\n  onClose={() => alert('Close!')}\\n  label=\\\"Cheese\\\"\\n  icon={<TableChart />}\\n>\\n  <TreeItem>Gouda</TreeItem>\\n</Tree>\\n\")), mdx(\"h2\", null, \"Controlling a Tree\"), mdx(\"p\", null, \"Like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Accordion\"), \", a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" can be either uncontrolled or controlled.\"), mdx(\"p\", null, \"By default, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" is an uncontrolled component and maintains its own opened/closed state. If you are using an uncontrolled \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" and want it initially open, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"defaultOpen\"), \" prop.\"), mdx(\"p\", null, \"However, you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isOpen\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggleOpen\"), \" props to explicitly control the state of your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \".\"), mdx(\"p\", null, \"When the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isOpen\"), \" prop receives \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \", your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" will reveal its content. When \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \", your content will be hidden.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggleOpen\"), \" prop should receive a function that has one parameter: a boolean. When the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \"'s disclosure is clicked, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggleOpen\"), \" callback will be triggered and passed the opposite boolean of the current \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isOpen\"), \" prop value.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [isOpen, setIsOpen] = useState(true)\\n\\n  return (\\n    <TreeCollection>\\n      <Tree\\n        label=\\\"Orders\\\"\\n        icon={<TableChart />}\\n        isOpen={isOpen}\\n        toggleOpen={setIsOpen}\\n      >\\n        <TreeItem icon={<Tag />}>Cost</TreeItem>\\n        <TreeItem icon={<Place />}>Location</TreeItem>\\n        <TreeItem icon={<FieldTier />}>Tier</TreeItem>\\n        <TreeItem icon={<Check />}>Oui ou Non</TreeItem>\\n      </Tree>\\n    </TreeCollection>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"TreeCollection\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeCollection\"), \" acts as a wrapper component to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeItem\"), \" elements. For accessibility purposes, all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tree\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeItem\"), \" compositions should have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeCollection\"), \" as the top-level element.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<TreeCollection>\\n  <Tree label=\\\"Cheeses\\\" icon={<Pivot />} defaultOpen>\\n    <TreeItem>Gouda</TreeItem>\\n    <TreeItem>Swiss</TreeItem>\\n    <TreeItem>Cheddar</TreeItem>\\n  </Tree>\\n</TreeCollection>\\n\")), mdx(\"h2\", null, \"TreeItem\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeItem\"), \" is used to create branches in a tree view; it is best used as the direct child of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Tree>\"), \".\"), mdx(\"p\", null, \"The table below displays \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeItem\"), \"'s prop names and descriptions.\"), mdx(ListItemPropTable, {\n    mdxType: \"ListItemPropTable\"\n  }), mdx(\"p\", null, \"Note: In addition these custom props, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeItem\"), \" also accepts standard handlers like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClick\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onKeyDown\"), \", etc.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<TreeCollection>\\n  <Tree label=\\\"Cheeses\\\" defaultOpen>\\n    <TreeItem\\n      icon={<LogoRings />}\\n      detail={<Text color=\\\"text2\\\">is great</Text>}\\n      onClick={() => alert('Clicked Swiss')}\\n      selected\\n    >\\n      Swiss\\n    </TreeItem>\\n  </Tree>\\n</TreeCollection>\\n\")), mdx(\"h2\", null, \"Customizing Detail Elements on Tree and TreeItem\"), mdx(\"p\", null, \"You can customize the look and behavior of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detail\"), \" elements by providing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detail\"), \" prop an object with an \\\"options\\\" property.\"), mdx(\"p\", null, \"Enabling the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hoverDisclosure\"), \" option will hide and show the detail on hover on and hover off.\"), mdx(\"p\", null, \"Enabling the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"accessory\"), \" option will render the detail element outside of the label container. This option is most commonly used when you'd like to have a button as your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"detail\"), \" element.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<TreeCollection>\\n  <Tree\\n    label=\\\"Orders\\\"\\n    icon={<TableChart />}\\n    defaultOpen\\n    detail={{\\n      content: (\\n        <IconButton\\n          icon={<Info />}\\n          label=\\\"Get Info\\\"\\n          onClick={() => alert(\\\"You've got info!\\\")}\\n        />\\n      ),\\n      options: {\\n        accessory: true,\\n        hoverDisclosure: true,\\n      },\\n    }}\\n  >\\n    <TreeItem\\n      icon={<Tag />}\\n      detail={{\\n        content: (\\n          <IconButton\\n            icon={<Pivot />}\\n            label={<Pivot />}\\n            onClick={() => alert(\\\"You've pivoted!\\\")}\\n          />\\n        ),\\n        options: {\\n          accessory: true,\\n          hoverDisclosure: true,\\n        },\\n      }}\\n    >\\n      Cost\\n    </TreeItem>\\n  </Tree>\\n</TreeCollection>\\n\")), mdx(\"h2\", null, \"Windowing\"), mdx(\"p\", null, \"If a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TreeCollection\"), \" contains more than 100 visible descendants (trees, items, and nested trees) at a given time, performance will begin to degrade.\\nUse \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WindowedTreeCollection\"), \" instead, with the following differences:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"trees\"), \" prop replaces \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"children\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"trees\"), \" accepts an array of nestable objects where:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"content\"), \" is a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Tree>\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<TreeItem>\"), \", or other JSX element that renders either\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"items\"), \" are any nested tree/items (replaces \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Tree\"), \" children)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isOpen\"), \" (optional) controls the state of each tree, rather than the\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"isOpen\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"defaultOpen\"), \" props on the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Tree\"), \" component itself\")))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WindowedTreeCollection\"), \" should be rendered inside an element with a specified height\\nor add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"height\"), \" prop to the component directly.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const { value, toggle } = useToggle()\\n\\n  const trees = React.useMemo(\\n    () =>\\n      Array.from(Array(200), (_, treeIndex) => ({\\n        content: <Tree label={`Tree ${treeIndex}`} />,\\n        isOpen: value,\\n        items: Array.from(Array(10), (_, itemIndex) => {\\n          if (itemIndex === 2) {\\n            return {\\n              content: <Tree label={`Nested Tree ${treeIndex}-${itemIndex}`} />,\\n              isOpen: value,\\n              items: Array.from(Array(4), (_, nestedItemIdex) => ({\\n                content: (\\n                  <TreeItem>\\n                    Nested TreeItem {treeIndex}-{itemIndex}-{nestedItemIdex}\\n                  </TreeItem>\\n                ),\\n              })),\\n            }\\n          }\\n          return {\\n            content: (\\n              <TreeItem>\\n                TreeItem {treeIndex}-{itemIndex}\\n              </TreeItem>\\n            ),\\n          }\\n        }),\\n      })),\\n    [value]\\n  )\\n  return (\\n    <SpaceVertical>\\n      <Button onClick={toggle}>Toggle all {value ? 'closed' : 'open'}</Button>\\n      <WindowedTreeCollection height={300} width={500} trees={trees} />\\n    </SpaceVertical>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":null,"status":null,"storybook":true,"storybookPath":null,"title":"Tree"}}},"pageContext":{"id":"e76a65dd-50b4-5f6e-8e92-a4d926a34e56"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}