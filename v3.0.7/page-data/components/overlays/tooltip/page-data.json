{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/overlays/tooltip/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"ff6ac5bb-29ff-58ca-9ab2-9877ba9e9c1f","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tooltip\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A simple Tooltip component with out of the box styles and behavior.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Tooltip content=\\\"More things you should know...\\\">\\n  <Button>Hover for Tooltip</Button>\\n</Tooltip>\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Tooltip\\n  width=\\\"20rem\\\"\\n  placement=\\\"right\\\"\\n  textAlign=\\\"left\\\"\\n  content={\\n    <>\\n      This is a tooltip with quite a bit of text. It's probably not ideal to\\n      have this much text in a Tooltip. Perhaps you should link to\\n      <Link href=\\\"#\\\">another document &rarr;</Link>\\n    </>\\n  }\\n>\\n  <ButtonOutline>Tooltip with lots of text</ButtonOutline>\\n</Tooltip>\\n\")), mdx(\"h2\", null, \"Tooltip Placement\"), mdx(\"p\", null, \"Tooltip allows you to specify where it should appear in relation to the target element. It accepts the following values:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"auto\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"auto-end\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"top-start\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"top\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"top-end\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"right-start\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"right\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"right-end\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"bottom-end\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"bottom\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"bottom-start\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"left-end\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"left\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"left-start\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space around>\\n  <Tooltip content=\\\"I'm on top\\\" placement=\\\"top\\\">\\n    <Button>Top</Button>\\n  </Tooltip>\\n  <Tooltip content=\\\"I'm on bottom\\\" placement=\\\"bottom\\\">\\n    <Button>Bottom</Button>\\n  </Tooltip>\\n  <Tooltip content=\\\"I'm on the left\\\" placement=\\\"left\\\">\\n    <Button>Left</Button>\\n  </Tooltip>\\n  <Tooltip content=\\\"I'm on the right\\\" placement=\\\"right\\\">\\n    <Button>Right</Button>\\n  </Tooltip>\\n</Space>\\n\")), mdx(\"h2\", null, \"Delay\"), mdx(\"p\", null, \"By default, the tooltip will show a brief delay. To customize this, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"delay\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Tooltip content=\\\"This tooltip shows immediately\\\" delay=\\\"none\\\">\\n  <Button>No Delay</Button>\\n</Tooltip>\\n\")), mdx(\"h2\", null, \"\\\"Render Prop\\\" style\"), mdx(\"p\", null, \"Sometimes you may need to control how \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tooltip\"), \" applies handlers to the component within it. If so you can use the render prop form of the component:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Tooltip content=\\\"Example using render props\\\">\\n  {props => <Button {...props}>Render Props Example</Button>}\\n</Tooltip>\\n\")), mdx(\"p\", null, \"If you need to be very specific\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Tooltip content=\\\"Example using render props exploded\\\">\\n  {props => (\\n    <Button\\n      aria-describedby={props['aria-describedby']}\\n      className={props.className}\\n      onBlur={props.onBlur}\\n      onFocus={props.onFocus}\\n      onMouseOut={props.onMouseOut}\\n      onMouseOver={props.onMouseOver}\\n      ref={props.ref}\\n    >\\n      Render Props Example\\n    </Button>\\n  )}\\n</Tooltip>\\n\")), mdx(\"h2\", null, \"Tooltip passes a \\\"hover\\\" class\"), mdx(\"p\", null, \"In both the regular and \\\"Render Prop\\\" styles, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tooltip\"), \" will pass a class named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hover\"), \" to its child element (or function) when the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tooltip\"), \" is open.\"), mdx(\"p\", null, \"This will preserve any hover styling when the cursor is on the tooltip text and off of the trigger element itself.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":null,"status":null,"storybook":true,"storybookPath":null,"title":"Tooltip"}}},"pageContext":{"id":"ff6ac5bb-29ff-58ca-9ab2-9877ba9e9c1f"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}