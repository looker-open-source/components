{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/overlays/popover/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"d612b8c7-0f10-571c-a05a-d24dc698ddd4","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Popover\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Popovers are containers for things like contextual information, menus, and related actions.\"), mdx(\"h2\", null, \"Terminology\"), mdx(\"p\", null, \"Popovers are assembled of two pieces: an overlay and a surface. Unlike \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/v3.0.7/components/dialogs/\"\n  }, \"Dialogs\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Popover\"), \" overlay is transparent, but it still blocks the application behind it until it is closed, with the exception of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#grouped-popovers\"\n  }, \"grouped Popovers\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Popover\"), \"'s surface renders the content above the overlay and the rest of the application.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Popover\\n  width={640}\\n  content={\\n    <PopoverLayout header=\\\"Wildebeest\\\">\\n      <Text fontSize=\\\"small\\\">\\n        The blue wildebeest, also called the common wildebeest, white-bearded\\n        wildebeest or brindled gnu, is a large antelope and one of the two\\n        species of wildebeest. It is placed in the genus Connochaetes and family\\n        Bovidae and has a close taxonomic relationship with the black\\n        wildebeest. The blue wildebeest is known to have five subspecies. This\\n        broad-shouldered antelope has a muscular, front-heavy appearance, with a\\n        distinctive robust muzzle. Young blue wildebeest are born tawny brown,\\n        and begin to take on their adult colouration at the age of two months.\\n        The adults' hues range from a deep slate or bluish gray to light gray or\\n        even grayish brown. Both sexes possess a pair of large curved horns.\\n      </Text>\\n    </PopoverLayout>\\n  }\\n>\\n  <Button>A Wikipedia article about Wildebeests</Button>\\n</Popover>\\n\")), mdx(\"h2\", null, \"Placement\"), mdx(\"p\", null, \"Placement can be adjusted with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"placement\"), \" prop. Valid positions are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"top\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"left\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"right\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bottom\"), \", each can be augmented with -\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-end\"), \" which places the edge of the popover at the start or end of the target.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const popoverContent = (\\n    <PopoverLayout>\\n      <Paragraph width={300} p=\\\"u10\\\">\\n        \\uD83D\\uDC4B Hello, I am a popover!\\n      </Paragraph>\\n    </PopoverLayout>\\n  )\\n\\n  return (\\n    <SpaceVertical>\\n      <Space between width=\\\"100%\\\">\\n        <Popover content={popoverContent}>\\n          <Button>Default</Button>\\n        </Popover>\\n        <Popover content={popoverContent} placement=\\\"right\\\">\\n          <Button>Right</Button>\\n        </Popover>\\n        <Popover content={popoverContent} placement=\\\"left\\\">\\n          <Button>Left</Button>\\n        </Popover>\\n      </Space>\\n      <Space between width=\\\"100%\\\">\\n        <Popover content={popoverContent} placement=\\\"bottom-start\\\">\\n          <Button>Bottom Start</Button>\\n        </Popover>\\n        <Popover content={popoverContent} placement=\\\"right-end\\\">\\n          <Button>Right End</Button>\\n        </Popover>\\n        <Popover content={popoverContent} placement=\\\"top-start\\\">\\n          <Button>Top Start</Button>\\n        </Popover>\\n      </Space>\\n    </SpaceVertical>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Disclosing the Trigger on Hover\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const hoverRef = React.useRef()\\n  const content = <PopoverLayout>I'm in the popover</PopoverLayout>\\n  return (\\n    <Card ref={hoverRef} raised>\\n      <CardContent>\\n        <Space between>\\n          <Paragraph>\\n            Hovering in this card will show the button that triggers the\\n            popover.\\n          </Paragraph>\\n          <Popover content={content} hoverDisclosureRef={hoverRef}>\\n            <IconButton icon={<MoreVert />} label=\\\"More Options\\\" />\\n          </Popover>\\n        </Space>\\n      </CardContent>\\n    </Card>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"PopoverContent\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PopoverContent\"), \" is a simple container component that can be used to apply a consistent style to content placed within a Popover surface.\"), mdx(\"h2\", null, \"\\\"Render Prop\\\" style\"), mdx(\"p\", null, \"Sometimes you may need to control how \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tooltip\"), \" applies handlers to the component within it. If so you can use the render prop form of the component:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Popover content=\\\"Example using render props exploded\\\">\\n  {props => (\\n    <Button {...props}>\\n      Render Props Example: {props['aria-expanded'] ? 'open' : 'closed'}\\n    </Button>\\n  )}\\n</Popover>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":null,"status":null,"storybook":true,"storybookPath":null,"title":"Popover"}}},"pageContext":{"id":"d612b8c7-0f10-571c-a05a-d24dc698ddd4"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}