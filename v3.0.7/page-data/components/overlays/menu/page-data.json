{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/overlays/menu/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"67dc1c02-833b-5148-a65b-716e63bae008","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Menu\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Menu\"), \" is a specific implementation of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"popover\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Popover\")), \" that accepts an array\\n(or React Fragment) of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"menuitem\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"MenuItem\")), \"s in the content prop.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" The direct child of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Menu\"), \" should be able to accept the following props. TypeScript currently doesn't support the enforcement of this.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onClick\"), \" for toggling the menu\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ref\"), \" for popover placement\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"aria attributes for accessibility\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space>\\n  <Menu\\n    content={\\n      <>\\n        <MenuItem icon={<Favorite />}>Gouda</MenuItem>\\n        <MenuItem icon={<Favorite />}>Swiss</MenuItem>\\n      </>\\n    }\\n  >\\n    <Button>Cheese</Button>\\n  </Menu>\\n\\n  <Menu\\n    disabled\\n    content={\\n      <>\\n        <MenuItem icon={<Favorite />}>Gouda</MenuItem>\\n        <MenuItem icon={<Favorite />}>Swiss</MenuItem>\\n      </>\\n    }\\n  >\\n    <Button disabled>Disabled Cheese</Button>\\n  </Menu>\\n</Space>\\n\")), mdx(\"h2\", null, \"Density\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"density\"), \" prop to set the size and spacing of your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Menu\"), \". As \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"density\"), \" decreases, so does the height and spacing of child \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuItem\"), \"s.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"density\"), \" values range from -3 to 1.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space>\\n  <Menu\\n    density={1}\\n    content={\\n      <>\\n        <MenuItem icon={<Favorite />}>Gouda</MenuItem>\\n        <MenuItem icon={<Favorite />}>Swiss</MenuItem>\\n      </>\\n    }\\n  >\\n    <Button>Big Items</Button>\\n  </Menu>\\n  <Menu\\n    density={-3}\\n    content={\\n      <>\\n        <MenuItem icon={<Favorite />}>Gouda</MenuItem>\\n        <MenuItem icon={<Favorite />}>Swiss</MenuItem>\\n      </>\\n    }\\n  >\\n    <Button>Small Items</Button>\\n  </Menu>\\n</Space>\\n\")), mdx(\"h2\", null, \"Tooltip\"), mdx(\"p\", null, \"To add a tooltip to the menu button, nest a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tooltip\"), \" inside \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Menu\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Menu\\n  content={\\n    <>\\n      <MenuItem icon={<Favorite />}>Gouda</MenuItem>\\n      <MenuItem icon={<Favorite />}>Swiss</MenuItem>\\n    </>\\n  }\\n>\\n  <Tooltip placement=\\\"top\\\" content=\\\"Select your favorite kind\\\">\\n    <Button>Cheese</Button>\\n  </Tooltip>\\n</Menu>\\n\")), mdx(\"h2\", null, \"Placement\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"placement\"), \" prop to position the overlay that contains the list.\\nThe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pin\"), \" props allow you to enforce the placement to varying degrees.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Menu\\n  placement=\\\"left\\\"\\n  content={\\n    <>\\n      <MenuItem icon={<Favorite />}>Gouda</MenuItem>\\n      <MenuItem icon={<Favorite />}>Swiss</MenuItem>\\n    </>\\n  }\\n>\\n  <Button>Cheese</Button>\\n</Menu>\\n\")), mdx(\"h2\", null, \"Nested Menu\"), mdx(\"p\", null, \"Add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nestedMenu\"), \" to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuItem\"), \" to create a nested menu.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Menu\\n  content={\\n    <>\\n      <MenuItem\\n        nestedMenu={\\n          <>\\n            <MenuItem>Camembert</MenuItem>\\n            <MenuItem>Comt\\xE9</MenuItem>\\n          </>\\n        }\\n      >\\n        French\\n      </MenuItem>\\n      <MenuItem\\n        nestedMenu={\\n          <>\\n            <MenuItem>Gouda</MenuItem>\\n            <MenuItem>Limburger</MenuItem>\\n          </>\\n        }\\n      >\\n        Dutch\\n      </MenuItem>\\n    </>\\n  }\\n>\\n  <Button>Cheese</Button>\\n</Menu>\\n\")), mdx(\"h2\", null, \"Controlled Menu\"), mdx(\"p\", null, \"Control the state of the menu with the React \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useState\"), \" hook.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [isOpen, setOpen] = React.useState(false)\\n  return (\\n    <Space>\\n      <Menu\\n        isOpen={isOpen}\\n        setOpen={setOpen}\\n        content={\\n          <>\\n            <MenuItem icon={<Email />}>Email</MenuItem>\\n            <MenuItem icon={<TableChart />}>Spreadsheet</MenuItem>\\n          </>\\n        }\\n      >\\n        <Button>Export</Button>\\n      </Menu>\\n      <Text>{isOpen ? 'Menu Open' : 'Menu Closed'}</Text>\\n    </Space>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Toggling the menu button on hover\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const hoverRef = React.useRef()\\n  return (\\n    <Card ref={hoverRef} p=\\\"u5\\\">\\n      <Flex justifyContent=\\\"space-between\\\">\\n        <Paragraph>Hovering in this card will show the menu button.</Paragraph>\\n        <Menu\\n          hoverDisclosureRef={hoverRef}\\n          content={\\n            <>\\n              <MenuItem>Edit item</MenuItem>\\n              <MenuItem>Create new sub-item</MenuItem>\\n            </>\\n          }\\n        >\\n          <IconButton icon={<MoreVert />} label=\\\"More Options\\\" />\\n        </Menu>\\n      </Flex>\\n    </Card>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Recipe: A MenuItem opening a Dialog\"), mdx(\"p\", null, \"To open a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dialog\"), \" from a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuItem\"), \", it must be placed outside of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Menu\"), \" and\\ncontrolled via state values \\u2013 or use the hook version.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const { value, setOn, setOff } = useToggle()\\n  const [note, setNote] = React.useState('Change me...')\\n  const handleChange = e => setNote(e.currentTarget.value)\\n\\n  const handleConfirm = close => {\\n    close()\\n    alert(`You can't delete Gouda, it's a cheese!`)\\n  }\\n\\n  const [confirm, openConfirm] = useConfirm({\\n    message: 'Are you sure you want to delete Gouda?',\\n    onConfirm: handleConfirm,\\n    title: 'Delete Cheese?',\\n  })\\n\\n  return (\\n    <>\\n      <Space align=\\\"start\\\" p=\\\"u4\\\">\\n        <SpaceVertical>\\n          <Heading>Gouda</Heading>\\n          <Paragraph>{note}</Paragraph>\\n        </SpaceVertical>\\n        <Menu\\n          content={\\n            <>\\n              <MenuItem onClick={setOn}>Update note</MenuItem>\\n              <MenuItem onClick={openConfirm}>Delete cheese</MenuItem>\\n            </>\\n          }\\n        >\\n          <IconButton icon={<MoreVert />} label=\\\"Options\\\" />\\n        </Menu>\\n      </Space>\\n      {confirm}\\n      <Dialog isOpen={value} onClose={setOff}>\\n        <DialogLayout\\n          footer={<Button onClick={setOff}>Close</Button>}\\n          header=\\\"Update Note\\\"\\n        >\\n          <InputText value={note} onChange={handleChange} />\\n        </DialogLayout>\\n      </Dialog>\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Recipe: A Filterable Menu Overlay\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/components/v3.0.7/forms/input-search\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"InputSearch\")), \" can be incorporated into a menu popover to filter menu items by search query. Click the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cheese\"), \" button below to try it out.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const defaultCheeses = ['Gouda', 'Swiss', 'Cheddar', 'Goat', 'Parmesan']\\n\\n  const [keywordSearch, setKeywordSearch] = React.useState('')\\n\\n  const searchResults = React.useMemo(\\n    () =>\\n      defaultCheeses.filter(cheese =>\\n        cheese.toLowerCase().includes(keywordSearch.toLowerCase())\\n      ),\\n    [keywordSearch]\\n  )\\n\\n  return (\\n    <Menu\\n      width={200}\\n      content={\\n        <>\\n          <Box2 p=\\\"u2\\\">\\n            <InputSearch\\n              placeholder=\\\"start your search...\\\"\\n              value={keywordSearch}\\n              onChange={setKeywordSearch}\\n            />\\n          </Box2>\\n          <MenuHeading>Cheeses</MenuHeading>\\n          {searchResults.map(cheese => (\\n            <MenuItem itemRole=\\\"link\\\" href={`#${cheese}`} key={cheese}>\\n              {cheese}\\n            </MenuItem>\\n          ))}\\n        </>\\n      }\\n    >\\n      <Button m=\\\"u4\\\">Cheese</Button>\\n    </Menu>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Adding icon placeholder space\"), mdx(\"p\", null, \"If a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Menu\"), \" contains some number of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuItem\"), \"s with icons and some without, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"iconGutter\"), \" prop to properly align all item labels with each other.\"), mdx(\"p\", null, \"More specifically, when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"iconGutter\"), \" is true on a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Menu\"), \", all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuItem\"), \"s without \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"icon\"), \" prop values will allocate icon placeholder space.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space>\\n  <Menu\\n    content={\\n      <>\\n        <MenuItem icon={<DateRange />}>Calendar</MenuItem>\\n        <MenuItem>No icon</MenuItem>\\n        <MenuItem icon={<Pivot />}>Pivot</MenuItem>\\n      </>\\n    }\\n  >\\n    <Button>No Icon Gutter</Button>\\n  </Menu>\\n  <Menu\\n    iconGutter\\n    content={\\n      <>\\n        <MenuItem icon={<DateRange />}>Calendar</MenuItem>\\n        <MenuItem>No icon</MenuItem>\\n        <MenuItem icon={<Pivot />}>Pivot</MenuItem>\\n      </>\\n    }\\n  >\\n    <Button>Icon Gutter</Button>\\n  </Menu>\\n</Space>\\n\")), mdx(\"h2\", null, \"MenuHeading and MenuDivider\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuHeading\"), \" is typically used as a title for a group of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuItem\"), \"s. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuHeading\"), \" children must be of type string.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuDivider\"), \" is a divider element used to separate groups of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuItem\"), \"s.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" As a convenience feature, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MenuDivider\"), \" will not render a divider if it is the first or last child of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Menu\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Menu\\n  content={\\n    <>\\n      <MenuHeading>Good Cheeses</MenuHeading>\\n      <MenuItem>Cheddar</MenuItem>\\n      <MenuItem>Swiss</MenuItem>\\n      <MenuItem>Brie</MenuItem>\\n      <MenuDivider></MenuDivider>\\n      <MenuHeading>Great Cheeses</MenuHeading>\\n      <MenuItem>Pepper Jack</MenuItem>\\n      <MenuItem>String Cheese</MenuItem>\\n    </>\\n  }\\n>\\n  <Button>Menu with headings and dividers</Button>\\n</Menu>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":null,"status":null,"storybook":true,"storybookPath":null,"title":"Menu"}}},"pageContext":{"id":"67dc1c02-833b-5148-a65b-716e63bae008"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}