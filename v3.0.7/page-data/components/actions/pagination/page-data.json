{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/actions/pagination/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"b15dfdc2-7844-5d07-b370-12273204c1e6","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Pagination\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Pagination/>\"), \" component's primary use case is for handling navigation on a paginated item.\"), mdx(\"p\", null, \"It displays the current page and the total number of pages, and includes four \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<IconButton/>\"), \"s for traversal.\"), mdx(\"p\", null, \"The callback passed into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" prop will be called whenever an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<IconButton/>\"), \" is clicked. Descriptions of how each \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<IconButton/>\"), \" will call the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" callback are listed below:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Double Left Arrow\"), \": Will call \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onChange(1)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Single Left Arrow\"), \": Will call \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onChange(current - 1)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Single Right Arrow\"), \": Will call \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onChange(current + 1)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Double Right Arrow\"), \": Will call \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onChange(pages)\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [currentPage, setCurrentPage] = useState(1)\\n  const totalPages = 10\\n\\n  return (\\n    <>\\n      <Pagination\\n        current={currentPage}\\n        pages={totalPages}\\n        onChange={setCurrentPage}\\n      />\\n    </>\\n  )\\n}\\n\")), mdx(\"h2\", null, \"Compose with a DataTable\"), mdx(\"p\", null, \"One application of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Pagination/>\"), \" component is to paginate a data table, like a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<DataTable>\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [currentPage, setCurrentPage] = useState(1)\\n  const cheesePerPage = 1\\n  const data = [\\n    {\\n      id: 1,\\n      name: 'Gouda',\\n    },\\n    {\\n      id: 2,\\n      name: 'Pepper Jack',\\n    },\\n    {\\n      id: 3,\\n      name: `Swiss`,\\n    },\\n    {\\n      id: 4,\\n      name: `Cheddar`,\\n    },\\n  ]\\n  const totalPages = data.length / cheesePerPage\\n\\n  const columns = [\\n    {\\n      id: 'id',\\n      title: 'ID',\\n      type: 'number',\\n      widthPercent: 20,\\n    },\\n    {\\n      id: 'name',\\n      title: 'Name',\\n      type: 'string',\\n      widthPercent: 80,\\n    },\\n  ]\\n\\n  const items = data.map(({ id, name }, index) => {\\n    return (\\n      index + 1 === currentPage && (\\n        <DataTableItem\\n          key={id}\\n          onClick={() => alert(`Row clicked`)}\\n          actions={\\n            <DataTableAction onClick={() => alert(`${name} selected!`)}>\\n              Select Cheese\\n            </DataTableAction>\\n          }\\n        >\\n          <DataTableCell>{id}</DataTableCell>\\n          <DataTableCell>{name}</DataTableCell>\\n        </DataTableItem>\\n      )\\n    )\\n  })\\n\\n  return (\\n    <Flex flexDirection=\\\"column\\\" alignItems=\\\"center\\\">\\n      <Box2 width=\\\"100%\\\" mb=\\\"u3\\\">\\n        <DataTable caption=\\\"Cheeses example\\\" columns={columns}>\\n          {items}\\n        </DataTable>\\n      </Box2>\\n      <Pagination\\n        current={currentPage}\\n        pages={totalPages}\\n        onChange={setCurrentPage}\\n      />\\n    </Flex>\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":null,"status":null,"storybook":true,"storybookPath":null,"title":"Pagination"}}},"pageContext":{"id":"b15dfdc2-7844-5d07-b370-12273204c1e6"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}