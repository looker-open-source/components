{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/actions/page-size/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"6ca08d0d-0330-5f83-b56d-e3150074d6e6","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"PageSize\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"At its core, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<PageSize/>\"), \" is a composition of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Select/>\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Text/>\"), \".\"), mdx(\"p\", null, \"A typical use case of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<PageSize/>\"), \" is to set the number of viewable items on each page in a paginated list.\"), mdx(\"p\", null, \"Regarding implementation details, a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<PageSize/>\"), \" element will call the callback it received via its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" prop any time a user selects a new options from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Select/>\"), \", passing in the newly selected value.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [value, setValue] = useState(10)\\n  return (\\n    <PageSize\\n      value={value}\\n      options={[5, 10, 20, 50]}\\n      total={100}\\n      onChange={setValue}\\n    />\\n  )\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":null,"status":null,"storybook":null,"storybookPath":null,"title":"PageSize"}}},"pageContext":{"id":"6ca08d0d-0330-5f83-b56d-e3150074d6e6"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}