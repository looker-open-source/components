{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/actions/button-group/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"b7e1e713-e8e0-5f4a-be60-31ebde4cddd3","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"ButtonGroup\",\n  \"github\": \"components/src/Button/ButtonGroup.tsx\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(MessageBar, {\n    noActions: true,\n    intent: \"inform\",\n    mdxType: \"MessageBar\"\n  }, mdx(Code, {\n    mdxType: \"Code\"\n  }, \"ButtonGroup\"), \" does not support uncontrolled versions.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ButtonGroup\"), \" behaves like a checkbox group. Use this when the user may select zero or more of a small set of options.\\nControl externally via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" props. On individual \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ButtonItem\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" is optional and will fall back to the text if absent.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \";() => {\\n  const [value, setValue] = useState(['CA'])\\n  return (\\n    <>\\n      <ButtonGroup value={value} onChange={setValue}>\\n        <ButtonItem value=\\\"CA\\\">California</ButtonItem>\\n        <ButtonItem value=\\\"AK\\\">Alaska</ButtonItem>\\n        <ButtonItem value=\\\"UT\\\">Utah</ButtonItem>\\n      </ButtonGroup>\\n      <Text pl=\\\"u3\\\">Current selection: {value.join(', ')}</Text>\\n    </>\\n  )\\n}\\n\")), mdx(\"h3\", null, \"Disabled\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<ButtonGroup value={['CA']} disabled>\\n  <ButtonItem value=\\\"CA\\\">California</ButtonItem>\\n  <ButtonItem value=\\\"AK\\\">Alaska</ButtonItem>\\n  <ButtonItem value=\\\"UT\\\">Utah</ButtonItem>\\n</ButtonGroup>\\n\")), mdx(\"h2\", null, \"Options\"), mdx(\"p\", null, \"An alternative to composing a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ButtonGroup\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ButtonToggle\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ButtonItem\"), \" children is to pass it an array of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"options\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const options = [\\n    { value: 'Gouda', label: 'Smoked Gouda' },\\n    { value: 'Cheddar' },\\n    { value: 'Swiss', disabled: true },\\n  ]\\n  const [value, setValue] = useState([options[0].value])\\n  return <ButtonGroup options={options} value={value} onChange={setValue} />\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components/src/Button/ButtonGroup.tsx","status":null,"storybook":true,"storybookPath":null,"title":"ButtonGroup"}}},"pageContext":{"id":"b7e1e713-e8e0-5f4a-be60-31ebde4cddd3"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}