{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/actions/icon-button/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"ef1c8cd3-eca1-5ed0-a683-5f8c4bdc04fc","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"IconButton\",\n  \"github\": \"components/src/Button/IconButton.tsx\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IconButton\"), \"'s are used when you need an icon to trigger an action, such as showing a dialog or deleting an item.\\nIt require a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"label\"), \" that describes it's action. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"label\"), \" should be descriptive and succinct.\\nIf you need an icon for purely decorative purposes use an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Icon />\"), \" instead.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space evenly>\\n  <IconButton icon={<Add />} label=\\\"Add Something Neat\\\" />\\n  <IconButton icon={<Settings />} label=\\\"Settings\\\" />\\n  <IconButton icon={<Delete />} label=\\\"Trash It\\\" />\\n  <IconButton icon={<Close />} label=\\\"Close\\\" />\\n  <IconButton icon={<Favorite />} label=\\\"Add to Favorites\\\" />\\n</Space>\\n\")), mdx(\"h3\", null, \"IconButton Options\"), mdx(\"h2\", null, \"Sizes\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"xxsmall\"), \" | \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"xsmall\"), \" (default) | \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"small\"), \" | \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"medium\"), \" | \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"large\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space evenly>\\n  <IconButton icon={<Favorite />} label=\\\"Add to Favorites\\\" size=\\\"xxsmall\\\" />\\n  <IconButton icon={<Favorite />} label=\\\"Add to Favorites\\\" />\\n  <IconButton icon={<Favorite />} label=\\\"Add to Favorites\\\" size=\\\"small\\\" />\\n  <IconButton icon={<Favorite />} label=\\\"Add to Favorites\\\" size=\\\"medium\\\" />\\n  <IconButton icon={<Favorite />} label=\\\"Add to Favorites\\\" size=\\\"large\\\" />\\n</Space>\\n\")), mdx(\"h2\", null, \"States\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space evenly>\\n  <IconButton icon={<Favorite />} label=\\\"Add to Favorites\\\" />\\n  <IconButton icon={<Favorite />} label=\\\"Add to Favorites\\\" className=\\\"hover\\\" />\\n  <IconButton icon={<Favorite />} label=\\\"Add to Favorites\\\" className=\\\"active\\\" />\\n</Space>\\n\")), mdx(\"h2\", null, \"Shapes\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"round\"), \" (default) | \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"square\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space evenly>\\n  <IconButton\\n    icon={<Delete />}\\n    label=\\\"Trash it\\\"\\n    outline\\n    shape=\\\"square\\\"\\n    size=\\\"xxsmall\\\"\\n  />\\n  <IconButton\\n    icon={<Delete />}\\n    label=\\\"Trash it\\\"\\n    outline\\n    shape=\\\"square\\\"\\n    size=\\\"large\\\"\\n  />\\n</Space>\\n\")), mdx(\"h3\", null, \"Toggle\"), mdx(\"p\", null, \"Icon buttons have the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggle\"), \" prop which can be used to show a toggleable state. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggle\"), \" prop has to be explictly set to either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \";() => {\\n  const [isToggled, setIsToggled] = useState(false)\\n\\n  return (\\n    <IconButton\\n      icon={isToggled ? <Favorite /> : <FavoriteOutline />}\\n      toggle={isToggled}\\n      onClick={() => setIsToggled(!isToggled)}\\n    />\\n  )\\n}\\n\")), mdx(\"h3\", null, \"ToggleBackground\"), mdx(\"p\", null, \"Icon buttons have the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggleBackground\"), \" prop which can be used to show a background color to the Icon. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggle\"), \" prop has to be explictly set to either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space evenly>\\n  <IconButton icon={<Favorite />} toggle toggleBackground />\\n  <IconButton icon={<Favorite />} shape=\\\"round\\\" toggle toggleBackground />\\n</Space>\\n\")), mdx(\"h3\", null, \"ToggleColor\"), mdx(\"p\", null, \"Icon buttons have the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggleColor\"), \" prop which can be used to specify what the icon's color and background color are when \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggle = true\"), \". It accepts the following values:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"'key'\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"'calculation'\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"'dimension'\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"'measure'\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space evenly>\\n  <IconButton\\n    icon={<Favorite />}\\n    toggle\\n    toggleBackground\\n    toggleColor=\\\"calculation\\\"\\n  />\\n  <IconButton\\n    icon={<Favorite />}\\n    toggle\\n    toggleBackground\\n    toggleColor=\\\"calculation\\\"\\n  />\\n</Space>\\n\")), mdx(\"h2\", null, \"IconButton & Tooltip\"), mdx(\"p\", null, \"You can also use your own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tooltip\"), \" around \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"IconButton\"), \" (this will effectively remove the \\\"built-in\\\" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tooltip\"), \")\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Tooltip content=\\\"I'm a little teapot\\\">\\n  <IconButton label=\\\"Add Something Neat\\\" icon={<Add />} size=\\\"xxsmall\\\" />\\n</Tooltip>\\n\")), mdx(\"h2\", null, \"Disabling the Tooltip\"), mdx(\"p\", null, \"If you would like to disable the tooltip entirely, use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tooltipDisabled\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<IconButton label=\\\"no tooltip\\\" icon={<Home />} size=\\\"large\\\" tooltipDisabled />\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components/src/Button/IconButton.tsx","status":null,"storybook":true,"storybookPath":null,"title":"IconButton"}}},"pageContext":{"id":"ef1c8cd3-eca1-5ed0-a683-5f8c4bdc04fc"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}