{"componentChunkName":"component---src-layout-documentation-tsx","path":"/components/actions/button-outline/","result":{"data":{"site":{"siteMetadata":{"title":"Looker UI Components"}},"mdx":{"id":"3bc70848-451e-521d-88ee-d2ae057e1a3b","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"ButtonOutline\",\n  \"github\": \"components/src/Button/ButtonOutline.tsx\",\n  \"storybook\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Use an outline button alongside a default button to provide alternative actions on a page. Outline buttons should only appear alongside default buttons for secondary actions. Use no more than two secondary buttons on a page.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<ButtonOutline>Outline</ButtonOutline>\\n\")), mdx(\"h3\", null, \"Size\"), mdx(\"p\", null, \"Use the size property on a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ButtonOutline />\"), \" to modify the size the button rendered. You can combine it with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mode\"), \" property to get the correct style and size of button you need.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Space>\\n  <ButtonOutline size=\\\"xsmall\\\">Xsmall Button</ButtonOutline>\\n  <ButtonOutline size=\\\"small\\\">Small Button</ButtonOutline>\\n  <ButtonOutline>Medium (default) Button</ButtonOutline>\\n  <ButtonOutline size=\\\"large\\\">Large Button</ButtonOutline>\\n</Space>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"github":"components/src/Button/ButtonOutline.tsx","status":null,"storybook":true,"storybookPath":null,"title":"ButtonOutline"}}},"pageContext":{"id":"3bc70848-451e-521d-88ee-d2ae057e1a3b"}},"staticQueryHashes":["1992130076","2337259409","4275213719"]}