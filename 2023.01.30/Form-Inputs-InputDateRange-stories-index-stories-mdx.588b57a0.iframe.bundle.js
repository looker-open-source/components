"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[5305],{"./src/defaultArgTypes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>defaultArgTypes,q:()=>excludedProps});const defaultArgTypes={as:{table:{disable:!0}},forwardedAs:{table:{disable:!0}},ref:{table:{disable:!0}},theme:{table:{disable:!0}}},excludedProps=Object.keys(defaultArgTypes)},"../components/src/Form/Inputs/InputDateRange/stories/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>index_stories});__webpack_require__("../../node_modules/react/index.js");var esm=__webpack_require__("../../node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("../../node_modules/@storybook/addon-docs/dist/esm/index.js"),src=__webpack_require__("../components/src/index.ts"),Editor=__webpack_require__("./src/Editor/index.tsx"),defaultArgTypes=__webpack_require__("./src/defaultArgTypes.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const layoutProps={};function MDXContent({components,...props}){return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(dist_esm.Meta,{component:src.InputDateRange,title:"Docs/InputDateRange",mdxType:"Meta"}),(0,esm.kt)("h1",{id:"inputdaterange"},"InputDateRange"),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"InputDateRange")," provides an interface to select to a date range, either through the calendar interface or text input boxes."),(0,esm.kt)("h2",{id:"value"},"Value"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"value")," prop is a date range object, while ",(0,esm.kt)("inlineCode",{parentName:"p"},"onChange")," is a callback that receives the new date range object.\nBoth props are both required â€“ there is no uncontrolled option."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React, { useState } from 'react'\nimport type { RangeModifier } from '../../../../Calendar'\nimport { InputDateRange } from '../InputDateRange'\n\nexport default function Value() {\n  const [value, setValue] = useState<RangeModifier>({\n    from: new Date('June 3, 2019'),\n    to: new Date('June 9, 2019'),\n  })\n  return <InputDateRange value={value} onChange={setValue} />\n}\n",mdxType:"Editor"}),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"value")," prop responds to external updates. Both the ",(0,esm.kt)("inlineCode",{parentName:"p"},"from")," and ",(0,esm.kt)("inlineCode",{parentName:"p"},"to")," properties of ",(0,esm.kt)("inlineCode",{parentName:"p"},"value")," are optional."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React, { useState } from 'react'\nimport { Button } from '../../../../Button'\nimport type { RangeModifier } from '../../../../Calendar'\nimport { Space, SpaceVertical } from '../../../../Layout'\nimport { InputDateRange } from '../InputDateRange'\n\nexport default function ExternalUpdates() {\n  const [value, setValue] = useState<RangeModifier>({\n    from: new Date('June 3, 2019'),\n    to: new Date('June 9, 2019'),\n  })\n\n  return (\n    <SpaceVertical>\n      <Space>\n        <Button\n          onClick={() =>\n            setValue({\n              from: new Date('January 1, 2012'),\n              to: new Date('February 15, 2012'),\n            })\n          }\n        >\n          January 1 - February 15, 2012\n        </Button>\n        <Button\n          onClick={() => setValue({ from: new Date('February 9, 2021') })}\n        >\n          From: February 9, 2021\n        </Button>\n        <Button onClick={() => setValue({ to: new Date('February 9, 2021') })}>\n          To: February 9, 2021\n        </Button>\n        <Button onClick={() => setValue({})}>Clear</Button>\n      </Space>\n      <InputDateRange value={value} onChange={setValue} />\n    </SpaceVertical>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"onvalidationfail"},"onValidationFail"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"onValidationFail"),' handler will be called with "Invalid range" when one or both of the dates is invalid, or the from date is after the to date.'),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React, { useState } from 'react'\nimport type { RangeModifier } from '../../../../Calendar'\nimport { Divider } from '../../../../Divider'\nimport { SpaceVertical } from '../../../../Layout'\nimport { Heading, Paragraph } from '../../../../Text'\nimport { InputDateRange } from '../InputDateRange'\n\nexport default function OnValidationFail() {\n  const [value, setValue] = useState<RangeModifier>({})\n  const [isValid, setIsValid] = useState(true)\n  const handleChange = (newValue: RangeModifier) => {\n    setValue(newValue)\n    setIsValid(true)\n  }\n  const handleValidationFail = () => setIsValid(false)\n\n  const message = isValid ? 'Valid Input' : 'Invalid Input'\n  const color = isValid ? undefined : 'critical'\n\n  return (\n    <SpaceVertical>\n      <Paragraph color=\"text2\">\n        INSTRUCTIONS: Try typing an invalid date string (ex: 'not/a/valid/date')\n        and clicking or tabbing away to trigger blur event.\n      </Paragraph>\n      <Heading>Result:</Heading>\n      <Paragraph color={color}>{message}</Paragraph>\n      <Divider />\n      <InputDateRange\n        value={value}\n        onChange={handleChange}\n        onValidationFail={handleValidationFail}\n      />\n    </SpaceVertical>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"i18n"},"I18n"),(0,esm.kt)("p",null,"See ",(0,esm.kt)("a",{parentName:"p",href:"?path=/docs/docs-calendar--docs#i18n"},"Calendar component"),"."),(0,esm.kt)("h2",{id:"props"},"Props"),(0,esm.kt)(dist_esm.ArgsTable,{of:src.InputDateRange,exclude:defaultArgTypes.q,mdxType:"ArgsTable"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Docs/InputDateRange",component:src.InputDateRange,includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,esm.kt)(MDXContent,null)};const index_stories=componentMeta,__namedExportsOrder=["__page"]}}]);