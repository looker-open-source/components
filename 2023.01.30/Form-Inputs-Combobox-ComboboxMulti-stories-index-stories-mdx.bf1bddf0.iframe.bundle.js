"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[4973],{"./src/defaultArgTypes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>defaultArgTypes,q:()=>excludedProps});const defaultArgTypes={as:{table:{disable:!0}},forwardedAs:{table:{disable:!0}},ref:{table:{disable:!0}},theme:{table:{disable:!0}}},excludedProps=Object.keys(defaultArgTypes)},"../components/src/Form/Inputs/Combobox/ComboboxMulti/stories/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>index_stories});__webpack_require__("../../node_modules/react/index.js");var esm=__webpack_require__("../../node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("../../node_modules/@storybook/addon-docs/dist/esm/index.js"),src=__webpack_require__("../components/src/index.ts"),Editor=__webpack_require__("./src/Editor/index.tsx"),defaultArgTypes=__webpack_require__("./src/defaultArgTypes.ts");try{Basic.displayName="Basic",Basic.__docgenInfo={description:"",displayName:"Basic",props:{values:{defaultValue:null,description:"The current option (controlled)",name:"values",required:!1,type:{name:"ComboboxOptionObject[]"}},defaultValues:{defaultValue:null,description:"The initial option (uncontrolled)",name:"defaultValues",required:!1,type:{name:"ComboboxOptionObject[]"}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},openOnClick:{defaultValue:{value:"true"},description:"If true, the popover opens when the text box is clicked.",name:"openOnClick",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Called when an option is selected (not when user types – use ComboboxInput.onChange for that)",name:"onChange",required:!1,type:{name:"ComboboxMultiCallback"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxMultiCallback"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxMultiCallback"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/Combobox/ComboboxMulti/stories/Basic.tsx#Basic"]={docgenInfo:Basic.__docgenInfo,name:"Basic",path:"../components/src/Form/Inputs/Combobox/ComboboxMulti/stories/Basic.tsx#Basic"})}catch(__react_docgen_typescript_loader_error){}try{Controlled.displayName="Controlled",Controlled.__docgenInfo={description:"",displayName:"Controlled",props:{values:{defaultValue:null,description:"The current option (controlled)",name:"values",required:!1,type:{name:"ComboboxOptionObject[]"}},defaultValues:{defaultValue:null,description:"The initial option (uncontrolled)",name:"defaultValues",required:!1,type:{name:"ComboboxOptionObject[]"}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},openOnClick:{defaultValue:{value:"true"},description:"If true, the popover opens when the text box is clicked.",name:"openOnClick",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Called when an option is selected (not when user types – use ComboboxInput.onChange for that)",name:"onChange",required:!1,type:{name:"ComboboxMultiCallback"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxMultiCallback"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxMultiCallback"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/Combobox/ComboboxMulti/stories/Controlled.tsx#Controlled"]={docgenInfo:Controlled.__docgenInfo,name:"Controlled",path:"../components/src/Form/Inputs/Combobox/ComboboxMulti/stories/Controlled.tsx#Controlled"})}catch(__react_docgen_typescript_loader_error){}try{ControlledInputValue.displayName="ControlledInputValue",ControlledInputValue.__docgenInfo={description:"",displayName:"ControlledInputValue",props:{values:{defaultValue:null,description:"The current option (controlled)",name:"values",required:!1,type:{name:"ComboboxOptionObject[]"}},defaultValues:{defaultValue:null,description:"The initial option (uncontrolled)",name:"defaultValues",required:!1,type:{name:"ComboboxOptionObject[]"}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},openOnClick:{defaultValue:{value:"true"},description:"If true, the popover opens when the text box is clicked.",name:"openOnClick",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Called when an option is selected (not when user types – use ComboboxInput.onChange for that)",name:"onChange",required:!1,type:{name:"ComboboxMultiCallback"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxMultiCallback"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxMultiCallback"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/Combobox/ComboboxMulti/stories/ControlledInputValue.tsx#ControlledInputValue"]={docgenInfo:ControlledInputValue.__docgenInfo,name:"ControlledInputValue",path:"../components/src/Form/Inputs/Combobox/ComboboxMulti/stories/ControlledInputValue.tsx#ControlledInputValue"})}catch(__react_docgen_typescript_loader_error){}try{CustomIndicator.displayName="CustomIndicator",CustomIndicator.__docgenInfo={description:"",displayName:"CustomIndicator",props:{values:{defaultValue:null,description:"The current option (controlled)",name:"values",required:!1,type:{name:"ComboboxOptionObject[]"}},defaultValues:{defaultValue:null,description:"The initial option (uncontrolled)",name:"defaultValues",required:!1,type:{name:"ComboboxOptionObject[]"}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},openOnClick:{defaultValue:{value:"true"},description:"If true, the popover opens when the text box is clicked.",name:"openOnClick",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Called when an option is selected (not when user types – use ComboboxInput.onChange for that)",name:"onChange",required:!1,type:{name:"ComboboxMultiCallback"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxMultiCallback"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxMultiCallback"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/Combobox/ComboboxMulti/stories/CustomIndicator.tsx#CustomIndicator"]={docgenInfo:CustomIndicator.__docgenInfo,name:"CustomIndicator",path:"../components/src/Form/Inputs/Combobox/ComboboxMulti/stories/CustomIndicator.tsx#CustomIndicator"})}catch(__react_docgen_typescript_loader_error){}try{NoIndicator.displayName="NoIndicator",NoIndicator.__docgenInfo={description:"",displayName:"NoIndicator",props:{values:{defaultValue:null,description:"The current option (controlled)",name:"values",required:!1,type:{name:"ComboboxOptionObject[]"}},defaultValues:{defaultValue:null,description:"The initial option (uncontrolled)",name:"defaultValues",required:!1,type:{name:"ComboboxOptionObject[]"}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},openOnClick:{defaultValue:{value:"true"},description:"If true, the popover opens when the text box is clicked.",name:"openOnClick",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Called when an option is selected (not when user types – use ComboboxInput.onChange for that)",name:"onChange",required:!1,type:{name:"ComboboxMultiCallback"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxMultiCallback"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxMultiCallback"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/Combobox/ComboboxMulti/stories/NoIndicator.tsx#NoIndicator"]={docgenInfo:NoIndicator.__docgenInfo,name:"NoIndicator",path:"../components/src/Form/Inputs/Combobox/ComboboxMulti/stories/NoIndicator.tsx#NoIndicator"})}catch(__react_docgen_typescript_loader_error){}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const layoutProps={};function MDXContent({components,...props}){return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(dist_esm.Meta,{component:src.ComboboxMulti,title:"Docs/ComboboxMulti",mdxType:"Meta"}),(0,esm.kt)("h1",{id:"comboboxmulti"},"ComboboxMulti"),(0,esm.kt)("p",null,"For the vast majority of use cases, you should be using the ",(0,esm.kt)("a",{parentName:"p",href:"?path=/docs/docs-select--docs"},"Select input")," instead of rendering ComboboxMulti directly. ComboboxMulti is the lower-level abstraction used for rendering Select."),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React from 'react'\nimport type { ComboboxMultiProps } from '../..'\nimport { ComboboxMultiInput } from '../../ComboboxMultiInput'\nimport { ComboboxMultiOption } from '../../ComboboxMultiOption'\nimport { ComboboxMultiList } from '../../ComboboxList'\nimport { ComboboxMulti } from '../../ComboboxMulti'\n\nexport default function Basic(props: ComboboxMultiProps) {\n  const { width = 300, ...restProps } = props\n  return (\n    <ComboboxMulti width={width} {...restProps}>\n      <ComboboxMultiInput onClear={() => alert('CLEAR')} freeInput />\n      <ComboboxMultiList>\n        <ComboboxMultiOption value=\"Apples\" />\n        <ComboboxMultiOption value=\"Oranges\" />\n        <ComboboxMultiOption value=\"Grapes\" />\n        <ComboboxMultiOption value=\"Bananas\" />\n        <ComboboxMultiOption value=\"Pineapples\" />\n      </ComboboxMultiList>\n    </ComboboxMulti>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"controlled-component"},"Controlled Component"),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React, { useState } from 'react'\nimport type { ComboboxMultiProps, ComboboxOptionObject } from '../..'\nimport { ComboboxMultiInput } from '../../ComboboxMultiInput'\nimport { ComboboxMultiOption } from '../../ComboboxMultiOption'\nimport { ComboboxMultiList } from '../../ComboboxList'\nimport { ComboboxMulti } from '..'\n\nexport default function Controlled(props: ComboboxMultiProps) {\n  const {\n    width = 300,\n    values: valuesProp = [{ value: 'Bananas' }],\n    onChange: _onChange,\n    ...restProps\n  } = props\n\n  const [options, setOptions] = useState<ComboboxOptionObject[]>(valuesProp)\n  const handleMultiChange = (newOptions: ComboboxOptionObject[]) => {\n    setOptions(newOptions)\n  }\n\n  return (\n    <ComboboxMulti\n      width={width}\n      values={options}\n      onChange={handleMultiChange}\n      {...restProps}\n    >\n      <ComboboxMultiInput onClear={() => alert('CLEAR')} freeInput />\n      <ComboboxMultiList>\n        <ComboboxMultiOption value=\"Apples\" />\n        <ComboboxMultiOption value=\"Oranges\" />\n        <ComboboxMultiOption value=\"Grapes\" />\n        <ComboboxMultiOption value=\"Bananas\" />\n        <ComboboxMultiOption value=\"Pineapples\" />\n      </ComboboxMultiList>\n    </ComboboxMulti>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"controlled-input-value"},"Controlled Input Value"),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React, { useState } from 'react'\nimport type { ComboboxMultiProps } from '../..'\nimport { Paragraph, Button, SpaceVertical } from '../../../../../'\nimport { ComboboxMultiInput } from '../../ComboboxMultiInput'\nimport { ComboboxMultiOption } from '../../ComboboxMultiOption'\nimport { ComboboxMultiList } from '../../ComboboxList'\nimport { ComboboxMulti } from '..'\n\nexport default function ControlledInputValue(props: ComboboxMultiProps) {\n  const {\n    width = 300,\n    values: valuesProp = [{ value: 'Apples' }],\n    onChange: _onChange,\n    ...restProps\n  } = props\n\n  const [inputValue, setInputValue] = useState('starting value')\n  const [values, setValues] = useState(valuesProp)\n  const handleClick = () => setInputValue('bananas')\n  return (\n    <SpaceVertical width={width} align=\"start\">\n      <Paragraph>Current inputValue: {inputValue}</Paragraph>\n      <Button onClick={handleClick}>Change Input Value</Button>\n      <ComboboxMulti values={values} onChange={setValues} {...restProps}>\n        <ComboboxMultiInput\n          autoComplete={false}\n          inputValue={inputValue}\n          onInputChange={setInputValue}\n          freeInput\n        />\n        <ComboboxMultiList persistSelection>\n          <ComboboxMultiOption value=\"Apples\" />\n          <ComboboxMultiOption value=\"Oranges\" />\n          <ComboboxMultiOption value=\"Grapes\" />\n          <ComboboxMultiOption value=\"Bananas\" />\n          <ComboboxMultiOption value=\"Pineapples\" />\n        </ComboboxMultiList>\n      </ComboboxMulti>\n    </SpaceVertical>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"customizing-the-indicator"},"Customizing the indicator"),(0,esm.kt)("p",null,"Open the select menu to see the custom indicator appear on hover."),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React from 'react'\nimport type { OptionIndicatorProps, ComboboxMultiProps } from '../..'\nimport { ComboboxMultiInput } from '../../ComboboxMultiInput'\nimport { ComboboxMultiOption } from '../../ComboboxMultiOption'\nimport { ComboboxMultiList } from '../../ComboboxList'\nimport { ComboboxMulti } from '..'\n\nconst Indicator = ({ isActive, isSelected }: OptionIndicatorProps) => {\n  let indicator\n\n  if (isSelected) {\n    indicator = '>>'\n  } else if (isActive) {\n    indicator = '>'\n  } else {\n    indicator = ''\n  }\n  return <>{indicator}</>\n}\n\nexport default function CustomIndicator(props: ComboboxMultiProps) {\n  const { width = 300, ...restProps } = props\n\n  return (\n    <ComboboxMulti width={width} {...restProps}>\n      <ComboboxMultiInput\n        onClear={() => alert('CLEAR')}\n        placeholder=\"Custom indicator\"\n      />\n      <ComboboxMultiList indicator={Indicator} persistSelection>\n        <ComboboxMultiOption value=\"Apples\" />\n        <ComboboxMultiOption value=\"Oranges\" />\n        <ComboboxMultiOption value=\"Grapes\" />\n        <ComboboxMultiOption value=\"Bananas\" />\n        <ComboboxMultiOption value=\"Pineapples\" />\n      </ComboboxMultiList>\n    </ComboboxMulti>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"hiding-the-indicator"},"Hiding the indicator"),(0,esm.kt)("p",null,"You can disable the option indicator entirely by setting ",(0,esm.kt)("inlineCode",{parentName:"p"},"indicator={false}")," on the ComboboxMultiList component."),(0,esm.kt)(Editor.Editor,{code:'/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the "Software"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React from \'react\'\nimport type { ComboboxMultiProps } from \'../..\'\nimport { ComboboxMultiInput } from \'../../ComboboxMultiInput\'\nimport { ComboboxMultiOption } from \'../../ComboboxMultiOption\'\nimport { ComboboxMultiList } from \'../../ComboboxList\'\nimport { ComboboxMulti } from \'..\'\n\nexport default function NoIndicator(props: ComboboxMultiProps) {\n  const { width = 300, ...restProps } = props\n\n  return (\n    <ComboboxMulti width={width} {...restProps}>\n      <ComboboxMultiInput\n        onClear={() => alert(\'CLEAR\')}\n        placeholder="indicator={false}"\n      />\n      <ComboboxMultiList indicator={false} persistSelection>\n        <ComboboxMultiOption value="Apples" />\n        <ComboboxMultiOption value="Oranges" />\n        <ComboboxMultiOption value="Grapes" />\n        <ComboboxMultiOption value="Bananas" />\n        <ComboboxMultiOption value="Pineapples" />\n      </ComboboxMultiList>\n    </ComboboxMulti>\n  )\n}\n',mdxType:"Editor"}),(0,esm.kt)("h2",{id:"customizing-the-list-width"},"Customizing the list width"),(0,esm.kt)("p",null,"You can set either ",(0,esm.kt)("inlineCode",{parentName:"p"},"width"),", ",(0,esm.kt)("inlineCode",{parentName:"p"},"min-width"),", or ",(0,esm.kt)("inlineCode",{parentName:"p"},"max-width")," on the ComboboxList to customize how much space the combox will take up when the list overlay is open."),(0,esm.kt)(Editor.Editor,{code:'/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the "Software"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport type { FormEvent } from \'react\'\nimport React, { useState } from \'react\'\nimport { Slider, Label } from \'../../../..\'\nimport { Card } from \'../../../../../Card\'\nimport { SpaceVertical } from \'../../../../../Layout\'\nimport {\n  ComboboxMulti,\n  ComboboxMultiOption,\n  ComboboxMultiList,\n  ComboboxMultiInput,\n} from \'../..\'\n\nexport default function ListLayout() {\n  const [containerWidth, setContainerWidth] = useState(400)\n  const handleWidthChange = (e: FormEvent<HTMLInputElement>) => {\n    setContainerWidth(parseInt(e.currentTarget.value, 10))\n  }\n\n  return (\n    <SpaceVertical p="u5">\n      <Label>Move slider to adjust container width:</Label>\n      <Slider\n        min={100}\n        max={1000}\n        step={10}\n        value={containerWidth}\n        onChange={handleWidthChange}\n        width={400}\n      />\n      <Card p={20} width={containerWidth + 40}>\n        <SpaceVertical>\n          <ComboboxMulti>\n            <ComboboxMultiInput placeholder="width=500" />\n            <ComboboxMultiList width={500}>\n              <ComboboxMultiOption value="Apples" />\n              <ComboboxMultiOption value="Oranges" />\n              <ComboboxMultiOption value="Grapes" />\n              <ComboboxMultiOption value="Bananas" />\n              <ComboboxMultiOption value="Pineapples" />\n            </ComboboxMultiList>\n          </ComboboxMulti>\n          <ComboboxMulti>\n            <ComboboxMultiInput placeholder="minWidth=420" />\n            <ComboboxMultiList minWidth={420}>\n              <ComboboxMultiOption value="Apples" />\n              <ComboboxMultiOption value="Oranges" />\n              <ComboboxMultiOption value="Grapes" />\n              <ComboboxMultiOption value="Bananas" />\n              <ComboboxMultiOption value="Pineapples" />\n            </ComboboxMultiList>\n          </ComboboxMulti>\n        </SpaceVertical>\n      </Card>\n    </SpaceVertical>\n  )\n}\n',mdxType:"Editor"}),(0,esm.kt)("h2",{id:"props"},"Props"),(0,esm.kt)(dist_esm.ArgsTable,{of:src.ComboboxMulti,exclude:defaultArgTypes.q,mdxType:"ArgsTable"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Docs/ComboboxMulti",component:src.ComboboxMulti,includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,esm.kt)(MDXContent,null)};const index_stories=componentMeta,__namedExportsOrder=["__page"]}}]);