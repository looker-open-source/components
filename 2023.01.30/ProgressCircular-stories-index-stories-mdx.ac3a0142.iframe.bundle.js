"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[7192],{"./src/defaultArgTypes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>defaultArgTypes,q:()=>excludedProps});const defaultArgTypes={as:{table:{disable:!0}},forwardedAs:{table:{disable:!0}},ref:{table:{disable:!0}},theme:{table:{disable:!0}}},excludedProps=Object.keys(defaultArgTypes)},"../components/src/ProgressCircular/stories/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>index_stories});__webpack_require__("../../node_modules/react/index.js");var esm=__webpack_require__("../../node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("../../node_modules/@storybook/addon-docs/dist/esm/index.js"),ProgressCircular=__webpack_require__("../components/src/ProgressCircular/ProgressCircular.tsx"),MessageBar=__webpack_require__("../components/src/MessageBar/MessageBar.tsx"),Editor=__webpack_require__("./src/Editor/index.tsx"),defaultArgTypes=__webpack_require__("./src/defaultArgTypes.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const layoutProps={};function MDXContent({components,...props}){return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(dist_esm.Meta,{component:ProgressCircular.X,title:"Docs/ProgressCircular",mdxType:"Meta"}),(0,esm.kt)("h1",{id:"progresscircular"},"ProgressCircular"),(0,esm.kt)(MessageBar.c,{noActions:!0,intent:"warn",mdxType:"MessageBar"},"This component is currently experimental."),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"ProgressCircular")," helps express an unspecified wait time or displays the length of a process"),(0,esm.kt)("h2",{id:"showing-a-generic-loading-state"},"Showing a generic loading state"),(0,esm.kt)("p",null,"To show a generic loading state or process, use the default ",(0,esm.kt)("inlineCode",{parentName:"p"},"ProgressCircular")," behavior."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from 'react'\nimport { ProgressCircular } from '../ProgressCircular'\nimport { Space } from '../../Layout'\n\nexport default function Default() {\n  return (\n    <Space justify=\"center\">\n      <ProgressCircular />\n    </Space>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"rendering-defined-async-progress"},"Rendering defined async progress"),(0,esm.kt)("p",null,"If the process has known steps to completion, you can use the ",(0,esm.kt)("inlineCode",{parentName:"p"},"progress")," prop to indicate a more precise loading state. The ",(0,esm.kt)("inlineCode",{parentName:"p"},"progress")," prop accepts a number from ",(0,esm.kt)("inlineCode",{parentName:"p"},"0")," to ",(0,esm.kt)("inlineCode",{parentName:"p"},"1"),", where ",(0,esm.kt)("inlineCode",{parentName:"p"},"0")," is 0% complete and ",(0,esm.kt)("inlineCode",{parentName:"p"},"1")," is 100% complete."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React, { useState } from 'react'\nimport { ProgressCircular } from '../ProgressCircular'\nimport { Space, SpaceVertical } from '../../Layout'\nimport { ButtonToggle } from '../../Button/ButtonToggle'\n\nexport default function Default() {\n  const options = [\n    { label: '0%', value: '0' },\n    { label: '25%', value: '0.25' },\n    { label: '50%', value: '0.5' },\n    { label: '75%', value: '0.75' },\n    { label: '100%', value: '1' },\n  ]\n\n  const [progress, setProgress] = useState(options[2].value)\n\n  return (\n    <SpaceVertical>\n      <ProgressCircular progress={parseFloat(progress)} />\n      <Space>\n        <ButtonToggle\n          value={progress}\n          options={options}\n          onChange={setProgress}\n        />\n      </Space>\n    </SpaceVertical>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"size"},"Size"),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"ProgressCircular")," is available in four sizes, ",(0,esm.kt)("inlineCode",{parentName:"p"},"xsmall"),", ",(0,esm.kt)("inlineCode",{parentName:"p"},"small"),", ",(0,esm.kt)("inlineCode",{parentName:"p"},"medium"),", and ",(0,esm.kt)("inlineCode",{parentName:"p"},"large"),"."),(0,esm.kt)(Editor.Editor,{code:'/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from \'react\'\nimport { ProgressCircular } from \'../ProgressCircular\'\nimport { Space } from \'../../Layout\'\n\nexport default function Size() {\n  return (\n    <Space justify="center">\n      <ProgressCircular size="xsmall" />\n      <ProgressCircular size="small" />\n      <ProgressCircular size="medium" />\n      <ProgressCircular />\n    </Space>\n  )\n}\n',mdxType:"Editor"}),(0,esm.kt)(dist_esm.ArgsTable,{of:ProgressCircular.X,exclude:defaultArgTypes.q,mdxType:"ArgsTable"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Docs/ProgressCircular",component:ProgressCircular.X,includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,esm.kt)(MDXContent,null)};const index_stories=componentMeta,__namedExportsOrder=["__page"]}}]);