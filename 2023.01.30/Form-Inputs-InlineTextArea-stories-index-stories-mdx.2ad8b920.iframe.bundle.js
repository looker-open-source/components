"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[2698],{"./src/defaultArgTypes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>defaultArgTypes,q:()=>excludedProps});const defaultArgTypes={as:{table:{disable:!0}},forwardedAs:{table:{disable:!0}},ref:{table:{disable:!0}},theme:{table:{disable:!0}}},excludedProps=Object.keys(defaultArgTypes)},"../components/src/Form/Inputs/InlineTextArea/stories/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>index_stories});__webpack_require__("../../node_modules/react/index.js");var esm=__webpack_require__("../../node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("../../node_modules/@storybook/addon-docs/dist/esm/index.js"),src=__webpack_require__("../components/src/index.ts"),Editor=__webpack_require__("./src/Editor/index.tsx"),defaultArgTypes=__webpack_require__("./src/defaultArgTypes.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const layoutProps={};function MDXContent({components,...props}){return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(dist_esm.Meta,{component:src.InlineTextArea,title:"Docs/InlineTextArea",mdxType:"Meta"}),(0,esm.kt)("h1",{id:"inlinetextarea"},"InlineTextArea"),(0,esm.kt)("p",null,"Input styled to have underline follow the input and with word wrapping."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { SpaceVertical } from '../../../../'\nimport { InlineTextArea } from '../'\n\nexport default function Basic() {\n  return (\n    <SpaceVertical>\n      <InlineTextArea placeholder=\"Type here and keep typing to see multiple lines effect of this component it will wrap to a next line...\" />\n      <InlineTextArea value=\"Type here and keep typing to see multiple lines effect of this component it will wrap to a next line...\" />\n    </SpaceVertical>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"underlineonlyonhover"},"underlineOnlyOnHover"),(0,esm.kt)("p",null,"You can override the default underline styling, causing it to render only on hover by setting the ",(0,esm.kt)("inlineCode",{parentName:"p"},"underlineOnlyOnHover")," prop."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { InlineTextArea } from '../'\n\nexport default function Underline() {\n  return (\n    <InlineTextArea\n      underlineOnlyOnHover\n      value=\"Type here and keep typing to see multiple lines effect of this component it will wrap to a next line...\"\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"disabled"},"Disabled"),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { InlineTextArea } from '../'\n\nexport default function Disabled() {\n  return (\n    <InlineTextArea\n      disabled\n      value=\"This text can't be edited because the component is disabled...\"\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"readonly"},"ReadOnly"),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { InlineTextArea } from '../'\n\nexport default function Disabled() {\n  return <InlineTextArea readOnly value=\"READ ONLY...\" />\n}\n",mdxType:"Editor"}),(0,esm.kt)(dist_esm.ArgsTable,{of:src.InlineTextArea,exclude:defaultArgTypes.q,mdxType:"ArgsTable"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Docs/InlineTextArea",component:src.InlineTextArea,includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,esm.kt)(MDXContent,null)};const index_stories=componentMeta,__namedExportsOrder=["__page"]}}]);