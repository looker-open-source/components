"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[5218],{"./src/defaultArgTypes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>defaultArgTypes,q:()=>excludedProps});const defaultArgTypes={as:{table:{disable:!0}},forwardedAs:{table:{disable:!0}},ref:{table:{disable:!0}},theme:{table:{disable:!0}}},excludedProps=Object.keys(defaultArgTypes)},"../components/src/Form/Inputs/Select/stories/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>index_stories});__webpack_require__("../../node_modules/react/index.js");var esm=__webpack_require__("../../node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("../../node_modules/@storybook/addon-docs/dist/esm/index.js"),src=__webpack_require__("../components/src/index.ts"),Editor=__webpack_require__("./src/Editor/index.tsx"),defaultArgTypes=__webpack_require__("./src/defaultArgTypes.ts");try{Basic.displayName="Basic",Basic.__docgenInfo={description:"",displayName:"Basic",props:{autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},openOnClick:{defaultValue:{value:"true"},description:"If true, the popover opens when the text box is clicked.",name:"openOnClick",required:!1,type:{name:"boolean"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},isClearable:{defaultValue:null,description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},onFilter:{defaultValue:null,description:"Handle when the user types in the field,\nor the menu opens with a pre-populated value",name:"onFilter",required:!1,type:{name:"((term: string) => void)"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},isFilterable:{defaultValue:null,description:"The user can type in the input (default false to mimic traditional select tag)",name:"isFilterable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"Text to show when there are no available options",name:"noOptionsLabel",required:!1,type:{name:"string"}},showCreate:{defaultValue:null,description:"Add an on-the-fly option mirroring the typed text (use when isFilterable = true)\nWhen `true`, notInOptions is used to show/hide and can be included in a custom function",name:"showCreate",required:!1,type:{name:"boolean"}},formatCreateLabel:{defaultValue:null,description:"Format the label of the on-the-fly create option (use with canCreate)",name:"formatCreateLabel",required:!1,type:{name:"((inputText: string) => ReactNode)"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/Select/stories/Basic.tsx#Basic"]={docgenInfo:Basic.__docgenInfo,name:"Basic",path:"../components/src/Form/Inputs/Select/stories/Basic.tsx#Basic"})}catch(__react_docgen_typescript_loader_error){}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const layoutProps={};function MDXContent({components,...props}){return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(dist_esm.Meta,{component:src.Select,title:"Docs/Select",mdxType:"Meta"}),(0,esm.kt)("h1",{id:"select"},"Select"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"<Select />")," component renders a single menu on the page, with no accompanying label. It is generally used to construct higher-order components like the ",(0,esm.kt)("inlineCode",{parentName:"p"},"<FieldText />"),". If you are building a form, you probably want to use ",(0,esm.kt)("inlineCode",{parentName:"p"},"<FieldSelect />")," instead as it provides label and validation support.\nIt will render a range from 0 to 10, and select all possible values inbetween."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { Select } from '..'\nimport type { SelectProps } from '../'\n\nexport default function Basic(props: SelectProps) {\n  return (\n    <Select\n      {...props}\n      options={[\n        { label: 'Cheddar', value: 'cheddar' },\n        { label: 'Gouda', value: 'gouda' },\n        { label: 'Swiss', value: 'swiss' },\n      ]}\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"placeholder"},"Placeholder"),(0,esm.kt)("p",null,"Placeholders are used to give a hint to the user of the expected value for the input.\nTo allow the user to clear the ",(0,esm.kt)("inlineCode",{parentName:"p"},"Select"),"'s value, add the ",(0,esm.kt)("inlineCode",{parentName:"p"},"isClearable")," prop."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { Select } from '..'\n\nexport default function Placeholder() {\n  return (\n    <Select\n      placeholder=\"Select your cheese of choice...\"\n      options={[\n        { label: 'Cheddar', value: 'cheddar' },\n        { label: 'Gouda', value: 'gouda' },\n        { label: 'Swiss', value: 'swiss' },\n      ]}\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"description"},"Description"),(0,esm.kt)("p",null,"Options can have a ",(0,esm.kt)("inlineCode",{parentName:"p"},"description")," property."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { Select } from '..'\n\nexport default function Description() {\n  return (\n    <Select\n      maxWidth={400}\n      options={[\n        {\n          description: 'Popular in the US',\n          label: 'Cheddar',\n          value: 'cheddar',\n        },\n        { description: 'Dutch sheeps milk', label: 'Gouda', value: 'gouda' },\n        { description: 'Full of holes', label: 'Swiss', value: 'swiss' },\n      ]}\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"detail"},"Detail"),(0,esm.kt)("p",null,"Right aligned content in the option."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { Select } from '..'\n\nexport default function Detail() {\n  return (\n    <Select\n      maxWidth={400}\n      placeholder=\"Select food\"\n      options={[\n        { detail: 'Cheese', value: 'Gouda' },\n        { detail: 'Fruit', value: 'Apple' },\n      ]}\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"preface"},"Preface"),(0,esm.kt)("p",null,"Content rendered above the option label."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { Select } from '..'\n\nexport default function Preface() {\n  return (\n    <Select\n      maxWidth={400}\n      placeholder=\"Select a field\"\n      options={[\n        {\n          description: 'Cost to stock - not the price the customer paid',\n          label: 'Cost',\n          preface: 'Inventory items',\n          value: 'inventory_items.cost',\n        },\n        { label: 'Count', preface: 'Order Items', value: 'order_items.count' },\n        {\n          description: 'What the customer actually paid',\n          label: 'Sale Price',\n          preface: 'Order Items',\n          value: 'order_items.sale_price',\n        },\n        {\n          description: 'Base retail price',\n          label: 'Retail Price',\n          preface: 'Inventory Items',\n          value: 'inventory_items.retail_price',\n        },\n        {\n          label: 'Count',\n          preface: 'Inventory Items',\n          value: 'inventory_items.count',\n        },\n      ]}\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"validationtype-property"},"validationType Property"),(0,esm.kt)("p",null,"Use the validationType property to present a validation message."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { Select } from '..'\n\nexport default function Error() {\n  return (\n    <Select\n      options={[\n        { label: 'Cheddar', value: 'cheddar' },\n        { label: 'Gouda', value: 'gouda' },\n        { label: 'Swiss', value: 'swiss' },\n      ]}\n      validationType=\"error\"\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"disabled-property"},"Disabled Property"),(0,esm.kt)("p",null,"Use the disable property to make an input field uneditable."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { Select } from '..'\n\nexport default function Disabled() {\n  return (\n    <Select\n      disabled\n      options={[\n        { label: 'Cheddar', value: 'cheddar' },\n        { label: 'Gouda', value: 'gouda' },\n        { label: 'Swiss', value: 'swiss' },\n      ]}\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"icons"},"Icons"),(0,esm.kt)("p",null,"Define an icon for each option that will display in the list to the left of the option label as well as in the\ninput when the option is selected. Use icons from our ",(0,esm.kt)("a",{parentName:"p",href:"/?path=/docs/docs-icon--docs"},"list")," or custom JSX."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport * as MaterialIcons from '@styled-icons/material'\nimport { Select } from '..'\nimport { Space } from '../../../../Layout'\n\nexport default function Icons() {\n  return (\n    <Space>\n      <Select\n        placeholder=\"Select a visualization\"\n        options={[\n          {\n            icon: <MaterialIcons.BarChart />,\n            label: 'Column',\n            value: 'column',\n          },\n          { icon: <MaterialIcons.ShowChart />, label: 'Line', value: 'line' },\n          { icon: <MaterialIcons.Map />, label: 'Map', value: 'map' },\n          { icon: <MaterialIcons.PieChart />, label: 'Pie', value: 'pie' },\n          {\n            icon: <MaterialIcons.TableChart />,\n            label: 'Table',\n            value: 'table',\n          },\n        ]}\n      />\n      <Select\n        placeholder=\"Custom Icons\"\n        options={[\n          {\n            icon: (\n              <svg\n                viewBox=\"0 0 24 24\"\n                width=\"20px\"\n                height=\"20px\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM13 17H11V15H13V17ZM13 13H11V7H13V13Z\"\n                  fill=\"#7FFFD4\"\n                />\n              </svg>\n            ),\n            label: 'Aqua',\n            value: 'Aqua',\n          },\n          {\n            icon: (\n              <svg\n                viewBox=\"0 0 24 24\"\n                width=\"20px\"\n                height=\"20px\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  d=\"M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM13 17H11V15H13V17ZM13 13H11V7H13V13Z\"\n                  fill=\"#ff00e6\"\n                />\n              </svg>\n            ),\n            label: 'Pink',\n            value: 'Pink',\n          },\n        ]}\n      />\n    </Space>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"isloading"},"isLoading"),(0,esm.kt)("p",null,"Indicates that options are currently being loaded."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { Select } from '..'\n\nexport default function Loading() {\n  return <Select maxWidth={400} placeholder=\"Loading options\" isLoading />\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"filtering"},"Filtering"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"isFilterable")," option allows the user to type in the input, triggering the ",(0,esm.kt)("inlineCode",{parentName:"p"},"onFilter")," callback,\nwhich should be used to narrow the options passed to the ",(0,esm.kt)("inlineCode",{parentName:"p"},"Select"),". Use the ",(0,esm.kt)("inlineCode",{parentName:"p"},"isClearable")," prop to allow\nthe user to delete the current value."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React, { useState, useMemo } from 'react'\nimport { Select } from '..'\n\nexport default function Filtering() {\n  const [value, setValue] = useState<string>()\n  const [searchTerm, setSearchTerm] = useState('')\n\n  function handleChange(value: string) {\n    setValue(value)\n  }\n  function handleFilter(term: string) {\n    setSearchTerm(term)\n  }\n\n  const newOptions = useMemo(() => {\n    const options = [\n      { label: 'Apples', value: '1' },\n      { label: 'Bananas', value: '2' },\n      { label: 'Oranges', value: '3' },\n      { label: 'Pineapples', value: '4' },\n      { label: 'Kiwis', value: '5' },\n    ]\n    if (searchTerm === '') return options\n    return options.filter(option => {\n      return option.label.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1\n    })\n  }, [searchTerm])\n\n  return (\n    <Select\n      maxWidth={400}\n      options={newOptions}\n      aria-label=\"Fruits\"\n      placeholder=\"Controlled, searchable, clearable\"\n      isClearable\n      isFilterable\n      value={value}\n      onChange={handleChange}\n      onFilter={handleFilter}\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"showcreate"},"showCreate"),(0,esm.kt)("p",null,"When ",(0,esm.kt)("inlineCode",{parentName:"p"},"isFilterable")," is true, use the ",(0,esm.kt)("inlineCode",{parentName:"p"},"showCreate")," prop along with the ",(0,esm.kt)("inlineCode",{parentName:"p"},"formatCreateLabel")," (defaults to ",(0,esm.kt)("inlineCode",{parentName:"p"},"'Create \"${input value}\"'"),")\nto allow the user to enter a value not found in the options."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React, { useState, useMemo } from 'react'\nimport { Select } from '..'\n\nexport default function ShowCreate() {\n  const [value, setValue] = useState<string>()\n  const [searchTerm, setSearchTerm] = useState('')\n\n  const newOptions = useMemo(() => {\n    const options = [\n      { value: 'Apples' },\n      { value: 'Bananas' },\n      { value: 'Oranges' },\n      { value: 'Pineapples' },\n      { value: 'Kiwis' },\n    ]\n    if (searchTerm === '') return options\n    return options.filter(option => {\n      return option.value.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1\n    })\n  }, [searchTerm])\n\n  function formatCreateLabel(inputValue: string) {\n    return `Add new fruit: ${inputValue}`\n  }\n\n  return (\n    <Select\n      maxWidth={400}\n      options={newOptions}\n      aria-label=\"Fruits\"\n      placeholder=\"Controlled, searchable, creatable\"\n      isFilterable\n      value={value}\n      onChange={setValue}\n      onFilter={setSearchTerm}\n      showCreate\n      formatCreateLabel={formatCreateLabel}\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"groups"},"Groups"),(0,esm.kt)("p",null,"Options can be organized into groups, with an optional ",(0,esm.kt)("inlineCode",{parentName:"p"},"label"),"."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { Select } from '..'\n\nexport default function Groups() {\n  return (\n    <Select\n      maxWidth={400}\n      options={[\n        {\n          label: 'CHEESES',\n          options: [\n            { label: 'Cheddar', value: 'cheddar' },\n            { label: 'Gouda', value: 'gouda' },\n            { label: 'Swiss', value: 'swiss' },\n          ],\n        },\n        {\n          label: 'FRUITS',\n          options: [\n            { label: 'Grapes', value: 'grape' },\n            { label: 'Apples', value: 'apple' },\n            { label: 'Strawberries', value: 'strawberries' },\n          ],\n        },\n        {\n          options: [\n            { label: 'Pizza', value: 'pizza' },\n            { label: 'Hamburgers', value: 'hamburgers' },\n          ],\n        },\n      ]}\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"scrollintoview-for-improved-ux-on-a-long-list-of-options"},"scrollIntoView for improved UX on a long list of options"),(0,esm.kt)("p",null,"If you're rendering a long list which scrolls beyond the max-height of the list, you can leverage the ",(0,esm.kt)("inlineCode",{parentName:"p"},"scrollIntoView")," option property to focus the list to a helpful scroll position. Using ",(0,esm.kt)("inlineCode",{parentName:"p"},"scrollIntoView")," will also highlight the option, so that keyboard navigation will start from there as well."),(0,esm.kt)("p",null,"When you open the following list, ",(0,esm.kt)("inlineCode",{parentName:"p"},"Mascarpone")," will be highlighted and visible at the bottom of the menu:"),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { Select } from '..'\n\nexport default function ScrollIntoView() {\n  return (\n    <Select\n      maxWidth={400}\n      placeholder=\"Select your cheese of choice...\"\n      options={[\n        { label: 'Cheddar', value: 'cheddar' },\n        { label: 'Gouda', value: 'gouda' },\n        { label: 'Swiss', value: 'swiss' },\n        { label: 'String', value: 'string' },\n        { label: 'Parmigiano Reggiano', value: 'parmesan' },\n        { label: 'Roquefort', value: 'roquefort' },\n        { label: 'Brie', value: 'brie' },\n        { label: 'Gruyere', value: 'gruyere' },\n        { label: 'Feta', value: 'feta' },\n        { label: 'Mozzarella', value: 'mozzarella' },\n        { label: 'Manchego', value: 'manchego' },\n        { label: 'Gorgonzola', value: 'gorgonzola' },\n        { label: 'Epoisses', value: 'epoisses' },\n        { label: 'Monterey Jack', value: 'monterey-jack' },\n        { label: 'Muenster', value: 'muenster' },\n        { label: 'Provolone', value: 'provolone' },\n        { label: 'Blue', value: 'blue' },\n        { label: 'Camembert', value: 'camembert' },\n        { label: 'Havarti', value: 'havarti' },\n        { label: 'Ricotta', value: 'ricotta' },\n        { label: 'Mascarpone', scrollIntoView: true, value: 'mascarpone' },\n      ]}\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"windowing"},"Windowing"),(0,esm.kt)("p",null,'Another feature for long lists. Because rendering hundreds of options results in poor performance,\nif there are 100 or more options, the option list will be "windowed", (a.k.a. "virtualized") and only the\noptions visibile in the scroll area will be rendered, plus a buffer of 5 above and below. The ',(0,esm.kt)("inlineCode",{parentName:"p"},"windowing"),"\nprop can be used to override this â€“ either by setting it to ",(0,esm.kt)("inlineCode",{parentName:"p"},"true")," for under 100 or ",(0,esm.kt)("inlineCode",{parentName:"p"},"false")," for over 100."),(0,esm.kt)("p",null,"To observe the performance impact, add ",(0,esm.kt)("inlineCode",{parentName:"p"},"windowing={false}")," after ",(0,esm.kt)("inlineCode",{parentName:"p"},"options={options1k}")," below:"),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { Select } from '..'\n\nexport default function Windowing() {\n  const options1k = Array.from(Array(1000), (_, index) => ({\n    value: `${index}`,\n  }))\n  return (\n    <Select\n      maxWidth={400}\n      placeholder=\"So many options...\"\n      options={options1k}\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"list-layout"},"List Layout"),(0,esm.kt)("p",null,"Use the ",(0,esm.kt)("inlineCode",{parentName:"p"},"listLayout")," prop to control layout properties of the list,\nlike width and height, separately from the input."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { Select } from '..'\nimport { Space } from '../../../../Layout'\n\nexport default function ListLayout() {\n  return (\n    <Space>\n      <Select\n        maxWidth={400}\n        listLayout={{ width: 'auto' }}\n        placeholder=\"Accommodate wide options\"\n        options={[\n          {\n            label: 'Short label',\n            value: 'short',\n          },\n          {\n            label:\n              'Incredibly long label that causes the list to be wider than the input',\n            value: 'long',\n          },\n        ]}\n      />\n      <Select\n        maxWidth={400}\n        listLayout={{ maxHeight: 300, maxWidth: 700, width: '90vw' }}\n        options={[\n          { label: 'Cheddar', value: 'cheddar' },\n          { label: 'Gouda', value: 'gouda' },\n          { label: 'Swiss', value: 'swiss' },\n          { label: 'String', value: 'string' },\n          { label: 'Parmigiano Reggiano', value: 'parmesan' },\n          { label: 'Roquefort', value: 'roquefort' },\n          { label: 'Brie', value: 'brie' },\n          { label: 'Gruyere', value: 'gruyere' },\n          { label: 'Feta', value: 'feta' },\n          { label: 'Mozzarella', value: 'mozzarella' },\n          { label: 'Manchego', value: 'manchego' },\n          { label: 'Gorgonzola', value: 'gorgonzola' },\n          { label: 'Epoisses', value: 'epoisses' },\n          { label: 'Monterey Jack', value: 'monterey-jack' },\n          { label: 'Muenster', value: 'muenster' },\n          { label: 'Provolone', value: 'provolone' },\n          { label: 'Blue', value: 'blue' },\n          { label: 'Camembert', value: 'camembert' },\n          { label: 'Havarti', value: 'havarti' },\n          { label: 'Ricotta', value: 'ricotta' },\n          { label: 'Mascarpone', value: 'mascarpone' },\n        ]}\n      />\n    </Space>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"autoresize"},"autoResize"),(0,esm.kt)("p",null,"Use the ",(0,esm.kt)("inlineCode",{parentName:"p"},"autoResize")," prop to allow the width of the component to adjust to the current value or placeholder, which is useful\nwhen the ",(0,esm.kt)("inlineCode",{parentName:"p"},"Select")," is meant to be rendered inline and horizontal space is at a premium.\nThe container will default to ",(0,esm.kt)("inlineCode",{parentName:"p"},"display: inline-flex")," and both the container and list will default to ",(0,esm.kt)("inlineCode",{parentName:"p"},"width: auto"),"."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { Select } from '..'\n\nexport default function AutoResize() {\n  return (\n    <Select\n      autoResize\n      placeholder=\"Width adjusts to current value\"\n      options={[\n        {\n          label: 'Short label',\n          value: 'short',\n        },\n        {\n          label: 'Very long label that widens the input considerably',\n          value: 'long',\n        },\n      ]}\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"props"},"Props"),(0,esm.kt)(dist_esm.ArgsTable,{of:src.Select,exclude:defaultArgTypes.q,mdxType:"ArgsTable"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Docs/Select",component:src.Select,includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,esm.kt)(MDXContent,null)};const index_stories=componentMeta,__namedExportsOrder=["__page"]}}]);