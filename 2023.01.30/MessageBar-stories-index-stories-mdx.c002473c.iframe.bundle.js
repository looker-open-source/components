"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[4820],{"./src/defaultArgTypes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>defaultArgTypes,q:()=>excludedProps});const defaultArgTypes={as:{table:{disable:!0}},forwardedAs:{table:{disable:!0}},ref:{table:{disable:!0}},theme:{table:{disable:!0}}},excludedProps=Object.keys(defaultArgTypes)},"../components/src/MessageBar/stories/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>index_stories});__webpack_require__("../../node_modules/react/index.js");var esm=__webpack_require__("../../node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("../../node_modules/@storybook/addon-docs/dist/esm/index.js"),MessageBar=__webpack_require__("../components/src/MessageBar/MessageBar.tsx"),Editor=__webpack_require__("./src/Editor/index.tsx"),defaultArgTypes=__webpack_require__("./src/defaultArgTypes.ts");try{Basic.displayName="Basic",Basic.__docgenInfo={description:"",displayName:"Basic",props:{intent:{defaultValue:{value:": 'inform'"},description:"Determines the icon choice and background color",name:"intent",required:!1,type:{name:"enum",value:[{value:'"critical"'},{value:'"warn"'},{value:'"positive"'},{value:'"inform"'}]}},visible:{defaultValue:{value:": true"},description:"Determines whether the MessageBar is rendered or not.",name:"visible",required:!1,type:{name:"boolean"}},primaryAction:{defaultValue:{value:"true (which renders IconButton)"},description:"Polymorphic prop defines the primary action button to render.",name:"primaryAction",required:!1,type:{name:"SupportedActionTypes"}},secondaryAction:{defaultValue:null,description:"Polymorphic prop defines the secondary action button to render.",name:"secondaryAction",required:!1,type:{name:"SupportedActionTypes"}},onPrimaryClick:{defaultValue:{value:"noop"},description:"Callback fires when primaryAction is clicked",name:"onPrimaryClick",required:!1,type:{name:"(() => void)"}},onSecondaryClick:{defaultValue:{value:"noop"},description:"Callback fires when secondaryAction is clicked",name:"onSecondaryClick",required:!1,type:{name:"(() => void)"}},noActions:{defaultValue:{value:"false"},description:"Hide action buttons altogether",name:"noActions",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/MessageBar/stories/Basic.tsx#Basic"]={docgenInfo:Basic.__docgenInfo,name:"Basic",path:"../components/src/MessageBar/stories/Basic.tsx#Basic"})}catch(__react_docgen_typescript_loader_error){}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const layoutProps={};function MDXContent({components,...props}){return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(dist_esm.Meta,{component:MessageBar.c,title:"Docs/MessageBar",mdxType:"Meta"}),(0,esm.kt)("h1",{id:"messagebar"},"MessageBar"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"<MessageBar />")," component is used to alert the user with ",(0,esm.kt)("inlineCode",{parentName:"p"},"warn"),", ",(0,esm.kt)("inlineCode",{parentName:"p"},"critical"),", ",(0,esm.kt)("inlineCode",{parentName:"p"},"inform"),", or ",(0,esm.kt)("inlineCode",{parentName:"p"},"positive")," messages, settable via the ",(0,esm.kt)("inlineCode",{parentName:"p"},"intent")," property. If no intent is set, it will fall back to ",(0,esm.kt)("inlineCode",{parentName:"p"},"inform")," by default."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { MessageBar } from '../..'\nimport type { MessageBarProps } from '../MessageBar'\n\nexport default function Basic(props: MessageBarProps) {\n  const { children = 'Hey! This is a message to you.', ...rest } = props\n\n  return <MessageBar {...rest}>{children}</MessageBar>\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"intent"},"Intent"),(0,esm.kt)("p",null,"MessageBar ",(0,esm.kt)("inlineCode",{parentName:"p"},"intent")," is specified as a design token with a semantic meaning. The values can be one of ",(0,esm.kt)("inlineCode",{parentName:"p"},"critical"),", ",(0,esm.kt)("inlineCode",{parentName:"p"},"inform"),", ",(0,esm.kt)("inlineCode",{parentName:"p"},"positive"),", ",(0,esm.kt)("inlineCode",{parentName:"p"},"warn"),"."),(0,esm.kt)(Editor.Editor,{code:'/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from \'react\'\nimport { MessageBar, Space } from \'../..\'\n\nexport default function Intent() {\n  return (\n    <Space around>\n      <MessageBar intent="critical">Key</MessageBar>\n      <MessageBar intent="inform">Positive</MessageBar>\n      <MessageBar intent="positive">Inform</MessageBar>\n      <MessageBar intent="warn">Neutral</MessageBar>\n    </Space>\n  )\n}\n',mdxType:"Editor"}),(0,esm.kt)("h3",{id:"non-clearable-messagebar"},"Non-clearable MessageBar"),(0,esm.kt)("p",null,"If you don't want the MessageBar to be clearable, you can hide all action buttons with the ",(0,esm.kt)("inlineCode",{parentName:"p"},"noActions")," prop."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { MessageBar } from '../..'\n\nexport default function NoAction() {\n  return <MessageBar noActions>I can't be closed</MessageBar>\n}\n",mdxType:"Editor"}),(0,esm.kt)("h3",{id:"customizing-the-action-buttons"},"Customizing the action buttons"),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"MessageBar")," allows you to pass your own custom buttons in place of the standard dismiss button. "),(0,esm.kt)("p",null,"The relevant props for modifying button labels and actions are as follows:"),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"primaryAction"),": string or ReactElement"),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"onPrimaryClick"),": () => void"),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"secondaryAction"),": string or ReactElement"),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"onSecondaryClick"),": () => void")),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { MessageBar } from '../..'\n\nexport default function CustomAction() {\n  return (\n    <MessageBar\n      primaryAction=\"Primary Action\"\n      onPrimaryClick={() => alert('Primary Action')}\n      secondaryAction=\"Secondary Action\"\n      onSecondaryClick={() => alert('Secondary Action')}\n    >\n      Render some custom action labels and actions!\n    </MessageBar>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h3",{id:"rendering-custom-components"},"Rendering custom components"),(0,esm.kt)("p",null,"This is not the recommended happy path for using MessageBar, but it is available if you run into an edge case that is not supported by customizing the string label and click callbacks. Just keep in mind that if you decide to render custom components you will be responsible for allowing the MessageBar to be cleared."),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-jsx"},';() => {\n  const [visible, setVisible] = useState(true)\n  const handlePrimaryClick = () => {\n    alert(\'Primary Action\')\n    setVisible(false)\n  }\n  const handleSecondaryClick = () => {\n    alert(\'Secondary Action\')\n    setVisible(false)\n  }\n  return (\n    <MessageBar\n      primaryAction={\n        <IconButton\n          icon={<Favorite />}\n          label="Add to Favorites"\n          onClick={handlePrimaryClick}\n          color="key"\n        />\n      }\n      secondaryAction={\n        <IconButton\n          onClick={handleSecondaryClick}\n          color="neutral"\n          icon={<Settings />}\n          label="Settings"\n          color="neutral"\n        />\n      }\n      visible={visible}\n    >\n      Render some custom action components!\n    </MessageBar>\n  )\n}\n')),(0,esm.kt)("h2",{id:"controlled-component-pattern"},"Controlled Component Pattern"),(0,esm.kt)("p",null,"To control MessageBar renderin externally, use ",(0,esm.kt)("inlineCode",{parentName:"p"},"onPrimaryAction")," in conjunction with the ",(0,esm.kt)("inlineCode",{parentName:"p"},"visible")," boolean prop. This can be useful if you wish to provide an Undo or other complex workflows."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { MessageBar, ButtonOutline } from '../..'\nimport { useToggle } from '../../utils'\n\nexport default function Controlled() {\n  const { value, setOff, setOn } = useToggle(true)\n\n  return (\n    <>\n      <MessageBar intent=\"warn\" onPrimaryClick={setOff} visible={value}>\n        I can be closed and reopened\n      </MessageBar>\n      {!value && (\n        <ButtonOutline m=\"u4\" onClick={setOn}>\n          Show MessageBar\n        </ButtonOutline>\n      )}\n    </>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"props"},"Props"),(0,esm.kt)(dist_esm.ArgsTable,{of:MessageBar.c,exclude:defaultArgTypes.q,mdxType:"ArgsTable"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Docs/MessageBar",component:MessageBar.c,includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,esm.kt)(MDXContent,null)};const index_stories=componentMeta,__namedExportsOrder=["__page"]}}]);