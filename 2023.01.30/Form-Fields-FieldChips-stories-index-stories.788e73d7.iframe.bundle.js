"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[162],{"../components/src/Form/Fields/FieldChips/stories/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AutoResize:()=>AutoResize,Basic:()=>Basic,Controlled:()=>Controlled,Description:()=>Description,Detail:()=>Detail,FloatingLabel:()=>FloatingLabel,Overflow:()=>Overflow,Truncate:()=>Truncate,Validation:()=>Validation,__namedExportsOrder:()=>__namedExportsOrder,default:()=>index_stories});var defaultArgTypes=__webpack_require__("./src/defaultArgTypes.ts"),FieldChips=__webpack_require__("../components/src/Form/Fields/FieldChips/FieldChips.tsx"),esm_extends=__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"),react=__webpack_require__("../../node_modules/react/index.js");function Basic(props){const[values,setValues]=(0,react.useState)(["apples"]);return react.createElement(FieldChips.H,(0,esm_extends.Z)({},props,{values,onChange:setValues}))}try{Basic.displayName="Basic",Basic.__docgenInfo={description:"",displayName:"Basic",props:{id:{defaultValue:null,description:"Id of the input element to match a label to.",name:"id",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Defines the label for the field.\nI18n recommended: content that is user visible should be treated for i18n",name:"label",required:!1,type:{name:"ReactNode"}},required:{defaultValue:null,description:"Whether or not the field should display a `*` denoting it is required.",name:"required",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},autoResize:{defaultValue:null,description:"Allows Field to adjust to the width of the input (InputText and Select)",name:"autoResize",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},detail:{defaultValue:null,description:"notes and details added to the top right corner of the field\nI18n recommended: content that is user visible should be treated for i18n",name:"detail",required:!1,type:{name:"ReactNode"}},description:{defaultValue:null,description:"notes and more info added to the bottom of the field\nI18n recommended: content that is user visible should be treated for i18n",name:"description",required:!1,type:{name:"ReactNode"}},inline:{defaultValue:{value:"false"},description:"Determines where to place the label in relation to the input.",name:"inline",required:!1,type:{name:"boolean"}},validationMessage:{defaultValue:null,description:"Holds the type of validation (error, warning, etc.) and corresponding message.",name:"validationMessage",required:!1,type:{name:"ValidationMessageProps"}},hideLabel:{defaultValue:{value:"false"},description:"Label will be visually hidden",name:"hideLabel",required:!1,type:{name:"boolean"}},ariaLabelOnly:{defaultValue:null,description:"Apply label using aria-label, there will be no visible label in the UI",name:"ariaLabelOnly",required:!1,type:{name:"boolean"}},externalLabel:{defaultValue:{value:"false"},description:"External label placement above the field",name:"externalLabel",required:!1,type:{name:"boolean"}},parseInputValue:{defaultValue:null,description:"How to convert a typed or pasted string into an array of values",name:"parseInputValue",required:!1,type:{name:"((value: string) => string[])"}},summary:{defaultValue:null,description:"",name:"summary",required:!1,type:{name:"string"}},type:{defaultValue:{value:"text"},description:"",name:"type",required:!1,type:{name:"enum",value:[{value:'"number"'},{value:'"text"'},{value:'"search"'},{value:'"tel"'},{value:'"url"'},{value:'"email"'},{value:'"month"'},{value:'"password"'},{value:'"week"'}]}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},"data-autofocus":{defaultValue:null,description:"",name:"data-autofocus",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"",name:"data-testid",required:!1,type:{name:"string"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:null,description:"",name:"isClearable",required:!1,type:{name:"boolean"}},chipIconLabel:{defaultValue:{value:"Delete"},description:"customize the tooltip on the closing icon",name:"chipIconLabel",required:!1,type:{name:"string"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the closing icon",name:"clearIconLabel",required:!1,type:{name:"string"}},removeOnBackspace:{defaultValue:{value:"true"},description:"Set to false to disable the removal of the last value on backspace key",name:"removeOnBackspace",required:!1,type:{name:"boolean"}},formatChip:{defaultValue:null,description:"Format the value for display in the chip",name:"formatChip",required:!1,type:{name:"((value: string) => string)"}},inputReadOnly:{defaultValue:null,description:"",name:"inputReadOnly",required:!1,type:{name:"boolean"}},values:{defaultValue:null,description:"InputChips is a controlled component since unlike native inputs,\nyou can't easily access the current value via dom API",name:"values",required:!0,type:{name:"string[]"}},onChange:{defaultValue:null,description:"InputChips is a controlled component since unlike native inputs,\nyou can't easily access the current value via dom API",name:"onChange",required:!0,type:{name:"(values: string[]) => void"}},formatTextToCopy:{defaultValue:null,description:"When the user selects and copies chips, what should the text be",name:"formatTextToCopy",required:!1,type:{name:"((values: string[]) => string)"}},onClear:{defaultValue:null,description:"",name:"onClear",required:!1,type:{name:"(() => void)"}},inputValue:{defaultValue:null,description:"for controlling the input text",name:"inputValue",required:!1,type:{name:"string"}},onInputChange:{defaultValue:null,description:"Called when the input text changes (use with inputValue to control the input text).\nPasses the event if triggered by typing but not when triggered by value tokenization or clearing the field.",name:"onInputChange",required:!1,type:{name:"((value: string, event?: FormEvent<HTMLInputElement>) => void)"}},isVisibleOptions:{defaultValue:null,description:"",name:"isVisibleOptions",required:!1,type:{name:"boolean"}},showCaret:{defaultValue:null,description:"",name:"showCaret",required:!1,type:{name:"boolean"}},validate:{defaultValue:null,description:"for checking each value before converting to a chip",name:"validate",required:!1,type:{name:"((value: string) => boolean)"}},formatInputValue:{defaultValue:null,description:"Callback to format each value entered, before validation.\nDefaults to `value.trim()`, set to `false` to avoid trimming whitespace.",name:"formatInputValue",required:!1,type:{name:"FormatInputValue"}},onValidationFail:{defaultValue:null,description:"callback when values fail validation",name:"onValidationFail",required:!1,type:{name:"((values: string[]) => void)"}},onDuplicate:{defaultValue:null,description:"callback when values are duplicates",name:"onDuplicate",required:!1,type:{name:"((values: string[]) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Fields/FieldChips/stories/Basic.tsx#Basic"]={docgenInfo:Basic.__docgenInfo,name:"Basic",path:"../components/src/Form/Fields/FieldChips/stories/Basic.tsx#Basic"})}catch(__react_docgen_typescript_loader_error){}function FloatingLabel(){const[values,setValues]=(0,react.useState)(["apples"]);return react.createElement(FieldChips.H,{externalLabel:!1,label:"Floating Label",values,onChange:setValues})}function Truncate(){const[values,setValues]=(0,react.useState)(["A very long token that will truncate"]);return react.createElement(FieldChips.H,{label:"Truncate",values,onChange:setValues,width:250})}function Overflow(){const[values,setValues]=(0,react.useState)(["California","Wyoming","Nevada","Wisconsin","Mississippi","Missouri","New York","New Jersey"]);return react.createElement(FieldChips.H,{label:"Overflow",values,onChange:setValues,width:200,maxHeight:145})}function AutoResize(){const[values,setValues]=(0,react.useState)(["apples"]);return react.createElement(FieldChips.H,{label:"Auto Resize",placeholder:"Auto Resize",values,onChange:setValues,maxWidth:"50vw",autoResize:!0})}function Description(){const[values,setValues]=(0,react.useState)(["apples"]);return react.createElement(FieldChips.H,{description:"A nice description",values,onChange:setValues})}function Detail(){const[values,setValues]=(0,react.useState)(["apples"]);return react.createElement(FieldChips.H,{detail:"Detail...",values,onChange:setValues})}function Validation(){const[values,setValues]=(0,react.useState)(["apples"]);return react.createElement(FieldChips.H,{values,onChange:setValues,validationMessage:{message:"This is an error",type:"error"}})}function Controlled(){const[values,setValues]=(0,react.useState)(["bananas"]),[inputValue,setInputValue]=(0,react.useState)("oranges");return react.createElement(FieldChips.H,{values,inputValue,onChange:vals=>setValues(vals),onInputChange:value=>setInputValue(value),summary:"summary"})}const index_stories={argTypes:defaultArgTypes.W,component:FieldChips.H,parameters:{storyshots:{disable:!0}},title:"Stories/FieldChips"},__namedExportsOrder=["Basic","FloatingLabel","Truncate","Overflow","AutoResize","Description","Detail","Validation","Controlled"];try{indexstories.displayName="indexstories",indexstories.__docgenInfo={description:"",displayName:"indexstories",props:{id:{defaultValue:null,description:"Id of the input element to match a label to.",name:"id",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Defines the label for the field.\nI18n recommended: content that is user visible should be treated for i18n",name:"label",required:!1,type:{name:"ReactNode"}},required:{defaultValue:null,description:"Whether or not the field should display a `*` denoting it is required.",name:"required",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},autoResize:{defaultValue:null,description:"Allows Field to adjust to the width of the input (InputText and Select)",name:"autoResize",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},detail:{defaultValue:null,description:"notes and details added to the top right corner of the field\nI18n recommended: content that is user visible should be treated for i18n",name:"detail",required:!1,type:{name:"ReactNode"}},description:{defaultValue:null,description:"notes and more info added to the bottom of the field\nI18n recommended: content that is user visible should be treated for i18n",name:"description",required:!1,type:{name:"ReactNode"}},inline:{defaultValue:{value:"false"},description:"Determines where to place the label in relation to the input.",name:"inline",required:!1,type:{name:"boolean"}},validationMessage:{defaultValue:null,description:"Holds the type of validation (error, warning, etc.) and corresponding message.",name:"validationMessage",required:!1,type:{name:"ValidationMessageProps"}},hideLabel:{defaultValue:{value:"false"},description:"Label will be visually hidden",name:"hideLabel",required:!1,type:{name:"boolean"}},ariaLabelOnly:{defaultValue:null,description:"Apply label using aria-label, there will be no visible label in the UI",name:"ariaLabelOnly",required:!1,type:{name:"boolean"}},externalLabel:{defaultValue:{value:"false"},description:"External label placement above the field",name:"externalLabel",required:!1,type:{name:"boolean"}},parseInputValue:{defaultValue:null,description:"How to convert a typed or pasted string into an array of values",name:"parseInputValue",required:!1,type:{name:"((value: string) => string[])"}},summary:{defaultValue:null,description:"",name:"summary",required:!1,type:{name:"string"}},type:{defaultValue:{value:"text"},description:"",name:"type",required:!1,type:{name:"enum",value:[{value:'"number"'},{value:'"text"'},{value:'"search"'},{value:'"tel"'},{value:'"url"'},{value:'"email"'},{value:'"month"'},{value:'"password"'},{value:'"week"'}]}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},"data-autofocus":{defaultValue:null,description:"",name:"data-autofocus",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"",name:"data-testid",required:!1,type:{name:"string"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:null,description:"",name:"isClearable",required:!1,type:{name:"boolean"}},chipIconLabel:{defaultValue:{value:"Delete"},description:"customize the tooltip on the closing icon",name:"chipIconLabel",required:!1,type:{name:"string"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the closing icon",name:"clearIconLabel",required:!1,type:{name:"string"}},removeOnBackspace:{defaultValue:{value:"true"},description:"Set to false to disable the removal of the last value on backspace key",name:"removeOnBackspace",required:!1,type:{name:"boolean"}},formatChip:{defaultValue:null,description:"Format the value for display in the chip",name:"formatChip",required:!1,type:{name:"((value: string) => string)"}},inputReadOnly:{defaultValue:null,description:"",name:"inputReadOnly",required:!1,type:{name:"boolean"}},values:{defaultValue:null,description:"InputChips is a controlled component since unlike native inputs,\nyou can't easily access the current value via dom API",name:"values",required:!0,type:{name:"string[]"}},onChange:{defaultValue:null,description:"InputChips is a controlled component since unlike native inputs,\nyou can't easily access the current value via dom API",name:"onChange",required:!0,type:{name:"(values: string[]) => void"}},formatTextToCopy:{defaultValue:null,description:"When the user selects and copies chips, what should the text be",name:"formatTextToCopy",required:!1,type:{name:"((values: string[]) => string)"}},onClear:{defaultValue:null,description:"",name:"onClear",required:!1,type:{name:"(() => void)"}},inputValue:{defaultValue:null,description:"for controlling the input text",name:"inputValue",required:!1,type:{name:"string"}},onInputChange:{defaultValue:null,description:"Called when the input text changes (use with inputValue to control the input text).\nPasses the event if triggered by typing but not when triggered by value tokenization or clearing the field.",name:"onInputChange",required:!1,type:{name:"((value: string, event?: FormEvent<HTMLInputElement>) => void)"}},isVisibleOptions:{defaultValue:null,description:"",name:"isVisibleOptions",required:!1,type:{name:"boolean"}},showCaret:{defaultValue:null,description:"",name:"showCaret",required:!1,type:{name:"boolean"}},validate:{defaultValue:null,description:"for checking each value before converting to a chip",name:"validate",required:!1,type:{name:"((value: string) => boolean)"}},formatInputValue:{defaultValue:null,description:"Callback to format each value entered, before validation.\nDefaults to `value.trim()`, set to `false` to avoid trimming whitespace.",name:"formatInputValue",required:!1,type:{name:"FormatInputValue"}},onValidationFail:{defaultValue:null,description:"callback when values fail validation",name:"onValidationFail",required:!1,type:{name:"((values: string[]) => void)"}},onDuplicate:{defaultValue:null,description:"callback when values are duplicates",name:"onDuplicate",required:!1,type:{name:"((values: string[]) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Fields/FieldChips/stories/index.stories.tsx#indexstories"]={docgenInfo:indexstories.__docgenInfo,name:"indexstories",path:"../components/src/Form/Fields/FieldChips/stories/index.stories.tsx#indexstories"})}catch(__react_docgen_typescript_loader_error){}},"./src/defaultArgTypes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>defaultArgTypes,q:()=>excludedProps});const defaultArgTypes={as:{table:{disable:!0}},forwardedAs:{table:{disable:!0}},ref:{table:{disable:!0}},theme:{table:{disable:!0}}},excludedProps=Object.keys(defaultArgTypes)}}]);