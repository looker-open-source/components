{"version":3,"file":"main.d0b332f7.iframe.bundle.js","mappings":";AAQA;AACA;ACPA;;AC+CA;;;;;;AAQA;;;;;;AAaA","sources":["webpack://@looker/storybook/./src/Decorator.tsx","webpack://@looker/storybook/./src/decorators.ts","webpack://@looker/storybook/./src/Editor/index.tsx"],"sourcesContent":["import type { Story } from '@storybook/react'\nimport { ComponentsProvider } from '@looker/components-providers'\nimport { theme } from '@looker/design-tokens'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { getLocaleProps } from './getLocaleProps'\n\nconst Style = styled.div`\n  font-size: ${() => theme.fontSizes.medium};\n  line-height: ${() => theme.lineHeights.medium};\n`\n\nexport const Decorator = (StoryComponent: Story, context: any) => (\n  <ComponentsProvider theme={theme} {...getLocaleProps(context)}>\n    <Style>\n      <StoryComponent />\n    </Style>\n  </ComponentsProvider>\n)\n","import { Decorator } from './Decorator'\n\nexport const decorators = [Decorator]\n","import type { LiveProviderProps } from 'react-live'\nimport theme from 'prism-react-renderer/themes/synthwave84'\nimport React from 'react'\nimport { LiveEditor, LiveError, LivePreview, LiveProvider } from 'react-live'\nimport styled from 'styled-components'\nimport { transform } from 'sucrase'\nimport { transformCodeForDisplay } from './transformCodeForDisplay'\nimport { scope } from '../scope'\n\nfunction transformCode(code: string = '') {\n  try {\n    // We reuse display transformations because many of them aren't compatible\n    // with ReactLive either.\n    code = transformCodeForDisplay(code)\n\n    // The keyword export is a syntax error in ReactLive.\n    code = code.replace(/export default /, 'const Default____Component = ')\n\n    // ReactLive uses Sucrase, but does not enable the TypeScript transform. In\n    // order to get our TS code to parse we must pre-parse TypeScript. If we do\n    // not double-parse JSX, then it is a syntax error for Sucrase. ReactLive\n    // has no plans to support TS either.\n    //\n    // See: https://github.com/FormidableLabs/react-live/issues/8.\n    code = transform(code, { transforms: ['imports', 'jsx', 'typescript'] })\n      .code\n\n    // Using the noInline prop means we must manually render a component. This\n    // gives us greater flexibility over how ReactLive interprets the source\n    // of our stories.\n    code = `${code}\\n\\nrender(<Default____Component />)`\n  } catch (e: unknown) {\n    if (e instanceof Error) {\n      // ReactLive does not handle errors when pre-transforming code.\n      // See: https://github.com/FormidableLabs/react-live/issues/233.\n      // Unfortunately this doesn't seem fixed. The above issue links off to\n      // https://github.com/FormidableLabs/react-live/pull/285 which references\n      // a commit that appears to fix it, but it doesn't seem to work in this\n      // context, which we should investigate further when we have time.\n      return `render(<>{\\`${e.message.replace(/`/g, '\\\\`')}\\`}</>)`\n    }\n  }\n  return code\n}\n\nconst StyledLiveEditor = styled(LiveEditor)`\n  border-radius: 5px 5px 0 0;\n`\n\nconst StyledLiveError = styled(LiveError)`\n  border: 1px solid #e8e8e8;\n  border-bottom: 0;\n  border-top: 0;\n  margin: 0;\n  padding: 10px;\n`\n\nconst StyledLivePreview = styled(LivePreview)`\n  border: 1px solid #e8e8e8;\n  border-radius: 0 0 5px 5px;\n  border-top: 0;\n  margin: 0;\n  padding: 10px;\n`\n\nexport interface EditorProps {\n  code: LiveProviderProps['code']\n  scope: LiveProviderProps['scope']\n}\n\nexport const Editor = (props: EditorProps) => {\n  return (\n    <LiveProvider\n      code={transformCodeForDisplay(props.code)}\n      noInline\n      scope={{ ...scope, ...props.scope }}\n      theme={theme}\n      transformCode={transformCode}\n    >\n      <StyledLiveEditor />\n      <StyledLiveError />\n      <StyledLivePreview />\n    </LiveProvider>\n  )\n}\n"],"names":[],"sourceRoot":""}