"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[2630],{"./src/defaultArgTypes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>defaultArgTypes,q:()=>excludedProps});const defaultArgTypes={as:{table:{disable:!0}},forwardedAs:{table:{disable:!0}},ref:{table:{disable:!0}},theme:{table:{disable:!0}}},excludedProps=Object.keys(defaultArgTypes)},"../components/src/Layout/Flex/stories/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>index_stories});__webpack_require__("../../node_modules/react/index.js");var esm=__webpack_require__("../../node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("../../node_modules/@storybook/addon-docs/dist/esm/index.js"),Flex=__webpack_require__("../components/src/Layout/Flex/Flex.tsx"),Editor=__webpack_require__("./src/Editor/index.tsx"),defaultArgTypes=__webpack_require__("./src/defaultArgTypes.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const layoutProps={};function MDXContent({components,...props}){return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(dist_esm.Meta,{component:Flex.k,title:"Docs/Flex",mdxType:"Meta"}),(0,esm.kt)("h1",{id:"flex"},"Flex"),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"Flex")," has been deprecated. Use a more specific layout helper such as ",(0,esm.kt)("inlineCode",{parentName:"p"},"Space")," or ",(0,esm.kt)("inlineCode",{parentName:"p"},"SpaceVertical")," or ",(0,esm.kt)("inlineCode",{parentName:"p"},"Grid"),"."),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"Flex")," component creates a flex container for you to place ",(0,esm.kt)("inlineCode",{parentName:"p"},"FlexItem")," components inside. It lets you utilize ",(0,esm.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout",target:"_blank",rel:"nofollow noopener noreferrer"},"flex box")," to create a wide variety of layouts, with powerful alignment, directional, and space distribution abilities."),(0,esm.kt)("p",null,"If you are not familiar with flex box, ",(0,esm.kt)("a",{parentName:"p",href:"https://css-tricks.com/snippets/css/a-guide-to-flexbox/",target:"_blank",rel:"nofollow noopener noreferrer"},"here is a great guide")," for how it works."),(0,esm.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"Flex")," component has the ability to control the layout direction and order of its children. By default the children will layout in a row."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from 'react'\nimport { Flex, FlexItem } from '../../..'\n\nexport default function Basic() {\n  return (\n    <Flex>\n      <FlexItem>üëã</FlexItem>\n      <FlexItem>üí™</FlexItem>\n      <FlexItem>üì¶</FlexItem>\n    </Flex>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"changing-direction-and-order"},"Changing direction and order"),(0,esm.kt)("p",null,"You can change the layout direction and order of flex children by using the ",(0,esm.kt)("inlineCode",{parentName:"p"},"flexDirection")," property. Below we use the same children in each example but can adjust the layout quickly using ",(0,esm.kt)("inlineCode",{parentName:"p"},"flexDirection"),"."),(0,esm.kt)(Editor.Editor,{code:'/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from \'react\'\nimport { Flex, FlexItem } from \'../../..\'\n\nexport default function ChangeDirectionOrder() {\n  return (\n    <Flex>\n      <Flex mr="u5">\n        <FlexItem>1Ô∏è‚É£</FlexItem>\n        <FlexItem>2Ô∏è‚É£</FlexItem>\n        <FlexItem>3Ô∏è‚É£</FlexItem>\n      </Flex>\n      <Flex flexDirection="column" mr="u5">\n        <FlexItem>1Ô∏è‚É£</FlexItem>\n        <FlexItem>2Ô∏è‚É£</FlexItem>\n        <FlexItem>3Ô∏è‚É£</FlexItem>\n      </Flex>\n      <Flex flexDirection="column-reverse" mr="u5">\n        <FlexItem>1Ô∏è‚É£</FlexItem>\n        <FlexItem>2Ô∏è‚É£</FlexItem>\n        <FlexItem>3Ô∏è‚É£</FlexItem>\n      </Flex>\n      <Flex flexDirection="row-reverse" mr="u5">\n        <FlexItem>1Ô∏è‚É£</FlexItem>\n        <FlexItem>2Ô∏è‚É£</FlexItem>\n        <FlexItem>3Ô∏è‚É£</FlexItem>\n      </Flex>\n    </Flex>\n  )\n}\n',mdxType:"Editor"}),(0,esm.kt)("h2",{id:"item-distribution"},"Item distribution"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"Flex")," component allows you to control how its children are distributed within its container. Using the ",(0,esm.kt)("inlineCode",{parentName:"p"},"justifyContent")," property you can adjust the distribution of the children."),(0,esm.kt)("p",null,"Here is a visual example of how using ",(0,esm.kt)("inlineCode",{parentName:"p"},"justifyContent")," affects the distribution of items in a ",(0,esm.kt)("inlineCode",{parentName:"p"},"Flex")," component."),(0,esm.kt)(Editor.Editor,{code:'/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the "Software"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport React from \'react\'\nimport { Flex, Box, Text } from \'../../..\'\n\nexport default function ItemDistribution() {\n  return (\n    <>\n      <Flex justifyContent="flex-start" mb="u4" bg="ui1">\n        <Box>\n          <Text fontSize="xxxxlarge">üï∫</Text>\n        </Box>\n        <Box>\n          <Text fontSize="xxxxlarge">üé∂</Text>\n        </Box>\n        <Box>\n          <Text fontSize="xxxxlarge">üíÉ</Text>\n        </Box>\n      </Flex>\n      <Flex justifyContent="space-between" mb="u4" bg="ui1">\n        <Box>\n          <Text fontSize="xxxxlarge">üï∫</Text>\n        </Box>\n        <Box>\n          <Text fontSize="xxxxlarge">üé∂</Text>\n        </Box>\n        <Box>\n          <Text fontSize="xxxxlarge">üíÉ</Text>\n        </Box>\n      </Flex>\n      <Flex justifyContent="space-around" mb="u4" bg="ui1">\n        <Box>\n          <Text fontSize="xxxxlarge">üï∫</Text>\n        </Box>\n        <Box>\n          <Text fontSize="xxxxlarge">üé∂</Text>\n        </Box>\n        <Box>\n          <Text fontSize="xxxxlarge">üíÉ</Text>\n        </Box>\n      </Flex>\n      <Flex justifyContent="space-evenly" mb="u4" bg="ui1">\n        <Box>\n          <Text fontSize="xxxxlarge">üï∫</Text>\n        </Box>\n        <Box>\n          <Text fontSize="xxxxlarge">üé∂</Text>\n        </Box>\n        <Box>\n          <Text fontSize="xxxxlarge">üíÉ</Text>\n        </Box>\n      </Flex>\n      <Flex justifyContent="center" mb="u4" bg="ui1">\n        <Box>\n          <Text fontSize="xxxxlarge">üï∫</Text>\n        </Box>\n        <Box>\n          <Text fontSize="xxxxlarge">üé∂</Text>\n        </Box>\n        <Box>\n          <Text fontSize="xxxxlarge">üíÉ</Text>\n        </Box>\n      </Flex>\n      <Flex justifyContent="flex-end" mb="u4" bg="ui1">\n        <Box>\n          <Text fontSize="xxxxlarge">üï∫</Text>\n        </Box>\n        <Box>\n          <Text fontSize="xxxxlarge">üé∂</Text>\n        </Box>\n        <Box>\n          <Text fontSize="xxxxlarge">üíÉ</Text>\n        </Box>\n      </Flex>\n    </>\n  )\n}\n',mdxType:"Editor"}),(0,esm.kt)("h2",{id:"aligning-items"},"Aligning Items"),(0,esm.kt)("p",null,"Flex box allows for quickly adjusting the alignment of items inside the flex container."),(0,esm.kt)("p",null,"Here is an example of using ",(0,esm.kt)("inlineCode",{parentName:"p"},"alignItems")," to adjust how items are aligned within the flex container."),(0,esm.kt)(Editor.Editor,{code:'/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the "Software"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport React from \'react\'\nimport { Flex, FlexItem } from \'../../..\'\n\nexport default function AlignItems() {\n  return (\n    <>\n      <Flex mb="u10">\n        <FlexItem p="u10" bg="ui1">\n          Default (stretch)\n        </FlexItem>\n        <FlexItem p="u5" bg="ui2">\n          One\n        </FlexItem>\n        <FlexItem p="u4" bg="ui3">\n          Two\n        </FlexItem>\n        <FlexItem p="u3" bg="ui4">\n          Three\n        </FlexItem>\n      </Flex>\n      <Flex alignItems="center" mb="u10">\n        <FlexItem p="u10" bg="ui1">\n          Center\n        </FlexItem>\n        <FlexItem p="u5" bg="ui2">\n          One\n        </FlexItem>\n        <FlexItem p="u4" bg="ui3">\n          Two\n        </FlexItem>\n        <FlexItem p="u3" bg="ui4">\n          Three\n        </FlexItem>\n      </Flex>\n      <Flex alignItems="flex-start" mb="u10">\n        <FlexItem p="u10" bg="ui1">\n          Start\n        </FlexItem>\n        <FlexItem p="u5" bg="ui2">\n          Two\n        </FlexItem>\n        <FlexItem p="u4" bg="ui3">\n          Three\n        </FlexItem>\n        <FlexItem p="u3" bg="ui4">\n          Four\n        </FlexItem>\n      </Flex>\n      <Flex alignItems="flex-end" mb="u10">\n        <FlexItem p="u10" bg="ui1">\n          End\n        </FlexItem>\n        <FlexItem p="u5" bg="ui2">\n          Two\n        </FlexItem>\n        <FlexItem p="u4" bg="ui3">\n          Three\n        </FlexItem>\n        <FlexItem p="u3" bg="ui4">\n          Four\n        </FlexItem>\n      </Flex>\n      <Flex alignItems="baseline" mb="u10">\n        <FlexItem p="u10" bg="ui1">\n          Baseline\n        </FlexItem>\n        <FlexItem p="u5" bg="ui2">\n          Two\n        </FlexItem>\n        <FlexItem p="u4" bg="ui3">\n          Three\n        </FlexItem>\n        <FlexItem p="u3" bg="ui4">\n          Four\n        </FlexItem>\n      </Flex>\n    </>\n  )\n}\n',mdxType:"Editor"}),(0,esm.kt)("h2",{id:"aligning-content"},"Aligning Content"),(0,esm.kt)("p",null,"If you have multiple rows of flex items, the ",(0,esm.kt)("inlineCode",{parentName:"p"},"alignContent")," property determines how the rows are distributed within the flex container."),(0,esm.kt)(Editor.Editor,{code:'/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from \'react\'\nimport { Flex, FlexItem } from \'../../..\'\n\nexport default function AlignContent() {\n  return (\n    <>\n      <Flex justifyContent="space-between">\n        <Flex\n          alignContent="space-around"\n          width="30%"\n          height="150px"\n          flexWrap="wrap"\n          bg="key"\n        >\n          <FlexItem width="70%" m="u3" p="u2" bg="ui1">\n            Aligned w/\n          </FlexItem>\n          <FlexItem width="30%" m="u3" p="u2" bg="ui1">\n            Space\n          </FlexItem>\n          <FlexItem width="50%" m="u3" p="u2" bg="ui1">\n            Between\n          </FlexItem>\n        </Flex>\n        <Flex\n          alignContent="flex-end"\n          width="30%"\n          height="150px"\n          flexWrap="wrap"\n          bg="inform"\n        >\n          <FlexItem width="70%" m="u3" p="u2" bg="ui2">\n            Aligned w/\n          </FlexItem>\n          <FlexItem width="30%" m="u3" p="u2" bg="ui2">\n            Flex\n          </FlexItem>\n          <FlexItem width="50%" m="u3" p="u2" bg="ui2">\n            End\n          </FlexItem>\n        </Flex>\n        <Flex\n          alignContent="center"\n          width="30%"\n          height="150px"\n          flexWrap="wrap"\n          bg="positive"\n        >\n          <FlexItem width="70%" m="u3" p="u2" bg="ui3">\n            Aligned w/\n          </FlexItem>\n          <FlexItem width="30%" m="u3" p="u2" bg="ui3">\n            Flex\n          </FlexItem>\n          <FlexItem width="50%" m="u3" p="u2" bg="ui3">\n            Center\n          </FlexItem>\n        </Flex>\n      </Flex>\n    </>\n  )\n}\n',mdxType:"Editor"}),(0,esm.kt)("h2",{id:"wrapping-flex-items"},"Wrapping Flex Items"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"flexWrap")," property determines if flex items should be forced into a single line or if they can wrap onto multiple lines."),(0,esm.kt)(Editor.Editor,{code:'/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from \'react\'\nimport { Flex, FlexItem } from \'../../..\'\n\nexport default function Wrapping() {\n  return (\n    <>\n      <Flex width="80%" flexWrap="nowrap" mb="u5">\n        <FlexItem width="40%" p="u5" bg="ui4">\n          These Lines\n        </FlexItem>\n        <FlexItem width="40%" p="u5" bg="ui2">\n          Will NOT\n        </FlexItem>\n        <FlexItem width="40%" p="u5" bg="ui3">\n          Wrap\n        </FlexItem>\n      </Flex>\n      <Flex width="50%" flexWrap="wrap" mb="u5">\n        <FlexItem width="40%" p="u5" bg="ui4">\n          These Lines\n        </FlexItem>\n        <FlexItem width="40%" p="u5" bg="ui2">\n          Will\n        </FlexItem>\n        <FlexItem width="40%" p="u5" bg="ui3">\n          Wrap\n        </FlexItem>\n      </Flex>\n      <Flex width="50%" flexWrap="wrap-reverse" mb="u5">\n        <FlexItem width="40%" p="u5" bg="ui4">\n          These Lines\n        </FlexItem>\n        <FlexItem width="40%" p="u5" bg="ui2">\n          Will\n        </FlexItem>\n        <FlexItem width="40%" p="u5" bg="ui3">\n          Wrap Reverse\n        </FlexItem>\n      </Flex>\n    </>\n  )\n}\n',mdxType:"Editor"}),(0,esm.kt)("h2",{id:"responsive-behavior"},"Responsive Behavior"),(0,esm.kt)("p",null,"Many of the properties you can set on the ",(0,esm.kt)("inlineCode",{parentName:"p"},"Flex")," component will accept an array of values that will then be applied at different breakpoints. There are 5 ",(0,esm.kt)("a",{parentName:"p",href:"/#!/Breakpoints"},"breakpoints")," slots that you can target. Here is an example of what that looks like."),(0,esm.kt)(Editor.Editor,{code:'/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from \'react\'\nimport { Flex, FlexItem } from \'../../..\'\n\nexport default function Responsive() {\n  return (\n    <>\n      <Flex\n        flexDirection={[\n          \'column\', // column up to the first breakpoint\n          null, // stay a column past first breakpoint\n          \'row\', // switch to row layout after second breakpoint\n        ]}\n      >\n        <FlexItem p="u4" bg="ui5">\n          üëã\n        </FlexItem>\n        <FlexItem p="u4" bg="ui3">\n          üí™\n        </FlexItem>\n        <FlexItem p="u4" bg="ui1">\n          üì¶\n        </FlexItem>\n      </Flex>\n    </>\n  )\n}\n',mdxType:"Editor"}),(0,esm.kt)("h2",{id:"flexitem"},"FlexItem"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"FlexItem")," component lets you have more control of the properties that apply to just children inside a ",(0,esm.kt)("inlineCode",{parentName:"p"},"Flex")," container. These properties affect how a flex item aligns its self, it's order, and how it resizes to fill the available space in the flex container."),(0,esm.kt)("h3",{id:"adjusting-individual-alignment"},"Adjusting Individual Alignment"),(0,esm.kt)("p",null,"Using the ",(0,esm.kt)("inlineCode",{parentName:"p"},"alignSelf")," property on a ",(0,esm.kt)("inlineCode",{parentName:"p"},"FlexItem")," allows you to override the the ",(0,esm.kt)("inlineCode",{parentName:"p"},"alignItems")," value from the flex container. This is useful if you need to adjust how a single flex item aligns itself in the container."),(0,esm.kt)(Editor.Editor,{code:'/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from \'react\'\nimport { Flex, FlexItem, Box } from \'../../..\'\n\nexport default function IndividualAlignment() {\n  return (\n    <>\n      <Flex height="200px" bg="key">\n        <FlexItem alignSelf="flex-start">\n          <Box m="u3" p="u5" bg="ui1">\n            Flex Start\n          </Box>\n        </FlexItem>\n        <FlexItem alignSelf="flex-end">\n          <Box m="u3" p="u5" bg="ui1">\n            Flex End\n          </Box>\n        </FlexItem>\n        <FlexItem alignSelf="center">\n          <Box m="u3" p="u5" bg="ui1">\n            Center\n          </Box>\n        </FlexItem>\n        <FlexItem alignSelf="baseline">\n          <Box m="u3" p="u5" bg="ui1">\n            Baseline\n          </Box>\n        </FlexItem>\n      </Flex>\n    </>\n  )\n}\n',mdxType:"Editor"}),(0,esm.kt)("h3",{id:"item-order"},"Item Order"),(0,esm.kt)("p",null,"By default flex items are laid our in source order, the ",(0,esm.kt)("inlineCode",{parentName:"p"},"order")," property on a ",(0,esm.kt)("inlineCode",{parentName:"p"},"FlexItem")," allows you to adjust how an individual flex item is is ordered in a flex container."),(0,esm.kt)("p",null,(0,esm.kt)("strong",{parentName:"p"},"Note:")," the ",(0,esm.kt)("inlineCode",{parentName:"p"},"order")," value default is ",(0,esm.kt)("inlineCode",{parentName:"p"},"0"),", so setting an ",(0,esm.kt)("inlineCode",{parentName:"p"},'order="1"')," will put the item at the end unless another flex item has a higher ",(0,esm.kt)("inlineCode",{parentName:"p"},"order")," set. You can also use negative numbers to set an item at the beginning."),(0,esm.kt)(Editor.Editor,{code:'/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from \'react\'\nimport { Flex, FlexItem, Box } from \'../../..\'\n\nexport default function ItemOrder() {\n  return (\n    <>\n      <Flex bg="ui1" mb="u5">\n        <FlexItem>\n          <Box m="u3" p="u5" bg="ui2">\n            0\n          </Box>\n        </FlexItem>\n        <FlexItem>\n          <Box m="u3" p="u5" bg="ui1">\n            1\n          </Box>\n        </FlexItem>\n        <FlexItem>\n          <Box m="u3" p="u5" bg="ui3">\n            2\n          </Box>\n        </FlexItem>\n        <FlexItem>\n          <Box m="u3" p="u5" bg="ui5" color="inverseOn">\n            3\n          </Box>\n        </FlexItem>\n        <FlexItem>\n          <Box m="u3" p="u5" bg="ui4">\n            4\n          </Box>\n        </FlexItem>\n      </Flex>\n      <Flex bg="ui1">\n        <FlexItem>\n          <Box m="u3" p="u5" bg="ui2">\n            0\n          </Box>\n        </FlexItem>\n        <FlexItem order="2">\n          <Box m="u3" p="u5" bg="ui1">\n            1\n          </Box>\n        </FlexItem>\n        <FlexItem order="1">\n          <Box m="u3" p="u5" bg="ui3">\n            2\n          </Box>\n        </FlexItem>\n        <FlexItem>\n          <Box m="u3" p="u5" bg="ui5" color="inverseOn">\n            3\n          </Box>\n        </FlexItem>\n        <FlexItem order="-1">\n          <Box m="u3" p="u5" bg="ui4">\n            4\n          </Box>\n        </FlexItem>\n      </Flex>\n    </>\n  )\n}\n',mdxType:"Editor"}),(0,esm.kt)("h3",{id:"controlling-item-size"},"Controlling Item Size"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"FlexItem")," has two properties for managing its size. You can use the ",(0,esm.kt)("inlineCode",{parentName:"p"},"flexBasis")," property or the ",(0,esm.kt)("inlineCode",{parentName:"p"},"flex")," property."),(0,esm.kt)("h4",{id:"flex-basis-example"},"Flex Basis example."),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"flexBasis")," property defines the flex-items' default size before the remaining space is distributed."),(0,esm.kt)(Editor.Editor,{code:'/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from \'react\'\nimport { Flex, FlexItem, Box } from \'../../..\'\n\nexport default function FlexBasis() {\n  return (\n    <>\n      <Flex>\n        <FlexItem flexBasis="20%">\n          <Box p="u3" m="u3" bg="ui4">\n            I am 20% of container\n          </Box>\n        </FlexItem>\n        <FlexItem flexBasis="5.5rem">\n          <Box p="u3" m="u3" bg="ui3">\n            I am 5.5rem of container\n          </Box>\n        </FlexItem>\n        <FlexItem flexBasis="150px">\n          <Box p="u3" m="u3" bg="ui2">\n            I am 150px of container\n          </Box>\n        </FlexItem>\n        <FlexItem>\n          <Box p="u3" m="u3" bg="ui1">\n            I am sized to my content\n          </Box>\n        </FlexItem>\n      </Flex>\n    </>\n  )\n}\n',mdxType:"Editor"}),(0,esm.kt)("h3",{id:"flex-example"},"Flex Example"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"flex")," property is a shorthand for ",(0,esm.kt)("inlineCode",{parentName:"p"},"flex-grow"),", ",(0,esm.kt)("inlineCode",{parentName:"p"},"flex-shrink"),", and ",(0,esm.kt)("inlineCode",{parentName:"p"},"flex-basis")," properties. It specifies how a flex item will grow or shrink to fit the space in its flex container."),(0,esm.kt)("p",null,(0,esm.kt)("strong",{parentName:"p"},"Note"),": The ",(0,esm.kt)("inlineCode",{parentName:"p"},"flex")," syntax can be a bit confusing, if you need a more detail set of examples check out this ",(0,esm.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/flex",target:"_blank",rel:"nofollow noopener noreferrer"},"MDN flex overview"),"."),(0,esm.kt)("h3",{id:"flex-grow-example"},"Flex Grow Example"),(0,esm.kt)("p",null,"Below we set the flex grow value of the first flex item to ",(0,esm.kt)("inlineCode",{parentName:"p"},"2")," so it will take up a factor of two in the flex container"),(0,esm.kt)(Editor.Editor,{code:'/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from \'react\'\nimport { Flex, FlexItem, Box } from \'../../..\'\n\nexport default function FlexGrow() {\n  return (\n    <>\n      <Flex>\n        <FlexItem flex="2">\n          <Box p="u3" bg="ui4">\n            Flex: 2\n          </Box>\n        </FlexItem>\n        <FlexItem flex="1">\n          <Box p="u3" bg="ui3">\n            Flex: 1\n          </Box>\n        </FlexItem>\n        <FlexItem flex="1">\n          <Box p="u3" bg="ui2">\n            Flex: 1\n          </Box>\n        </FlexItem>\n      </Flex>\n    </>\n  )\n}\n',mdxType:"Editor"}),(0,esm.kt)("h3",{id:"flex-shrink"},"Flex Shrink"),(0,esm.kt)("p",null,"Below we have a flex container with a set width of 500px and each child's ",(0,esm.kt)("inlineCode",{parentName:"p"},"flex-basis")," is set to 200px. The flex shrink value on the last two flex items is set to ",(0,esm.kt)("inlineCode",{parentName:"p"},"1")," and they will now shrink so that all the flex items fit within the flex container."),(0,esm.kt)(Editor.Editor,{code:'/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from \'react\'\nimport { Flex, FlexItem, Box } from \'../../..\'\n\nexport default function FlexShrink() {\n  return (\n    <>\n      <Flex width="500px">\n        <FlexItem flex="1 0 200px">\n          <Box p="u3" bg="ui4">\n            No Shrink\n          </Box>\n        </FlexItem>\n        <FlexItem flex="1 1 200px">\n          <Box p="u3" bg="ui3">\n            I\'ll shrink\n          </Box>\n        </FlexItem>\n        <FlexItem flex="1 1 200px">\n          <Box p="u3" bg="ui2">\n            I\'ll shrink\n          </Box>\n        </FlexItem>\n      </Flex>\n    </>\n  )\n}\n',mdxType:"Editor"}),(0,esm.kt)("h2",{id:"props"},"Props"),(0,esm.kt)(dist_esm.ArgsTable,{of:Flex.k,exclude:defaultArgTypes.q,mdxType:"ArgsTable"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Docs/Flex",component:Flex.k,includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,esm.kt)(MDXContent,null)};const index_stories=componentMeta,__namedExportsOrder=["__page"]}}]);