"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[2876],{"./src/defaultArgTypes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>defaultArgTypes,q:()=>excludedProps});const defaultArgTypes={as:{table:{disable:!0}},forwardedAs:{table:{disable:!0}},ref:{table:{disable:!0}},theme:{table:{disable:!0}}},excludedProps=Object.keys(defaultArgTypes)},"../components/src/NavTree/stories/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>index_stories});__webpack_require__("../../node_modules/react/index.js");var esm=__webpack_require__("../../node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("../../node_modules/@storybook/addon-docs/dist/esm/index.js"),src=__webpack_require__("../components/src/index.ts"),Editor=__webpack_require__("./src/Editor/index.tsx"),defaultArgTypes=__webpack_require__("./src/defaultArgTypes.ts");const stories_Basic="/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport * as MaterialIcons from '@styled-icons/material'\nimport { NavTree, NavTreeItem } from '../..'\nimport type { NavTreeProps } from '../types'\n\nexport default function Basic(props: NavTreeProps) {\n  return (\n    <NavTree\n      {...props}\n      defaultOpen\n      icon={<MaterialIcons.Folder />}\n      label=\"Cheeses\"\n    >\n      <NavTreeItem>Cheddar</NavTreeItem>\n    </NavTree>\n  )\n}\n";try{Basic.displayName="Basic",Basic.__docgenInfo={description:"",displayName:"Basic",props:{color:{defaultValue:null,description:"Replace the normal uiN(1-5) color, when ListItem is selected, with color label passed.\n\nList, ListItem, Tree & TreeItem now theme-based color assignments. Supported colors are:\n\n - key\n - calculation\n - dimension\n - measure\n\nThe color is used a background color (using the `subtle` variant) when the item\nis `selected` or `current`. Items with `calculation` & `measure` will have a text\ncolor applied at all times unless they are `disabled`",name:"color",required:!1,type:{name:"string"}},description:{defaultValue:null,description:"optional extra description\nI18n recommended: content that is user visible should be treated for i18n",name:"description",required:!1,type:{name:"ReactNode"}},detail:{defaultValue:null,description:"Detail element placed right of the item children. Prop value can take one of two forms:\n1. ReactNode\n2. Object with content and options properties\n\nI18n recommended: content that is user visible should be treated for i18n",name:"detail",required:!1,type:{name:"ListItemDetailConfig"}},hovered:{defaultValue:{value:"false"},description:"Present ListItem in it's hovered state. Only for use in testing / image-snapshots.\n\nNOTE: This will only change the _initial_ hover state. If a hover event triggers a change\nof hover state the ListItem will return to it's default state.\n@private Test use only. May be deprecated and removed without notice.",name:"hovered",required:!1,type:{name:"boolean"}},icon:{defaultValue:null,description:"Optional icon placed left of the item children",name:"icon",required:!1,type:{name:"IconType"}},truncate:{defaultValue:null,description:"If true, text children and description will be truncated if text overflows\nSpecifying `description` will cause the truncation tooltip for label to _always_ be presented\n\nText specified in `description` property will be displayed below `label` in the tooltip",name:"truncate",required:!1,type:{name:"TruncateConfigProp"}},ripple:{defaultValue:{value:"true"},description:"The ripple animation",name:"ripple",required:!1,type:{name:"boolean"}},isOpen:{defaultValue:null,description:"Use this property (alongside toggleOpen) if you wish to use the component in a `controlled` manner.\nisOpen determines whether the Accordion is currently open or closed",name:"isOpen",required:!1,type:{name:"boolean"}},toggleOpen:{defaultValue:null,description:"Use this property (alongside isOpen) if you wish to use the component in a `controlled` manner.\ntoggleOpen is a function that should control the value / state of isOpen",name:"toggleOpen",required:!1,type:{name:"((isOpen: boolean) => void)"}},defaultOpen:{defaultValue:null,description:"Use this property if you wish to use the component in a `uncontrolled` manner and have it open when initially rendering.\nComponent will hold internal state and open and close on disclosure click",name:"defaultOpen",required:!1,type:{name:"boolean"}},onClose:{defaultValue:null,description:"Callback that is triggered when closing the Accordion (i.e. when clicking on an open Accordion)",name:"onClose",required:!1,type:{name:"(() => void)"}},onOpen:{defaultValue:null,description:"Callback that is triggered when opening the Accordion (i.e. when clicking on a closed Accordion)",name:"onOpen",required:!1,type:{name:"(() => void)"}},label:{defaultValue:null,description:"Label text or element displayed within Tree's internal AccordionDisclosure",name:"label",required:!0,type:{name:"ReactNode"}},indicatorLabel:{defaultValue:null,description:"Passed down to the indicator icon's label prop",name:"indicatorLabel",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/NavTree/stories/Basic.tsx#Basic"]={docgenInfo:Basic.__docgenInfo,name:"Basic",path:"../components/src/NavTree/stories/Basic.tsx#Basic"})}catch(__react_docgen_typescript_loader_error){}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const layoutProps={};function MDXContent({components,...props}){return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(dist_esm.Meta,{component:src.NavTree,title:"Docs/NavTree",mdxType:"Meta"}),(0,esm.kt)("h1",{id:"navtree"},"NavTree"),(0,esm.kt)(Editor.Editor,{code:stories_Basic,mdxType:"Editor"}),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"NavTree"),", along with its companion component ",(0,esm.kt)("inlineCode",{parentName:"p"},"NavTreeItem"),", renders a collapsible list of items. However, unlike standard ",(0,esm.kt)("inlineCode",{parentName:"p"},"ul")," and ",(0,esm.kt)("inlineCode",{parentName:"p"},"li")," elements, ",(0,esm.kt)("inlineCode",{parentName:"p"},"NavTree")," and ",(0,esm.kt)("inlineCode",{parentName:"p"},"NavTreeItem")," come prebuilt with a number of props to simplify item style and behavior customization."),(0,esm.kt)(Editor.Editor,{code:stories_Basic,mdxType:"Editor"}),(0,esm.kt)("h2",{id:"as-links"},"As Links"),(0,esm.kt)("p",null,"A ",(0,esm.kt)("inlineCode",{parentName:"p"},"NavTree")," component will behave as a link by providing  ",(0,esm.kt)("inlineCode",{parentName:"p"},"href")," and ",(0,esm.kt)("inlineCode",{parentName:"p"},"target")," props."),(0,esm.kt)(Editor.Editor,{code:'/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from \'react\'\nimport * as MaterialIcons from \'@styled-icons/material\'\nimport { NavTree, NavTreeItem } from \'../..\'\n\nexport default function Link() {\n  return (\n    <NavTree\n      defaultOpen\n      label="Click me to go to Google"\n      icon={<MaterialIcons.Folder />}\n      href="https://google.com"\n      target="_blank"\n      indicatorLabel="Google Link Indicator"\n    >\n      <NavTreeItem href="https://google.com" target="_blank" parentIcon>\n        Some Item\n      </NavTreeItem>{\' \'}\n    </NavTree>\n  )\n}\n',mdxType:"Editor"}),(0,esm.kt)("h2",{id:"nested"},"Nested"),(0,esm.kt)("p",null,"A ",(0,esm.kt)("inlineCode",{parentName:"p"},"NavTree")," component can also be nested within  another ",(0,esm.kt)("inlineCode",{parentName:"p"},"NavTree"),". "),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport * as MaterialIcons from '@styled-icons/material'\nimport { NavTree, NavTreeItem } from '../..'\n\nexport default function ParentIcon() {\n  return (\n    <>\n      <NavTree\n        defaultOpen\n        label=\"Parent Tree with Icon\"\n        icon={<MaterialIcons.Folder />}\n      >\n        <NavTreeItem parentIcon>Cheddar</NavTreeItem>\n        <NavTreeItem parentIcon>Cheddar 2</NavTreeItem>\n        <NavTreeItem parentIcon>Cheddar 3</NavTreeItem>\n      </NavTree>\n      <NavTree\n        defaultOpen\n        label=\"Grandparent Tree with Icon\"\n        icon={<MaterialIcons.Folder />}\n      >\n        <NavTree defaultOpen label=\"Parent Tree with No Icon\">\n          <NavTreeItem>Swiss</NavTreeItem>\n          <NavTreeItem>Swiss 2</NavTreeItem>\n          <NavTreeItem>Swiss 3</NavTreeItem>\n        </NavTree>\n      </NavTree>\n    </>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"props"},"Props"),(0,esm.kt)(dist_esm.ArgsTable,{of:src.NavTree,exclude:defaultArgTypes.q,mdxType:"ArgsTable"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Docs/NavTree",component:src.NavTree,includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,esm.kt)(MDXContent,null)};const index_stories=componentMeta,__namedExportsOrder=["__page"]}}]);