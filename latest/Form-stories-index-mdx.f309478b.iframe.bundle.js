"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[3526],{"../components/src/Form/stories/index.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>MDXContent});__webpack_require__("../../node_modules/react/index.js");var esm=__webpack_require__("../../node_modules/@mdx-js/react/dist/esm.js"),src=__webpack_require__("../components/src/index.ts"),Editor=__webpack_require__("./src/Editor/index.tsx");try{Basic.displayName="Basic",Basic.__docgenInfo={description:"",displayName:"Basic",props:{validationMessages:{defaultValue:null,description:"A record of all validation messages for the form, where the key is the name\n of the validated field and the value holds the information for the corresponding\n message and validation type.",name:"validationMessages",required:!1,type:{name:"ValidationMessages"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"FormEventHandler<HTMLFormElement>"}},onInput:{defaultValue:null,description:"",name:"onInput",required:!1,type:{name:"FormEventHandler<HTMLFormElement>"}},onSubmit:{defaultValue:null,description:"",name:"onSubmit",required:!1,type:{name:"FormEventHandler<HTMLFormElement>"}},gap:{defaultValue:{value:"medium"},description:"Amount of space between grid cells",name:"gap",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"none"'},{value:'"u4"'},{value:'"xxxsmall"'},{value:'"xxsmall"'},{value:'"xsmall"'},{value:'"medium"'},{value:'"large"'},{value:'"xlarge"'},{value:'"xxlarge"'},{value:'"xxxlarge"'},{value:'"xxxxlarge"'},{value:'"u05"'},{value:'"u1"'},{value:'"u2"'},{value:'"u3"'},{value:'"u5"'},{value:'"u6"'},{value:'"u7"'},{value:'"u8"'},{value:'"u9"'},{value:'"u10"'},{value:'"u11"'},{value:'"u12"'},{value:'"u13"'},{value:'"u14"'},{value:'"u15"'},{value:'"u16"'}]}},around:{defaultValue:{value:"false"},description:"The spacing between each pair of adjacent items is the same. The empty space before the\nfirst and after the last item equals half of the space between each pair of adjacent items.\n(citation: https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)",name:"around",required:!1,type:{name:"boolean"}},between:{defaultValue:{value:"false"},description:"The spacing between each pair of adjacent items is the same. The first item is flush with\nthe main-start edge, and the last item is flush with the main-end edge.\n(citation: https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)",name:"between",required:!1,type:{name:"boolean"}},evenly:{defaultValue:{value:"false"},description:"The spacing between each pair of adjacent items, the main-start edge and the first item,\nand the main-end edge and the last item, are all exactly the same.\n(citation: https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)",name:"evenly",required:!1,type:{name:"boolean"}},reverse:{defaultValue:{value:"false"},description:"reverse direction of content",name:"reverse",required:!1,type:{name:"boolean"}},align:{defaultValue:{value:"center"},description:"Align items vertically within `Space`",name:"align",required:!1,type:{name:"enum",value:[{value:'"start"'},{value:'"baseline"'},{value:'"end"'},{value:'"center"'},{value:'"stretch"'}]}},justify:{defaultValue:{value:"start"},description:'Justify items horizontally within `Space`\nNOTE: This will by overridden by any of align="stretch", evenly, reverse or between.\nNOTE: Justification is based on flex-direction so if `reverse=true` this will be "backwards".',name:"justify",required:!1,type:{name:"enum",value:[{value:'"start"'},{value:'"end"'},{value:'"center"'}]}},border:{defaultValue:null,description:"Border can be specified as a boolean or a key of the theme colors object.\n1px border is applied to all four sides.\n\n`true` - will use theme's `ui2` color\n`false` - will not apply any border\n`keyof Colors` - will use the color of the key",name:"border",required:!1,type:{name:"BorderProp"}},borderBottom:{defaultValue:null,description:"A 1px border is applied to the bottom.\nSee `border` property for specifics values that can be specified..",name:"borderBottom",required:!1,type:{name:"BorderProp"}},borderLeft:{defaultValue:null,description:"A 1px border is applied to the left.\nSee `border` property for specifics values that can be specified..",name:"borderLeft",required:!1,type:{name:"BorderProp"}},borderRight:{defaultValue:null,description:"A 1px border is applied to the right.\nSee `border` property for specifics values that can be specified..",name:"borderRight",required:!1,type:{name:"BorderProp"}},borderTop:{defaultValue:null,description:"A 1px border is applied to the top.\nSee `border` property for specifics values that can be specified..",name:"borderTop",required:!1,type:{name:"BorderProp"}},borderX:{defaultValue:null,description:"A 1px border is applied to the left & right.\nSee `border` property for specifics values that can be specified..",name:"borderX",required:!1,type:{name:"BorderProp"}},borderY:{defaultValue:null,description:"A 1px border is applied to the top & bottom.\nSee `border` property for specifics values that can be specified..",name:"borderY",required:!1,type:{name:"BorderProp"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/stories/Basic.tsx#Basic"]={docgenInfo:Basic.__docgenInfo,name:"Basic",path:"../components/src/Form/stories/Basic.tsx#Basic"})}catch(__react_docgen_typescript_loader_error){}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const Meta=(name="Meta",function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),(0,esm.kt)("div",props)});var name;const layoutProps={};function MDXContent({components,...props}){return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(Meta,{component:src.Form,title:"Docs/Form",mdxType:"Meta"}),(0,esm.kt)("h1",{id:"form"},"Form"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"<Form />")," component wraps a collection of field components and allows for multi-field validation message rendering by accepting a ",(0,esm.kt)("inlineCode",{parentName:"p"},"validationMessages")," property. The property takes a dictionary with key as field name and value as a ",(0,esm.kt)("inlineCode",{parentName:"p"},"ValidationMessage")," object which has a ",(0,esm.kt)("inlineCode",{parentName:"p"},"type")," and a ",(0,esm.kt)("inlineCode",{parentName:"p"},"message"),":"),(0,esm.kt)("h2",{id:"form-validation"},"Form Validation"),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { Button, FieldText, Form } from '../..'\nimport type { FormProps } from '../..'\n\nexport default function Basic(props: FormProps) {\n  return (\n    <Form\n      validationMessages={{\n        alpha: { message: 'This is an error', type: 'error' },\n        bravo: { message: 'This is another error', type: 'error' },\n      }}\n      {...props}\n    >\n      <FieldText label=\"Alpha\" name=\"alpha\" />\n      <FieldText label=\"Bravo\" name=\"bravo\" />\n      <FieldText label=\"Charlie\" name=\"charlie\" />\n      <Button>Submit</Button>\n    </Form>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("p",null,"A complete implementation that keeps track of state and updates validation messages onChange."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { ChangeEvent } from 'react'\nimport React, { useState } from 'react'\nimport type { ValidationMessages } from '../..'\nimport { FieldText, Form } from '../..'\n\nexport default function Validation() {\n  const [val1, setVal1] = useState('')\n  const [val2, setVal2] = useState('')\n  const [validationErrors, setValidationErrors] = useState<ValidationMessages>(\n    {}\n  )\n  const validate = (value1: typeof val1, value2: typeof val2) => {\n    const errors: typeof validationErrors = {}\n    if (value1.length >= 5) {\n      errors.val1 = {\n        message: 'Error! String greater than 5 characters.',\n        type: 'error',\n      }\n    }\n    if (value2.length <= 5) {\n      errors.val2 = {\n        message: 'Error! String less than 5 characters.',\n        type: 'error',\n      }\n    }\n    setValidationErrors(errors)\n  }\n  const onChangeVal1 = (event: ChangeEvent<HTMLInputElement>) => {\n    setVal1(event.currentTarget.value)\n    validate(event.currentTarget.value, val2)\n  }\n  const onChangeVal2 = (event: ChangeEvent<HTMLInputElement>) => {\n    setVal2(event.currentTarget.value)\n    validate(val1, event.currentTarget.value)\n  }\n  return (\n    <Form validationMessages={validationErrors}>\n      <FieldText\n        name=\"val1\"\n        value={val1}\n        label=\"A Field requiring less than 5 characters\"\n        onChange={onChangeVal1}\n      />\n      <FieldText\n        name=\"val2\"\n        value={val2}\n        label=\"A Field requiring more than 5 characters\"\n        onChange={onChangeVal2}\n      />\n    </Form>\n  )\n}\n",mdxType:"Editor"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0}}]);