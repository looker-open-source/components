{"version":3,"file":"main.193bf8a8.iframe.bundle.js","mappings":";AAQA;AACA;ACPA;;ACgDA;;;;;;AAQA;;;;;;AAaA;ACrBA;;AC3CA;;;;;AAOA;AACA;AACA;AACA;AACA;AAEA;;;;;AAOA;AACA;AACA;;ACjBA;;AAEA;AACA;AACA;;ACkRA;;AAEA;;AAIA;;AAEA;AACA;AAGA;;;;AAMA;;;AAKA;;;AAKA;;AAIA;AACA;;;;AAIA;AACA;;;AAKA;;;AAGA;AAGA;;AAIA;AACA;AACA;AACA;;AAIA;;;;;AAMA","sources":["webpack://@looker/storybook/./src/Decorator.tsx","webpack://@looker/storybook/./src/decorators.ts","webpack://@looker/storybook/./src/Editor/index.tsx","webpack://@looker/storybook/../visualizations-table/src/CellVisualization/index.tsx","webpack://@looker/storybook/../visualizations-table/src/TableCell/index.tsx","webpack://@looker/storybook/../visualizations-table/src/TableHeadCell/index.tsx","webpack://@looker/storybook/../visualizations-table/src/Table/index.tsx"],"sourcesContent":["import type { Story } from '@storybook/react'\nimport { ComponentsProvider } from '@looker/components-providers'\nimport { theme } from '@looker/design-tokens'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { getLocaleProps } from './getLocaleProps'\n\nconst Style = styled.div`\n  font-size: ${() => theme.fontSizes.medium};\n  line-height: ${() => theme.lineHeights.medium};\n`\n\nexport const Decorator = (StoryComponent: Story, context: any) => (\n  <ComponentsProvider theme={theme} {...getLocaleProps(context)}>\n    <Style>\n      <StoryComponent />\n    </Style>\n  </ComponentsProvider>\n)\n","import { Decorator } from './Decorator'\n\nexport const decorators = [Decorator]\n","import type { LiveProviderProps } from 'react-live'\nimport theme from 'prism-react-renderer/themes/synthwave84'\nimport React from 'react'\nimport { LiveEditor, LiveError, LivePreview, LiveProvider } from 'react-live'\nimport styled from 'styled-components'\nimport { transform } from 'sucrase'\nimport { transformCodeForDisplay } from './transformCodeForDisplay'\nimport { scope } from '../scope'\n\nfunction transformCode(code: string = '') {\n  try {\n    // We reuse display transformations because many of them aren't compatible\n    // with ReactLive either.\n    code = transformCodeForDisplay(code)\n\n    // The keyword export is a syntax error in ReactLive.\n    code = code.replace(/export default /, 'const Default____Component = ')\n\n    // ReactLive uses Sucrase, but does not enable the TypeScript transform. In\n    // order to get our TS code to parse we must pre-parse TypeScript. If we do\n    // not double-parse JSX, then it is a syntax error for Sucrase. ReactLive\n    // has no plans to support TS either.\n    //\n    // See: https://github.com/FormidableLabs/react-live/issues/8.\n    code = transform(code, {\n      transforms: ['imports', 'jsx', 'typescript'],\n    }).code\n\n    // Using the noInline prop means we must manually render a component. This\n    // gives us greater flexibility over how ReactLive interprets the source\n    // of our stories.\n    code = `${code}\\n\\nrender(<Default____Component />)`\n  } catch (e: unknown) {\n    if (e instanceof Error) {\n      // ReactLive does not handle errors when pre-transforming code.\n      // See: https://github.com/FormidableLabs/react-live/issues/233.\n      // Unfortunately this doesn't seem fixed. The above issue links off to\n      // https://github.com/FormidableLabs/react-live/pull/285 which references\n      // a commit that appears to fix it, but it doesn't seem to work in this\n      // context, which we should investigate further when we have time.\n      return `render(<>{\\`${e.message.replace(/`/g, '\\\\`')}\\`}</>)`\n    }\n  }\n  return code\n}\n\nconst StyledLiveEditor = styled(LiveEditor)`\n  border-radius: 5px 5px 0 0;\n`\n\nconst StyledLiveError = styled(LiveError)`\n  border: 1px solid #e8e8e8;\n  border-bottom: 0;\n  border-top: 0;\n  margin: 0;\n  padding: 10px;\n`\n\nconst StyledLivePreview = styled(LivePreview)`\n  border: 1px solid #e8e8e8;\n  border-radius: 0 0 5px 5px;\n  border-top: 0;\n  margin: 0;\n  padding: 10px;\n`\n\nexport interface EditorProps {\n  code: LiveProviderProps['code']\n  scope: LiveProviderProps['scope']\n}\n\nexport const Editor = (props: EditorProps) => {\n  return (\n    <LiveProvider\n      code={transformCodeForDisplay(props.code)}\n      noInline\n      scope={{ ...scope, ...props.scope }}\n      theme={theme}\n      transformCode={transformCode}\n    >\n      <StyledLiveEditor />\n      <StyledLiveError />\n      <StyledLivePreview />\n    </LiveProvider>\n  )\n}\n","/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport styled, { useTheme } from 'styled-components'\nimport { deriveColorBlend } from '@looker/visualizations-adapters'\n\ntype CellVisualizationProps = {\n  min: number\n  max: number\n  value: number\n  color?: string\n}\n\nconst COLOR_BAND_COUNT = 10\n\nexport const CellVisualization = (props: CellVisualizationProps) => {\n  const { colors } = useTheme()\n  const { max, value, color = colors.measure } = props\n\n  if (max === 0) {\n    return null\n  }\n\n  const cellVisWidth = value / max // width in percent\n\n  const colorBands = deriveColorBlend(\n    color,\n    colors.background,\n    COLOR_BAND_COUNT\n  )\n\n  const colorIndex = Math.round((1 - cellVisWidth) * COLOR_BAND_COUNT)\n\n  return (\n    <SingleBar\n      color={colorBands[colorIndex]}\n      width={cellVisWidth}\n      data-testid=\"single-bar\"\n    />\n  )\n}\n\ntype SingleBarProps = { color?: string; width: number }\n\nconst SingleBar = styled.div.attrs<SingleBarProps>(({ width, color }) => ({\n  style: { flex: width, background: color },\n}))<SingleBarProps>`\n  height: ${({ theme }) => theme.sizes.small};\n`\n","/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport styled, { css } from 'styled-components'\n\nexport const RowIndexStyles = css`\n  border-right: 1px solid ${({ theme }) => theme.colors.ui4};\n  text-align: right;\n  position: sticky;\n  left: 0;\n  z-index: 1;\n`\n\nexport const TableCellStyles = css`\n  border-right: 1px solid ${({ theme }) => theme.colors.ui2};\n  font-size: ${({ theme }) => theme.fontSizes.small};\n  line-height: ${({ theme }) => theme.lineHeights.small};\n  padding: ${({ theme }) =>\n    css`\n      ${theme.space.xxsmall} ${theme.space.xsmall}\n    `};\n  &:last-child {\n    border-right: none;\n  }\n`\n\nexport const TableCell = styled.td<{ stickyLeft?: boolean }>`\n  ${TableCellStyles}\n  ${({ stickyLeft }) => (stickyLeft ? RowIndexStyles : null)}\n`\n","/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { TableCellStyles, RowIndexStyles } from '../TableCell'\nimport styled from 'styled-components'\n\nexport const TableHeadCell = styled.th.attrs<{ width?: number }>(\n  ({ width }) => ({\n    width,\n  })\n)<{ width?: number; stickyLeft?: boolean }>`\n  ${TableCellStyles}\n  text-align: left;\n  background: ${({ theme }) => theme.colors.background};\n  border-bottom: 1px solid ${({ theme }) => theme.colors.ui4};\n  ${({ stickyLeft }) => (stickyLeft ? RowIndexStyles : null)}\n`\n","/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React, { useRef } from 'react'\nimport type { FC } from 'react'\nimport type { TableProps, CTableSeries } from '@looker/visualizations-adapters'\nimport {\n  getSeriesMax,\n  getSeriesMin,\n  DEFAULT_HEIGHT,\n  DEFAULT_EMPTY_FIELDS,\n} from '@looker/visualizations-adapters'\nimport { flexRender } from '@tanstack/react-table'\nimport styled, { css } from 'styled-components'\nimport { IconButton, Truncate, Box, Grid } from '@looker/components'\nimport { useHeadlessTable, useVirtual } from '../hooks'\nimport { useTranslation, getSortAssets, normalizeHeaderColumns } from '../utils'\nimport { CellVisualization } from '../CellVisualization'\nimport { ColumnTotals } from '../ColumnTotals'\nimport { TableCell } from '../TableCell'\nimport { TableHeadCell } from '../TableHeadCell'\n\nimport numeral from 'numeral'\nimport get from 'lodash/get'\n\nexport const Table = ({\n  config = { column_order: [], show_row_numbers: true, type: 'table' },\n  data = [],\n  fields = DEFAULT_EMPTY_FIELDS,\n  height = DEFAULT_HEIGHT,\n  pivots,\n  width,\n  totals,\n  defaultRowHeight,\n}: TableProps) => {\n  const { t } = useTranslation('Table')\n\n  const scrollContainer = useRef<HTMLDivElement>(null)\n\n  const { table, sorting, handleTableSort } = useHeadlessTable({\n    data,\n    config,\n    fields,\n    pivots,\n  })\n\n  const tableRows = table.getRowModel().rows\n\n  const dataToVirtualize = tableRows.map(row => row.getVisibleCells())\n\n  const virtualizerAssets = useVirtual({\n    data: dataToVirtualize,\n    scrollContainer,\n    defaultRowHeight,\n  })\n\n  const {\n    virtualRows,\n    virtualColumns,\n    OffsetTop,\n    OffsetBottom,\n    OffsetLeft,\n    OffsetRight,\n  } = virtualizerAssets\n\n  const {\n    series = {},\n    show_row_numbers,\n    truncate_text,\n    truncate_header,\n  } = config\n\n  const seriesMinMax = Object.fromEntries(\n    fields.measures.map(({ name }) => {\n      const min = getSeriesMin(name, data)\n      const max = getSeriesMax(name, data)\n      return [name, { min, max }]\n    })\n  )\n\n  const headerGroups = normalizeHeaderColumns(table)\n\n  const rowNumWidth = String(data.length).length * 10\n\n  return (\n    <ScrollWrapper width={width} height={height} ref={scrollContainer}>\n      <TableElement cellSpacing=\"0\">\n        <THead>\n          {headerGroups.map((headerGroup, i) => {\n            return (\n              <tr key={`theadRow${i}`}>\n                <OffsetLeft as=\"th\" />\n\n                {show_row_numbers ? (\n                  <TableHeadCell stickyLeft>\n                    <PlaceholderElement width={rowNumWidth} />\n                  </TableHeadCell>\n                ) : undefined}\n\n                {virtualColumns.map(\n                  ({ index: columnIndex, measureElement, size }) => {\n                    const header = headerGroup.headers[columnIndex]\n\n                    if (header) {\n                      const { header: headerContent } = header.column.columnDef\n\n                      const columnSortState = sorting.find(\n                        s => s.id === header.id\n                      )\n\n                      const { SortIcon, sortText, ariaSort } = getSortAssets(\n                        t,\n                        columnSortState\n                      )\n\n                      return (\n                        <TableHeadCell\n                          key={header.id}\n                          colSpan={header.colSpan}\n                          aria-sort={ariaSort}\n                        >\n                          <TableHeadLayout\n                            sortButtonDefaultVisible={!!columnSortState}\n                            ref={measureElement}\n                            width={size}\n                          >\n                            <HeaderContentWrapper\n                              truncateHeader={!!truncate_header}\n                              data-testid=\"columnheader-label\"\n                            >\n                              {flexRender(headerContent, header.getContext())}\n                            </HeaderContentWrapper>\n                            {i === headerGroups.length - 1 && (\n                              /* only render sort button in last header row */\n                              <IconButton\n                                icon={<SortIcon />}\n                                label={sortText}\n                                outline\n                                shape=\"square\"\n                                size=\"xxsmall\"\n                                onClick={e => handleTableSort(header, e)}\n                              />\n                            )}\n                          </TableHeadLayout>\n                        </TableHeadCell>\n                      )\n                    } else {\n                      return null\n                    }\n                  }\n                )}\n\n                <OffsetRight as=\"th\" />\n              </tr>\n            )\n          })}\n        </THead>\n        <TBody>\n          <OffsetTop />\n          {virtualRows.map(({ index: rowIndex, measureElement, size }) => {\n            const tableRow = tableRows[rowIndex]\n\n            return (\n              <TableRow key={tableRow.id} ref={measureElement} height={size}>\n                <OffsetLeft />\n\n                {show_row_numbers ? (\n                  <TableCell stickyLeft>{rowIndex + 1}</TableCell>\n                ) : undefined}\n\n                {virtualColumns.map(({ index: columnIndex }) => {\n                  const { column, getContext, ...cell } =\n                    dataToVirtualize[rowIndex][columnIndex]\n\n                  const measureIndex = fields.measures.findIndex(\n                    m => m.name === column.id\n                  )\n                  const columnConfig: CTableSeries = Array.isArray(series)\n                    ? series[measureIndex]\n                    : series[column.id]\n\n                  const { cell: cellContent } = column.columnDef\n\n                  const { max, min } = seriesMinMax?.[column.id] || {\n                    max: Infinity,\n                    min: 0,\n                  }\n\n                  const valueFormat = Array.isArray(series)\n                    ? get(series, [measureIndex, 'value_format'])\n                    : get(series, [column.id, 'value_format'])\n\n                  const CellValue = cell.getValue()\n\n                  return (\n                    <TableCell key={cell.id}>\n                      {typeof CellValue === 'function' ? (\n                        <CellValue />\n                      ) : (\n                        <CellContentLayout>\n                          {columnConfig?.cell_visualization ? (\n                            <CellVisualization\n                              color={columnConfig.color}\n                              min={min}\n                              max={max}\n                              value={Number(cell.getValue())}\n                            />\n                          ) : null}\n                          <CellContentWrapper truncateText={!!truncate_text}>\n                            {valueFormat\n                              ? numeral(Number(cell.getValue())).format(\n                                  valueFormat\n                                )\n                              : flexRender(cellContent, getContext())}\n                          </CellContentWrapper>\n                        </CellContentLayout>\n                      )}\n                    </TableCell>\n                  )\n                })}\n              </TableRow>\n            )\n          })}\n          <OffsetBottom />\n        </TBody>\n        <TFoot>\n          <ColumnTotals\n            totals={totals}\n            config={config}\n            fields={fields}\n            virtualizerAssets={virtualizerAssets}\n            table={table}\n          />\n        </TFoot>\n      </TableElement>\n    </ScrollWrapper>\n  )\n}\n\n/**\n * Truncate table body content when truncateText is true\n */\nconst CellContentWrapper: FC<{ truncateText: boolean }> = ({\n  children,\n  truncateText,\n}) =>\n  truncateText ? (\n    <Grid columns={1} width=\"auto\">\n      <Truncate>{children}</Truncate>\n    </Grid>\n  ) : (\n    <>{children}</>\n  )\n\n/**\n * Truncate header text when truncateHeader is true\n */\nconst HeaderContentWrapper: FC<{ truncateHeader: boolean }> = ({\n  truncateHeader,\n  ...props\n}) => (truncateHeader ? <Truncate {...props} /> : <Box {...props} />)\n\nconst PlaceholderElement = styled.div.attrs<{ width?: number }>(\n  ({ width }) => ({ style: { minWidth: width } })\n)<{ width?: number }>``\n\nconst ScrollWrapper = styled.div<{ width?: number; height: number }>`\n  max-height: ${({ height }) => `${height}px`};\n  overflow: auto;\n  max-width: ${({ width }) => (width ? `${width}px` : `100%`)};\n  position: relative;\n`\n\nconst TableElement = styled.table`\n  width: 100%;\n  color: ${({ theme }) => theme.colors.text5};\n  font-family: ${({ theme }) => theme.fonts.body};\n`\n\nconst THead = styled.thead`\n  top: 0;\n  position: sticky;\n  z-index: 1;\n`\n\nconst TFoot = styled.tfoot`\n  position: sticky;\n  bottom: 0px;\n`\n\nconst TBody = styled.tbody`\n  position: relative;\n  z-index: 0;\n`\n\nconst TableRow = styled.tr.attrs<{ height?: number }>(({ height }) => ({\n  height,\n}))<{ height?: number }>`\n  :nth-child(even) {\n    ${TableCell} {\n      background-color: ${({ theme }) => theme.colors.ui1};\n    }\n  }\n  :nth-child(odd) {\n    ${TableCell} {\n      background-color: ${({ theme }) => theme.colors.background};\n    }\n  }\n`\n\nconst CellContentLayout = styled.div`\n  align-items: center;\n  display: flex;\n  gap: ${({ theme }) => theme.space.xxsmall};\n`\n\nconst TableHeadLayout = styled.div.attrs<{ width?: number }>(({ width }) => ({\n  style: { minWidth: width },\n}))<{ width?: number; sortButtonDefaultVisible?: boolean }>`\n  display: grid;\n  grid-template-columns: minMax(${({ theme }) => theme.space.u16}, 1fr) auto;\n  grid-gap: ${({ theme }) => theme.space.xxsmall};\n  ${IconButton} {\n    ${({ sortButtonDefaultVisible }) =>\n      sortButtonDefaultVisible\n        ? css`\n            visibility: visible;\n          `\n        : css`\n            visibility: hidden;\n          `}\n  }\n  &:hover {\n    ${IconButton} {\n      visibility: visible;\n    }\n  }\n`\n"],"names":[],"sourceRoot":""}