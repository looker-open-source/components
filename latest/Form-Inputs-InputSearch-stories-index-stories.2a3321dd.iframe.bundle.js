"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[1517],{"../components/src/Form/Inputs/InputSearch/stories/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AutoResize:()=>AutoResize,Basic:()=>Basic,ClearIconLabel:()=>ClearIconLabel,Controlled:()=>Controlled,DefaultValue:()=>DefaultValue,Disable:()=>Disable,GroupedWindowing:()=>GroupedWindowing,HideSearchIcon:()=>HideSearchIcon,IsClearable:()=>IsClearable,Options:()=>Options,ReadOnly:()=>ReadOnly,Summary:()=>Summary,__namedExportsOrder:()=>__namedExportsOrder,default:()=>index_stories});var defaultArgTypes=__webpack_require__("./src/defaultArgTypes.ts"),InputSearch=__webpack_require__("../components/src/Form/Inputs/InputSearch/InputSearch.tsx"),esm_extends=__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"),react=__webpack_require__("../../node_modules/react/index.js");function Basic(props){const{placeholder="Type your search",...restProps}=props;return react.createElement(InputSearch.V,(0,esm_extends.Z)({placeholder},restProps))}try{Basic.displayName="Basic",Basic.__docgenInfo={description:"",displayName:"Basic",props:{changeOnSelect:{defaultValue:{value:"true"},description:"Selecting an option updates the input's value\n@experimental",name:"changeOnSelect",required:!1,type:{name:"boolean"}},clearOnClose:{defaultValue:{value:"false"},description:"Clear the input value when the option list closes\nDefaults to the inverse of changeOnSelect\n@experimental",name:"clearOnClose",required:!1,type:{name:"boolean"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the clear icon",name:"clearIconLabel",required:!1,type:{name:"string"}},hideSearchIcon:{defaultValue:null,description:"",name:"hideSearchIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:{value:"true"},description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"If defined, the popup will render with this text when there are no options.\n@experimental",name:"noOptionsLabel",required:!1,type:{name:"string"}},onSelectOption:{defaultValue:null,description:"Called when the user selects one of the options\nonChange will also be called with the option's value unless changeOnSelect is set to false\n@experimental",name:"onSelectOption",required:!1,type:{name:"((option?: SelectOptionObject) => void)"}},openOnClick:{defaultValue:{value:"false"},description:"If true, the popover opens when the text box is clicked.\n@experimental",name:"openOnClick",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}},autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/InputSearch/stories/Basic.tsx#Basic"]={docgenInfo:Basic.__docgenInfo,name:"Basic",path:"../components/src/Form/Inputs/InputSearch/stories/Basic.tsx#Basic"})}catch(__react_docgen_typescript_loader_error){}function AutoResize(props){const{autoResize=!0,placeholder="Start typing to resize",...restProps}=props;return react.createElement(InputSearch.V,(0,esm_extends.Z)({autoResize,placeholder},restProps))}try{AutoResize.displayName="AutoResize",AutoResize.__docgenInfo={description:"",displayName:"AutoResize",props:{changeOnSelect:{defaultValue:{value:"true"},description:"Selecting an option updates the input's value\n@experimental",name:"changeOnSelect",required:!1,type:{name:"boolean"}},clearOnClose:{defaultValue:{value:"false"},description:"Clear the input value when the option list closes\nDefaults to the inverse of changeOnSelect\n@experimental",name:"clearOnClose",required:!1,type:{name:"boolean"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the clear icon",name:"clearIconLabel",required:!1,type:{name:"string"}},hideSearchIcon:{defaultValue:null,description:"",name:"hideSearchIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:{value:"true"},description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"If defined, the popup will render with this text when there are no options.\n@experimental",name:"noOptionsLabel",required:!1,type:{name:"string"}},onSelectOption:{defaultValue:null,description:"Called when the user selects one of the options\nonChange will also be called with the option's value unless changeOnSelect is set to false\n@experimental",name:"onSelectOption",required:!1,type:{name:"((option?: SelectOptionObject) => void)"}},openOnClick:{defaultValue:{value:"false"},description:"If true, the popover opens when the text box is clicked.\n@experimental",name:"openOnClick",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}},autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/InputSearch/stories/AutoResize.tsx#AutoResize"]={docgenInfo:AutoResize.__docgenInfo,name:"AutoResize",path:"../components/src/Form/Inputs/InputSearch/stories/AutoResize.tsx#AutoResize"})}catch(__react_docgen_typescript_loader_error){}function ClearIconLabel(props){const{clearIconLabel="Reset this seach field",value="my query",...restProps}=props;return react.createElement(InputSearch.V,(0,esm_extends.Z)({clearIconLabel,value},restProps))}try{ClearIconLabel.displayName="ClearIconLabel",ClearIconLabel.__docgenInfo={description:"",displayName:"ClearIconLabel",props:{changeOnSelect:{defaultValue:{value:"true"},description:"Selecting an option updates the input's value\n@experimental",name:"changeOnSelect",required:!1,type:{name:"boolean"}},clearOnClose:{defaultValue:{value:"false"},description:"Clear the input value when the option list closes\nDefaults to the inverse of changeOnSelect\n@experimental",name:"clearOnClose",required:!1,type:{name:"boolean"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the clear icon",name:"clearIconLabel",required:!1,type:{name:"string"}},hideSearchIcon:{defaultValue:null,description:"",name:"hideSearchIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:{value:"true"},description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"If defined, the popup will render with this text when there are no options.\n@experimental",name:"noOptionsLabel",required:!1,type:{name:"string"}},onSelectOption:{defaultValue:null,description:"Called when the user selects one of the options\nonChange will also be called with the option's value unless changeOnSelect is set to false\n@experimental",name:"onSelectOption",required:!1,type:{name:"((option?: SelectOptionObject) => void)"}},openOnClick:{defaultValue:{value:"false"},description:"If true, the popover opens when the text box is clicked.\n@experimental",name:"openOnClick",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}},autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/InputSearch/stories/ClearIconLabel.tsx#ClearIconLabel"]={docgenInfo:ClearIconLabel.__docgenInfo,name:"ClearIconLabel",path:"../components/src/Form/Inputs/InputSearch/stories/ClearIconLabel.tsx#ClearIconLabel"})}catch(__react_docgen_typescript_loader_error){}function Controlled(){const[keyword,setKeyword]=(0,react.useState)("Default Value");return react.createElement(InputSearch.V,{placeholder:"Type your search",summary:keyword.length>0?`You typed ${keyword.length} characters`:"",value:keyword,onChange:setKeyword})}function DefaultValue(props){const{placeholder="Type your search",defaultValue="test search 0",...restProps}=props;return react.createElement(InputSearch.V,(0,esm_extends.Z)({placeholder,defaultValue},restProps))}try{DefaultValue.displayName="DefaultValue",DefaultValue.__docgenInfo={description:"",displayName:"DefaultValue",props:{changeOnSelect:{defaultValue:{value:"true"},description:"Selecting an option updates the input's value\n@experimental",name:"changeOnSelect",required:!1,type:{name:"boolean"}},clearOnClose:{defaultValue:{value:"false"},description:"Clear the input value when the option list closes\nDefaults to the inverse of changeOnSelect\n@experimental",name:"clearOnClose",required:!1,type:{name:"boolean"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the clear icon",name:"clearIconLabel",required:!1,type:{name:"string"}},hideSearchIcon:{defaultValue:null,description:"",name:"hideSearchIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:{value:"true"},description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"If defined, the popup will render with this text when there are no options.\n@experimental",name:"noOptionsLabel",required:!1,type:{name:"string"}},onSelectOption:{defaultValue:null,description:"Called when the user selects one of the options\nonChange will also be called with the option's value unless changeOnSelect is set to false\n@experimental",name:"onSelectOption",required:!1,type:{name:"((option?: SelectOptionObject) => void)"}},openOnClick:{defaultValue:{value:"false"},description:"If true, the popover opens when the text box is clicked.\n@experimental",name:"openOnClick",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}},autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/InputSearch/stories/DefaultValue.tsx#DefaultValue"]={docgenInfo:DefaultValue.__docgenInfo,name:"DefaultValue",path:"../components/src/Form/Inputs/InputSearch/stories/DefaultValue.tsx#DefaultValue"})}catch(__react_docgen_typescript_loader_error){}var SpaceVertical=__webpack_require__("../components/src/Layout/Space/SpaceVertical/SpaceVertical.tsx");function Disable(props){const{disabled=!0,placeholder="Type your search",value="Value Disabled",...restProps}=props;return react.createElement(SpaceVertical.s,{align:"start"},react.createElement(InputSearch.V,{disabled}),react.createElement(InputSearch.V,{disabled,value}),react.createElement(InputSearch.V,(0,esm_extends.Z)({disabled,placeholder},restProps)))}try{Disable.displayName="Disable",Disable.__docgenInfo={description:"",displayName:"Disable",props:{changeOnSelect:{defaultValue:{value:"true"},description:"Selecting an option updates the input's value\n@experimental",name:"changeOnSelect",required:!1,type:{name:"boolean"}},clearOnClose:{defaultValue:{value:"false"},description:"Clear the input value when the option list closes\nDefaults to the inverse of changeOnSelect\n@experimental",name:"clearOnClose",required:!1,type:{name:"boolean"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the clear icon",name:"clearIconLabel",required:!1,type:{name:"string"}},hideSearchIcon:{defaultValue:null,description:"",name:"hideSearchIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:{value:"true"},description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"If defined, the popup will render with this text when there are no options.\n@experimental",name:"noOptionsLabel",required:!1,type:{name:"string"}},onSelectOption:{defaultValue:null,description:"Called when the user selects one of the options\nonChange will also be called with the option's value unless changeOnSelect is set to false\n@experimental",name:"onSelectOption",required:!1,type:{name:"((option?: SelectOptionObject) => void)"}},openOnClick:{defaultValue:{value:"false"},description:"If true, the popover opens when the text box is clicked.\n@experimental",name:"openOnClick",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}},autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/InputSearch/stories/Disable.tsx#Disable"]={docgenInfo:Disable.__docgenInfo,name:"Disable",path:"../components/src/Form/Inputs/InputSearch/stories/Disable.tsx#Disable"})}catch(__react_docgen_typescript_loader_error){}var options1k=__webpack_require__("../components/src/Form/Inputs/Select/stories/options1k.ts");function GroupedWindowing(props){const{placeholder="Type your search",width=400,...restProps}=props;return react.createElement(InputSearch.V,(0,esm_extends.Z)({placeholder,options:options1k.d,width},restProps))}try{GroupedWindowing.displayName="GroupedWindowing",GroupedWindowing.__docgenInfo={description:"",displayName:"GroupedWindowing",props:{changeOnSelect:{defaultValue:{value:"true"},description:"Selecting an option updates the input's value\n@experimental",name:"changeOnSelect",required:!1,type:{name:"boolean"}},clearOnClose:{defaultValue:{value:"false"},description:"Clear the input value when the option list closes\nDefaults to the inverse of changeOnSelect\n@experimental",name:"clearOnClose",required:!1,type:{name:"boolean"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the clear icon",name:"clearIconLabel",required:!1,type:{name:"string"}},hideSearchIcon:{defaultValue:null,description:"",name:"hideSearchIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:{value:"true"},description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"If defined, the popup will render with this text when there are no options.\n@experimental",name:"noOptionsLabel",required:!1,type:{name:"string"}},onSelectOption:{defaultValue:null,description:"Called when the user selects one of the options\nonChange will also be called with the option's value unless changeOnSelect is set to false\n@experimental",name:"onSelectOption",required:!1,type:{name:"((option?: SelectOptionObject) => void)"}},openOnClick:{defaultValue:{value:"false"},description:"If true, the popover opens when the text box is clicked.\n@experimental",name:"openOnClick",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}},autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/InputSearch/stories/GroupedWindowing.tsx#GroupedWindowing"]={docgenInfo:GroupedWindowing.__docgenInfo,name:"GroupedWindowing",path:"../components/src/Form/Inputs/InputSearch/stories/GroupedWindowing.tsx#GroupedWindowing"})}catch(__react_docgen_typescript_loader_error){}function HideSearchIcon(props){const{hideSearchIcon=!1,placeholder="No search icon here",...restProps}=props;return react.createElement(InputSearch.V,(0,esm_extends.Z)({hideSearchIcon,placeholder},restProps))}try{HideSearchIcon.displayName="HideSearchIcon",HideSearchIcon.__docgenInfo={description:"",displayName:"HideSearchIcon",props:{changeOnSelect:{defaultValue:{value:"true"},description:"Selecting an option updates the input's value\n@experimental",name:"changeOnSelect",required:!1,type:{name:"boolean"}},clearOnClose:{defaultValue:{value:"false"},description:"Clear the input value when the option list closes\nDefaults to the inverse of changeOnSelect\n@experimental",name:"clearOnClose",required:!1,type:{name:"boolean"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the clear icon",name:"clearIconLabel",required:!1,type:{name:"string"}},hideSearchIcon:{defaultValue:null,description:"",name:"hideSearchIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:{value:"true"},description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"If defined, the popup will render with this text when there are no options.\n@experimental",name:"noOptionsLabel",required:!1,type:{name:"string"}},onSelectOption:{defaultValue:null,description:"Called when the user selects one of the options\nonChange will also be called with the option's value unless changeOnSelect is set to false\n@experimental",name:"onSelectOption",required:!1,type:{name:"((option?: SelectOptionObject) => void)"}},openOnClick:{defaultValue:{value:"false"},description:"If true, the popover opens when the text box is clicked.\n@experimental",name:"openOnClick",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}},autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/InputSearch/stories/HideSearchIcon.tsx#HideSearchIcon"]={docgenInfo:HideSearchIcon.__docgenInfo,name:"HideSearchIcon",path:"../components/src/Form/Inputs/InputSearch/stories/HideSearchIcon.tsx#HideSearchIcon"})}catch(__react_docgen_typescript_loader_error){}function IsClearable(props){const{placeholder="Type your search",defaultValue="test search 1",isClearable=!1,...restProps}=props;return react.createElement(InputSearch.V,(0,esm_extends.Z)({placeholder,defaultValue,isClearable},restProps))}try{IsClearable.displayName="IsClearable",IsClearable.__docgenInfo={description:"",displayName:"IsClearable",props:{changeOnSelect:{defaultValue:{value:"true"},description:"Selecting an option updates the input's value\n@experimental",name:"changeOnSelect",required:!1,type:{name:"boolean"}},clearOnClose:{defaultValue:{value:"false"},description:"Clear the input value when the option list closes\nDefaults to the inverse of changeOnSelect\n@experimental",name:"clearOnClose",required:!1,type:{name:"boolean"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the clear icon",name:"clearIconLabel",required:!1,type:{name:"string"}},hideSearchIcon:{defaultValue:null,description:"",name:"hideSearchIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:{value:"true"},description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"If defined, the popup will render with this text when there are no options.\n@experimental",name:"noOptionsLabel",required:!1,type:{name:"string"}},onSelectOption:{defaultValue:null,description:"Called when the user selects one of the options\nonChange will also be called with the option's value unless changeOnSelect is set to false\n@experimental",name:"onSelectOption",required:!1,type:{name:"((option?: SelectOptionObject) => void)"}},openOnClick:{defaultValue:{value:"false"},description:"If true, the popover opens when the text box is clicked.\n@experimental",name:"openOnClick",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}},autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/InputSearch/stories/IsClearable.tsx#IsClearable"]={docgenInfo:IsClearable.__docgenInfo,name:"IsClearable",path:"../components/src/Form/Inputs/InputSearch/stories/IsClearable.tsx#IsClearable"})}catch(__react_docgen_typescript_loader_error){}var Space=__webpack_require__("../components/src/Layout/Space/Space/Space.tsx");function Options(){return react.createElement(Space.T,null,react.createElement(InputSearch.V,{options:[{description:"Delicious cheese",detail:"Netherlands ",value:"Gouda"},{value:"Cheddar"}],onSelectOption:option=>option&&alert(`You picked ${option.value}`),changeOnSelect:!1,placeholder:"Options act like results"}),react.createElement(InputSearch.V,{options:[{value:"Jack"},{value:"Swiss"}],placeholder:"Options act like suggestions"}))}function ReadOnly(props){const{value="You can't change me.",readOnly=!0,...restProps}=props;return react.createElement(InputSearch.V,(0,esm_extends.Z)({value,readOnly},restProps))}try{ReadOnly.displayName="ReadOnly",ReadOnly.__docgenInfo={description:"",displayName:"ReadOnly",props:{changeOnSelect:{defaultValue:{value:"true"},description:"Selecting an option updates the input's value\n@experimental",name:"changeOnSelect",required:!1,type:{name:"boolean"}},clearOnClose:{defaultValue:{value:"false"},description:"Clear the input value when the option list closes\nDefaults to the inverse of changeOnSelect\n@experimental",name:"clearOnClose",required:!1,type:{name:"boolean"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the clear icon",name:"clearIconLabel",required:!1,type:{name:"string"}},hideSearchIcon:{defaultValue:null,description:"",name:"hideSearchIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:{value:"true"},description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"If defined, the popup will render with this text when there are no options.\n@experimental",name:"noOptionsLabel",required:!1,type:{name:"string"}},onSelectOption:{defaultValue:null,description:"Called when the user selects one of the options\nonChange will also be called with the option's value unless changeOnSelect is set to false\n@experimental",name:"onSelectOption",required:!1,type:{name:"((option?: SelectOptionObject) => void)"}},openOnClick:{defaultValue:{value:"false"},description:"If true, the popover opens when the text box is clicked.\n@experimental",name:"openOnClick",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}},autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/InputSearch/stories/ReadOnly.tsx#ReadOnly"]={docgenInfo:ReadOnly.__docgenInfo,name:"ReadOnly",path:"../components/src/Form/Inputs/InputSearch/stories/ReadOnly.tsx#ReadOnly"})}catch(__react_docgen_typescript_loader_error){}function Summary(props){const{placeholder="Type your search",summary="summary text",...restProps}=props;return react.createElement(InputSearch.V,(0,esm_extends.Z)({placeholder,summary},restProps))}try{Summary.displayName="Summary",Summary.__docgenInfo={description:"",displayName:"Summary",props:{changeOnSelect:{defaultValue:{value:"true"},description:"Selecting an option updates the input's value\n@experimental",name:"changeOnSelect",required:!1,type:{name:"boolean"}},clearOnClose:{defaultValue:{value:"false"},description:"Clear the input value when the option list closes\nDefaults to the inverse of changeOnSelect\n@experimental",name:"clearOnClose",required:!1,type:{name:"boolean"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the clear icon",name:"clearIconLabel",required:!1,type:{name:"string"}},hideSearchIcon:{defaultValue:null,description:"",name:"hideSearchIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:{value:"true"},description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"If defined, the popup will render with this text when there are no options.\n@experimental",name:"noOptionsLabel",required:!1,type:{name:"string"}},onSelectOption:{defaultValue:null,description:"Called when the user selects one of the options\nonChange will also be called with the option's value unless changeOnSelect is set to false\n@experimental",name:"onSelectOption",required:!1,type:{name:"((option?: SelectOptionObject) => void)"}},openOnClick:{defaultValue:{value:"false"},description:"If true, the popover opens when the text box is clicked.\n@experimental",name:"openOnClick",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}},autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/InputSearch/stories/Summary.tsx#Summary"]={docgenInfo:Summary.__docgenInfo,name:"Summary",path:"../components/src/Form/Inputs/InputSearch/stories/Summary.tsx#Summary"})}catch(__react_docgen_typescript_loader_error){}const index_stories={argTypes:defaultArgTypes.W,component:InputSearch.V,parameters:{storyshots:{disable:!0}},title:"Stories/InputSearch"},__namedExportsOrder=["Basic","AutoResize","ClearIconLabel","Controlled","DefaultValue","Disable","GroupedWindowing","HideSearchIcon","IsClearable","Options","ReadOnly","Summary"];try{indexstories.displayName="indexstories",indexstories.__docgenInfo={description:"",displayName:"indexstories",props:{changeOnSelect:{defaultValue:{value:"true"},description:"Selecting an option updates the input's value\n@experimental",name:"changeOnSelect",required:!1,type:{name:"boolean"}},clearOnClose:{defaultValue:{value:"false"},description:"Clear the input value when the option list closes\nDefaults to the inverse of changeOnSelect\n@experimental",name:"clearOnClose",required:!1,type:{name:"boolean"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the clear icon",name:"clearIconLabel",required:!1,type:{name:"string"}},hideSearchIcon:{defaultValue:null,description:"",name:"hideSearchIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:{value:"true"},description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"If defined, the popup will render with this text when there are no options.\n@experimental",name:"noOptionsLabel",required:!1,type:{name:"string"}},onSelectOption:{defaultValue:null,description:"Called when the user selects one of the options\nonChange will also be called with the option's value unless changeOnSelect is set to false\n@experimental",name:"onSelectOption",required:!1,type:{name:"((option?: SelectOptionObject) => void)"}},openOnClick:{defaultValue:{value:"false"},description:"If true, the popover opens when the text box is clicked.\n@experimental",name:"openOnClick",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}},autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/InputSearch/stories/index.stories.tsx#indexstories"]={docgenInfo:indexstories.__docgenInfo,name:"indexstories",path:"../components/src/Form/Inputs/InputSearch/stories/index.stories.tsx#indexstories"})}catch(__react_docgen_typescript_loader_error){}}}]);