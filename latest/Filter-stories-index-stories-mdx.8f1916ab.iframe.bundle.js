"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[6318],{"./src/defaultArgTypes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>defaultArgTypes,q:()=>excludedProps});const defaultArgTypes={as:{table:{disable:!0}},forwardedAs:{table:{disable:!0}},ref:{table:{disable:!0}},theme:{table:{disable:!0}}},excludedProps=Object.keys(defaultArgTypes)},"../filter-components/src/Filter/stories/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>index_stories});__webpack_require__("../../node_modules/react/index.js");var esm=__webpack_require__("../../node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("../../node_modules/@storybook/addon-docs/dist/esm/index.js"),Filter=__webpack_require__("../filter-components/src/Filter/Filter.tsx"),ImportMessage=__webpack_require__("./src/ImportMessage.tsx"),Editor=__webpack_require__("./src/Editor/index.tsx"),defaultArgTypes=__webpack_require__("./src/defaultArgTypes.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const layoutProps={};function MDXContent({components,...props}){return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(dist_esm.Meta,{component:Filter.w,title:"Filters/Docs/Filter",mdxType:"Meta"}),(0,esm.kt)("h1",{id:"filter"},"Filter"),(0,esm.kt)(ImportMessage.ImportMessage,{packageName:"filter-components",mdxType:"ImportMessage"},"Filter"),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"Filter")," is the top level component for rendering a\n",(0,esm.kt)("a",{parentName:"p",href:"https://cloud.google.com/looker/docs/reference/filter-expressions",target:"_blank",rel:"nofollow noopener noreferrer"},"Looker filter expression"),"\nthat the user can update."),(0,esm.kt)("p",null,(0,esm.kt)("strong",{parentName:"p"},"Note:")," for more out-of-the-box render of a dashboard filter, including label,\nsuggestion fetching, and validation messaging, see the\n",(0,esm.kt)("a",{parentName:"p",href:"dashboard-filter"},(0,esm.kt)("inlineCode",{parentName:"a"},"DashboardFilter"))," component."),(0,esm.kt)("h2",{id:"expressiontype"},"expressionType"),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"Filter")," relies on the ",(0,esm.kt)("inlineCode",{parentName:"p"},"expressionType")," to properly parse and render the expression.\nIt can eithe rtake the ",(0,esm.kt)("inlineCode",{parentName:"p"},"expressionType")," prop directly or derive it from filter\n",(0,esm.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,esm.kt)("inlineCode",{parentName:"p"},"field")," returned by the Looker API."),(0,esm.kt)(Editor.Editor,{code:'/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from \'react\'\nimport { SpaceVertical } from \'@looker/components\'\nimport { Filter } from \'../Filter\'\n\nexport default function ExpressionTypeOrField() {\n  return (\n    <SpaceVertical>\n      <Filter name="Age" expressionType="number" expression="[0,100]" />\n      <Filter\n        name="Age"\n        type="field_filter"\n        field={{ is_numeric: true }}\n        expression="[0,100]"\n      />\n    </SpaceVertical>\n  )\n}\n',mdxType:"Editor"}),(0,esm.kt)("h2",{id:"expression--onchange"},"expression & onChange"),(0,esm.kt)("p",null,"Use ",(0,esm.kt)("inlineCode",{parentName:"p"},"onChange")," to get updates to the ",(0,esm.kt)("inlineCode",{parentName:"p"},"expression"),"."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React, { useState } from 'react'\nimport { Paragraph, SpaceVertical } from '@looker/components'\nimport { Filter } from '../Filter'\nimport type { FilterChangeProps } from '../types/filter_props'\n\nexport default function ExpressionOnChange() {\n  const [expression, setExpression] = useState('[0,100]')\n  const handleChange = (value: FilterChangeProps) => {\n    setExpression(value.expression)\n  }\n  return (\n    <SpaceVertical>\n      <Filter\n        name=\"Age\"\n        expressionType=\"number\"\n        expression={expression}\n        onChange={handleChange}\n      />\n      <Paragraph>\n        <strong>Current filter expression:</strong> {expression}\n      </Paragraph>\n    </SpaceVertical>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"suggestions"},"Suggestions"),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"Filter")," supports suggestions for string expression types."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { Filter } from '../Filter'\n\nexport default function Suggestions() {\n  return (\n    <Filter\n      name=\"Status\"\n      expressionType=\"string\"\n      expression=\"pending\"\n      suggestions={['complete', 'pending', 'cancelled']}\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"useSuggestable")," hook will fetch and format suggestions when passed an\ninitialized Looker SDK instance."),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"static",static:!0},'const FilterItem = ({ filter, sdk }) => {\n  const { errorMessage, suggestableProps } = useSuggestable({\n    filter,\n    sdk,\n  })\n\n  return (\n    <Filter\n      name="Status"\n      expressionType="string"\n      expression="pending"\n      {...suggestableProps}\n    />\n  )\n}\n')),(0,esm.kt)("h2",{id:"config"},"Config"),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"Filter")," supports the various permutations of UI ",(0,esm.kt)("inlineCode",{parentName:"p"},"config")," options that are returned in the\nLooker API via the filter's ",(0,esm.kt)("inlineCode",{parentName:"p"},"ui_config")," property."),(0,esm.kt)(Editor.Editor,{code:'/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the "Software"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React from \'react\'\nimport { SpaceVertical, Heading, Space, Divider } from \'@looker/components\'\nimport { Filter } from \'../Filter\'\n\nexport default function Config() {\n  return (\n    <SpaceVertical>\n      <Heading as="h3">String</Heading>\n      <Space align="start">\n        <SpaceVertical>\n          <Heading as="h5">button_group</Heading>\n          <Filter\n            name="Status"\n            expressionType="string"\n            expression="pending,complete"\n            config={{ type: \'button_group\' }}\n            suggestions={[\'complete\', \'pending\', \'cancelled\']}\n          />\n        </SpaceVertical>\n        <SpaceVertical>\n          <Heading as="h5">button_toggles</Heading>\n          <Filter\n            name="Status"\n            expressionType="string"\n            expression="pending"\n            config={{ type: \'button_toggles\' }}\n            suggestions={[\'complete\', \'pending\', \'cancelled\']}\n          />\n        </SpaceVertical>\n      </Space>\n      <Space>\n        <SpaceVertical>\n          <Heading as="h5">taglist</Heading>\n          <Filter\n            name="Status"\n            expressionType="string"\n            expression="pending,complete"\n            config={{ type: \'tag_list\' }}\n            suggestions={[\'complete\', \'pending\', \'cancelled\']}\n          />\n        </SpaceVertical>\n        <SpaceVertical>\n          <Heading as="h5">dropdown_menu</Heading>\n          <Filter\n            name="Status"\n            expressionType="string"\n            expression="pending"\n            config={{ type: \'dropdown_menu\' }}\n            suggestions={[\'complete\', \'pending\', \'cancelled\']}\n          />\n        </SpaceVertical>\n      </Space>\n      <Space>\n        <SpaceVertical>\n          <Heading as="h5">checkboxes</Heading>\n          <Filter\n            name="Status"\n            expressionType="string"\n            expression="pending,complete"\n            config={{ type: \'checkboxes\' }}\n            suggestions={[\'complete\', \'pending\', \'cancelled\']}\n          />\n        </SpaceVertical>\n        <SpaceVertical>\n          <Heading as="h5">radio_buttons</Heading>\n          <Filter\n            name="Status"\n            expressionType="string"\n            expression="pending"\n            config={{ type: \'radio_buttons\' }}\n            suggestions={[\'complete\', \'pending\', \'cancelled\']}\n          />\n        </SpaceVertical>\n      </Space>\n      <Divider />\n      <Heading as="h3">Date</Heading>\n      <Space>\n        <SpaceVertical>\n          <Heading as="h5">relative_timeframes</Heading>\n          <Filter\n            name="Date"\n            expressionType="date"\n            expression="7 day"\n            config={{ type: \'relative_timeframes\' }}\n          />\n        </SpaceVertical>\n        <SpaceVertical>\n          <Heading as="h5">day_picker</Heading>\n          <Filter\n            name="Date"\n            expressionType="date"\n            expression="2021/06/29"\n            config={{ type: \'day_picker\' }}\n          />\n        </SpaceVertical>\n      </Space>\n      <SpaceVertical>\n        <Heading as="h5">day_range_picker</Heading>\n        <Filter\n          name="Date"\n          expressionType="date"\n          expression="2021/06/01 to 2021/06/30"\n          config={{ type: \'day_range_picker\' }}\n        />\n      </SpaceVertical>\n      <Divider />\n      <Heading as="h3">Number</Heading>\n      <Space>\n        <SpaceVertical>\n          <Heading as="h5">slider</Heading>\n          <Filter\n            name="Age"\n            expressionType="number"\n            expression="55"\n            config={{ max: 120, min: 0, type: \'slider\' }}\n          />\n        </SpaceVertical>\n        <SpaceVertical>\n          <Heading as="h5">range_slider</Heading>\n          <Filter\n            name="Age"\n            expressionType="number"\n            expression="[0,45]"\n            config={{ max: 120, min: 0, type: \'range_slider\' }}\n          />\n        </SpaceVertical>\n      </Space>\n    </SpaceVertical>\n  )\n}\n',mdxType:"Editor"}),(0,esm.kt)("h2",{id:"props"},"Props"),(0,esm.kt)(dist_esm.ArgsTable,{of:Filter.w,exclude:defaultArgTypes.q,mdxType:"ArgsTable"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Filters/Docs/Filter",component:Filter.w,includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,esm.kt)(MDXContent,null)};const index_stories=componentMeta,__namedExportsOrder=["__page"]}}]);