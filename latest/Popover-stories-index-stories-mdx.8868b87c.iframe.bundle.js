"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[5762],{"./src/defaultArgTypes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>defaultArgTypes,q:()=>excludedProps});const defaultArgTypes={as:{table:{disable:!0}},forwardedAs:{table:{disable:!0}},ref:{table:{disable:!0}},theme:{table:{disable:!0}}},excludedProps=Object.keys(defaultArgTypes)},"../components/src/Popover/stories/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>index_stories});__webpack_require__("../../node_modules/react/index.js");var esm=__webpack_require__("../../node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("../../node_modules/@storybook/addon-docs/dist/esm/index.js"),Popover=__webpack_require__("../components/src/Popover/Popover.tsx"),Editor=__webpack_require__("./src/Editor/index.tsx"),defaultArgTypes=__webpack_require__("./src/defaultArgTypes.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const layoutProps={};function MDXContent({components,...props}){return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(dist_esm.Meta,{component:Popover.J,title:"Docs/Popover",mdxType:"Meta"}),(0,esm.kt)("h1",{id:"popover"},"Popover"),(0,esm.kt)("p",null,"Popovers are containers for things like contextual information, menus, and related actions."),(0,esm.kt)("h2",{id:"terminology"},"Terminology"),(0,esm.kt)("p",null,"Popovers are assembled of two pieces: an overlay and a surface. Unlike ",(0,esm.kt)("a",{parentName:"p",href:"/components/dialogs/"},"Dialogs"),", the ",(0,esm.kt)("inlineCode",{parentName:"p"},"Popover")," overlay is transparent, but it still blocks the application behind it until it is closed, with the exception of ",(0,esm.kt)("a",{parentName:"p",href:"#grouped-popovers"},"grouped Popovers"),". The ",(0,esm.kt)("inlineCode",{parentName:"p"},"Popover"),"'s surface renders the content above the overlay and the rest of the application."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { Button } from '@looker/components'\nimport React from 'react'\nimport { Popover, PopoverLayout } from '..'\n\nexport default function PopoverWithLayout() {\n  return (\n    <Popover\n      width={640}\n      content={\n        <PopoverLayout header=\"Header text\" footer>\n          We the People of the United States\n        </PopoverLayout>\n      }\n    >\n      <Button>Open</Button>\n    </Popover>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"placement"},"Placement"),(0,esm.kt)("p",null,"Placement can be adjusted with the ",(0,esm.kt)("inlineCode",{parentName:"p"},"placement")," prop. Valid positions are ",(0,esm.kt)("inlineCode",{parentName:"p"},"top"),", ",(0,esm.kt)("inlineCode",{parentName:"p"},"left"),", ",(0,esm.kt)("inlineCode",{parentName:"p"},"right")," and ",(0,esm.kt)("inlineCode",{parentName:"p"},"bottom"),", each can be augmented with -",(0,esm.kt)("inlineCode",{parentName:"p"},"start")," or ",(0,esm.kt)("inlineCode",{parentName:"p"},"-end")," which places the edge of the popover at the start or end of the target."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { Paragraph, Box, Heading, Button } from '@looker/components'\nimport React from 'react'\nimport { Popover, PopoverContent } from '..'\n\nexport default function Placement() {\n  const popoverContent = (\n    <PopoverContent>\n      <Paragraph width={300} p=\"u10\">\n        ðŸ‘‹ Hello, I am a popover!\n      </Paragraph>\n    </PopoverContent>\n  )\n\n  return (\n    <Box mt=\"large\">\n      <Heading>Placement</Heading>\n      <Box my=\"medium\">\n        <Popover content={popoverContent}>\n          <Button>Default</Button>\n        </Popover>\n\n        <Popover content={popoverContent}>\n          <Button>Default</Button>\n        </Popover>\n      </Box>\n    </Box>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"disclosing-the-trigger-on-hover"},"Disclosing the Trigger on Hover"),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { Button, Card, CardContent, Space, Paragraph } from '@looker/components'\nimport React from 'react'\nimport { Popover, PopoverLayout } from '..'\n\nexport default function Hover() {\n  const hoverRef = React.useRef<HTMLDivElement>(null)\n  const content = <PopoverLayout>I'm in the popover</PopoverLayout>\n  return (\n    <Card ref={hoverRef} raised>\n      <CardContent>\n        <Space between>\n          <Paragraph>\n            Hovering in this card will show the button that triggers the\n            popover.\n          </Paragraph>\n          <Popover content={content} hoverDisclosureRef={hoverRef}>\n            <Button />\n          </Popover>\n        </Space>\n      </CardContent>\n    </Card>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"popovercontent"},"PopoverContent"),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"PopoverContent")," is a simple container component that can be used to apply a consistent style to content placed within a Popover surface."),(0,esm.kt)("h2",{id:"render-prop-style"},'"Render Prop" style'),(0,esm.kt)("p",null,"Sometimes you may need to control how ",(0,esm.kt)("inlineCode",{parentName:"p"},"Tooltip")," applies handlers to the component within it. If so you can use the render prop form of the component:"),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport { Paragraph } from '@looker/components'\nimport React from 'react'\nimport { Popover, PopoverContent } from '..'\n\nexport default function RenderProps() {\n  const popoverContent = (\n    <PopoverContent>\n      <Paragraph width={300} p=\"u10\">\n        ðŸ‘‹ Hello, I am a popover!\n      </Paragraph>\n    </PopoverContent>\n  )\n  return (\n    <Popover content={popoverContent}>\n      {props => <button {...props}>Test</button>}\n    </Popover>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"props"},"Props"),(0,esm.kt)(dist_esm.ArgsTable,{of:Popover.J,exclude:defaultArgTypes.q,mdxType:"ArgsTable"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Docs/Popover",component:Popover.J,includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,esm.kt)(MDXContent,null)};const index_stories=componentMeta,__namedExportsOrder=["__page"]}}]);