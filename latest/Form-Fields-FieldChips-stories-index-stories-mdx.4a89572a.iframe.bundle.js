"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[8762],{"./src/defaultArgTypes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>defaultArgTypes,q:()=>excludedProps});const defaultArgTypes={as:{table:{disable:!0}},forwardedAs:{table:{disable:!0}},ref:{table:{disable:!0}},theme:{table:{disable:!0}}},excludedProps=Object.keys(defaultArgTypes)},"../components/src/Form/Fields/FieldChips/stories/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>index_stories});__webpack_require__("../../node_modules/react/index.js");var esm=__webpack_require__("../../node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("../../node_modules/@storybook/addon-docs/dist/esm/index.js"),src=__webpack_require__("../components/src/index.ts"),Editor=__webpack_require__("./src/Editor/index.tsx"),defaultArgTypes=__webpack_require__("./src/defaultArgTypes.ts");try{Basic.displayName="Basic",Basic.__docgenInfo={description:"",displayName:"Basic",props:{id:{defaultValue:null,description:"Id of the input element to match a label to.",name:"id",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Defines the label for the field.\nI18n recommended: content that is user visible should be treated for i18n",name:"label",required:!1,type:{name:"ReactNode"}},required:{defaultValue:null,description:"Whether or not the field should display a `*` denoting it is required.",name:"required",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},autoResize:{defaultValue:null,description:"Allows Field to adjust to the width of the input (InputText and Select)",name:"autoResize",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},detail:{defaultValue:null,description:"notes and details added to the top right corner of the field\nI18n recommended: content that is user visible should be treated for i18n",name:"detail",required:!1,type:{name:"ReactNode"}},description:{defaultValue:null,description:"notes and more info added to the bottom of the field\nI18n recommended: content that is user visible should be treated for i18n",name:"description",required:!1,type:{name:"ReactNode"}},inline:{defaultValue:{value:"false"},description:"Determines where to place the label in relation to the input.",name:"inline",required:!1,type:{name:"boolean"}},validationMessage:{defaultValue:null,description:"Holds the type of validation (error, warning, etc.) and corresponding message.",name:"validationMessage",required:!1,type:{name:"ValidationMessageProps"}},hideLabel:{defaultValue:{value:"false"},description:"Label will be visually hidden",name:"hideLabel",required:!1,type:{name:"boolean"}},ariaLabelOnly:{defaultValue:null,description:"Apply label using aria-label, there will be no visible label in the UI",name:"ariaLabelOnly",required:!1,type:{name:"boolean"}},externalLabel:{defaultValue:{value:"false"},description:"External label placement above the field",name:"externalLabel",required:!1,type:{name:"boolean"}},parseInputValue:{defaultValue:null,description:"How to convert a typed or pasted string into an array of values",name:"parseInputValue",required:!1,type:{name:"((value: string) => string[])"}},summary:{defaultValue:null,description:"",name:"summary",required:!1,type:{name:"string"}},type:{defaultValue:{value:"text"},description:"",name:"type",required:!1,type:{name:"enum",value:[{value:'"number"'},{value:'"text"'},{value:'"search"'},{value:'"tel"'},{value:'"url"'},{value:'"email"'},{value:'"month"'},{value:'"password"'},{value:'"week"'}]}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},"data-autofocus":{defaultValue:null,description:"",name:"data-autofocus",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"",name:"data-testid",required:!1,type:{name:"string"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:null,description:"",name:"isClearable",required:!1,type:{name:"boolean"}},chipIconLabel:{defaultValue:{value:"Delete"},description:"customize the tooltip on the closing icon",name:"chipIconLabel",required:!1,type:{name:"string"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the closing icon",name:"clearIconLabel",required:!1,type:{name:"string"}},removeOnBackspace:{defaultValue:{value:"true"},description:"Set to false to disable the removal of the last value on backspace key",name:"removeOnBackspace",required:!1,type:{name:"boolean"}},formatChip:{defaultValue:null,description:"Format the value for display in the chip",name:"formatChip",required:!1,type:{name:"((value: string) => string)"}},inputReadOnly:{defaultValue:null,description:"",name:"inputReadOnly",required:!1,type:{name:"boolean"}},values:{defaultValue:null,description:"InputChips is a controlled component since unlike native inputs,\nyou can't easily access the current value via dom API",name:"values",required:!0,type:{name:"string[]"}},onChange:{defaultValue:null,description:"InputChips is a controlled component since unlike native inputs,\nyou can't easily access the current value via dom API",name:"onChange",required:!0,type:{name:"(values: string[]) => void"}},formatTextToCopy:{defaultValue:null,description:"When the user selects and copies chips, what should the text be",name:"formatTextToCopy",required:!1,type:{name:"((values: string[]) => string)"}},onClear:{defaultValue:null,description:"",name:"onClear",required:!1,type:{name:"(() => void)"}},inputValue:{defaultValue:null,description:"for controlling the input text",name:"inputValue",required:!1,type:{name:"string"}},onInputChange:{defaultValue:null,description:"Called when the input text changes (use with inputValue to control the input text).\nPasses the event if triggered by typing but not when triggered by value tokenization or clearing the field.",name:"onInputChange",required:!1,type:{name:"((value: string, event?: FormEvent<HTMLInputElement>) => void)"}},isVisibleOptions:{defaultValue:null,description:"",name:"isVisibleOptions",required:!1,type:{name:"boolean"}},showCaret:{defaultValue:null,description:"",name:"showCaret",required:!1,type:{name:"boolean"}},validate:{defaultValue:null,description:"for checking each value before converting to a chip",name:"validate",required:!1,type:{name:"((value: string) => boolean)"}},formatInputValue:{defaultValue:null,description:"Callback to format each value entered, before validation.\nDefaults to `value.trim()`, set to `false` to avoid trimming whitespace.",name:"formatInputValue",required:!1,type:{name:"FormatInputValue"}},onValidationFail:{defaultValue:null,description:"callback when values fail validation",name:"onValidationFail",required:!1,type:{name:"((values: string[]) => void)"}},onDuplicate:{defaultValue:null,description:"callback when values are duplicates",name:"onDuplicate",required:!1,type:{name:"((values: string[]) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Fields/FieldChips/stories/Basic.tsx#Basic"]={docgenInfo:Basic.__docgenInfo,name:"Basic",path:"../components/src/Form/Fields/FieldChips/stories/Basic.tsx#Basic"})}catch(__react_docgen_typescript_loader_error){}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const layoutProps={};function MDXContent({components,...props}){return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(dist_esm.Meta,{component:src.FieldChips,title:"Docs/FieldChips",mdxType:"Meta"}),(0,esm.kt)("h1",{id:"fieldchips"},"FieldChips"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"<FieldChips />")," component is composed of an ",(0,esm.kt)("inlineCode",{parentName:"p"},"<InputChips />")," component and a ",(0,esm.kt)("inlineCode",{parentName:"p"},"<Label />")," component. Using ",(0,esm.kt)("inlineCode",{parentName:"p"},"<FieldChips />")," allows for rendering validation messages, label, details and description. By default, the label will render directly above the input field, which is the recommended convention, however this is adjustable with the ",(0,esm.kt)("inlineCode",{parentName:"p"},"inline")," property."),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React, { useState } from 'react'\nimport { FieldChips } from '../../FieldChips'\nimport type { FieldChipsProps } from '../../FieldChips'\n\nexport default function Basic(props: FieldChipsProps) {\n  const [values, setValues] = useState<string[]>(['apples'])\n\n  return <FieldChips {...props} values={values} onChange={setValues} />\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"props"},"Props"),(0,esm.kt)(dist_esm.ArgsTable,{of:src.FieldChips,exclude:defaultArgTypes.q,mdxType:"ArgsTable"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Docs/FieldChips",component:src.FieldChips,includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,esm.kt)(MDXContent,null)};const index_stories=componentMeta,__namedExportsOrder=["__page"]}}]);