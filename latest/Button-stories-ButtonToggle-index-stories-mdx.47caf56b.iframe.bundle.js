"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[7739],{"./src/defaultArgTypes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>defaultArgTypes,q:()=>excludedProps});const defaultArgTypes={as:{table:{disable:!0}},forwardedAs:{table:{disable:!0}},ref:{table:{disable:!0}},theme:{table:{disable:!0}}},excludedProps=Object.keys(defaultArgTypes)},"../components/src/Button/stories/ButtonToggle/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>index_stories});__webpack_require__("../../node_modules/react/index.js");var esm=__webpack_require__("../../node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("../../node_modules/@storybook/addon-docs/dist/esm/index.js"),ButtonToggle=__webpack_require__("../components/src/Button/ButtonToggle.tsx"),MessageBar=__webpack_require__("../components/src/MessageBar/MessageBar.tsx"),Code=__webpack_require__("../components/src/Text/Code/Code.tsx"),Editor=__webpack_require__("./src/Editor/index.tsx"),defaultArgTypes=__webpack_require__("./src/defaultArgTypes.ts");const Nullable="/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React, { useState } from 'react'\nimport { ButtonToggle, ButtonItem } from '../../..'\n\nexport default function Nullable() {\n  const [toggle, setToggle] = useState('')\n  return (\n    <ButtonToggle value={toggle} onChange={setToggle} nullable>\n      <ButtonItem>Ruby</ButtonItem>\n      <ButtonItem>TypeScript</ButtonItem>\n      <ButtonItem>Python</ButtonItem>\n    </ButtonToggle>\n  )\n}\n";function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const layoutProps={};function MDXContent({components,...props}){return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(dist_esm.Meta,{component:ButtonToggle.F,title:"Docs/ButtonToggle",mdxType:"Meta"}),(0,esm.kt)("h1",{id:"buttontoggle"},"ButtonToggle"),(0,esm.kt)(MessageBar.c,{noActions:!0,intent:"inform",mdxType:"MessageBar"},(0,esm.kt)(Code.E,{mdxType:"Code"},"ButtonToggle")," does not support uncontrolled versions."),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"ButtonToggle")," behaves as radio button group. Use this when the user may select only one of a small set of options.\nControl externally via ",(0,esm.kt)("inlineCode",{parentName:"p"},"value")," and ",(0,esm.kt)("inlineCode",{parentName:"p"},"onChange")," props. On individual ",(0,esm.kt)("inlineCode",{parentName:"p"},"ButtonItem"),", ",(0,esm.kt)("inlineCode",{parentName:"p"},"value")," is optional and will fall back to the text if absent."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React, { useState } from 'react'\nimport { ButtonToggle, ButtonItem } from '../../..'\n\nexport default function Basic() {\n  const [toggle, setToggle] = useState('')\n  return (\n    <ButtonToggle value={toggle} onChange={setToggle}>\n      <ButtonItem>Ruby</ButtonItem>\n      <ButtonItem>TypeScript</ButtonItem>\n      <ButtonItem>Python</ButtonItem>\n    </ButtonToggle>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"disabled"},"Disabled"),(0,esm.kt)("p",null,"Use a disabled Button Toggle to indicate to the user what action will be possible on a page once a prerequisite action is taken. Disabled buttons do not respond to user interaction."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React, { useState } from 'react'\nimport { ButtonToggle, ButtonItem } from '../../..'\n\nexport default function Disabled() {\n  const [toggle, setToggle] = useState('')\n  return (\n    <ButtonToggle value={toggle} onChange={setToggle} disabled>\n      <ButtonItem>Ruby</ButtonItem>\n      <ButtonItem>TypeScript</ButtonItem>\n      <ButtonItem>Python</ButtonItem>\n    </ButtonToggle>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"nullable"},"Nullable"),(0,esm.kt)("p",null,"Use the ",(0,esm.kt)("inlineCode",{parentName:"p"},"nullable")," prop if the user should be able to click the selected item to de-select it."),(0,esm.kt)(Editor.Editor,{code:Nullable,mdxType:"Editor"}),(0,esm.kt)("h2",{id:"options"},"Options"),(0,esm.kt)("p",null,"An alternative to composing a ",(0,esm.kt)("inlineCode",{parentName:"p"},"ButtonGroup")," or ",(0,esm.kt)("inlineCode",{parentName:"p"},"ButtonToggle")," with ",(0,esm.kt)("inlineCode",{parentName:"p"},"ButtonItem")," children is to pass it an array of ",(0,esm.kt)("inlineCode",{parentName:"p"},"options"),"."),(0,esm.kt)(Editor.Editor,{code:Nullable,mdxType:"Editor"}),(0,esm.kt)("h2",{id:"props"},"Props"),(0,esm.kt)(dist_esm.ArgsTable,{of:ButtonToggle.F,exclude:defaultArgTypes.q,mdxType:"ArgsTable"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Docs/ButtonToggle",component:ButtonToggle.F,includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,esm.kt)(MDXContent,null)};const index_stories=componentMeta,__namedExportsOrder=["__page"]}}]);