"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[6108],{"./src/defaultArgTypes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>defaultArgTypes,q:()=>excludedProps});const defaultArgTypes={as:{table:{disable:!0}},forwardedAs:{table:{disable:!0}},ref:{table:{disable:!0}},theme:{table:{disable:!0}}},excludedProps=Object.keys(defaultArgTypes)},"../components/src/Button/stories/IconButton/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>index_stories});__webpack_require__("../../node_modules/react/index.js");var esm=__webpack_require__("../../node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("../../node_modules/@storybook/addon-docs/dist/esm/index.js"),IconButton=__webpack_require__("../components/src/Button/IconButton.tsx"),Editor=__webpack_require__("./src/Editor/index.tsx"),defaultArgTypes=__webpack_require__("./src/defaultArgTypes.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const layoutProps={};function MDXContent({components,...props}){return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(dist_esm.Meta,{component:IconButton.h,title:"Docs/IconButton",mdxType:"Meta"}),(0,esm.kt)("h1",{id:"iconbutton"},"IconButton"),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"IconButton"),"'s are used when you need an icon to trigger an action, such as showing a dialog or deleting an item.\nIt require a ",(0,esm.kt)("inlineCode",{parentName:"p"},"label")," that describes it's action. The ",(0,esm.kt)("inlineCode",{parentName:"p"},"label")," should be descriptive and succinct.\nIf you need an icon for purely decorative purposes use an ",(0,esm.kt)("inlineCode",{parentName:"p"},"<Icon />")," instead."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from 'react'\nimport * as MaterialIcons from '@styled-icons/material'\nimport { IconButton } from '../..'\n\nexport default function Basic() {\n  return <IconButton icon={<MaterialIcons.Add />} label=\"Add\" />\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"sizes"},"Sizes"),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"xxsmall")," | ",(0,esm.kt)("inlineCode",{parentName:"li"},"xsmall")," (default) | ",(0,esm.kt)("inlineCode",{parentName:"li"},"small")," | ",(0,esm.kt)("inlineCode",{parentName:"li"},"medium")," | ",(0,esm.kt)("inlineCode",{parentName:"li"},"large"))),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from 'react'\nimport * as MaterialIcons from '@styled-icons/material'\nimport { IconButton } from '../..'\n\nexport default function XXSmall() {\n  return <IconButton icon={<MaterialIcons.Add />} label=\"Add\" size=\"xxsmall\" />\n}\n",mdxType:"Editor"}),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from 'react'\nimport * as MaterialIcons from '@styled-icons/material'\nimport { IconButton } from '../..'\n\nexport default function XSmall() {\n  return <IconButton icon={<MaterialIcons.Add />} label=\"Add\" size=\"xsmall\" />\n}\n",mdxType:"Editor"}),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from 'react'\nimport * as MaterialIcons from '@styled-icons/material'\nimport { IconButton } from '../..'\n\nexport default function Small() {\n  return <IconButton icon={<MaterialIcons.Add />} label=\"Add\" size=\"small\" />\n}\n",mdxType:"Editor"}),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from 'react'\nimport * as MaterialIcons from '@styled-icons/material'\nimport { IconButton } from '../..'\n\nexport default function Medium() {\n  return <IconButton icon={<MaterialIcons.Add />} label=\"Add\" size=\"medium\" />\n}\n",mdxType:"Editor"}),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from 'react'\nimport * as MaterialIcons from '@styled-icons/material'\nimport { IconButton } from '../..'\n\nexport default function Large() {\n  return <IconButton icon={<MaterialIcons.Add />} label=\"Add\" size=\"large\" />\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"shapes"},"Shapes"),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"round")," (default) | ",(0,esm.kt)("inlineCode",{parentName:"li"},"square"))),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from 'react'\nimport * as MaterialIcons from '@styled-icons/material'\nimport { IconButton } from '../..'\n\nexport default function Round() {\n  return <IconButton icon={<MaterialIcons.Add />} label=\"Add\" shape=\"round\" />\n}\n",mdxType:"Editor"}),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from 'react'\nimport * as MaterialIcons from '@styled-icons/material'\nimport { IconButton } from '../..'\n\nexport default function Square() {\n  return <IconButton icon={<MaterialIcons.Add />} label=\"Add\" shape=\"square\" />\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"toggle"},"Toggle"),(0,esm.kt)("p",null,"Icon buttons have the ",(0,esm.kt)("inlineCode",{parentName:"p"},"toggle")," prop which can be used to show a toggleable state. The ",(0,esm.kt)("inlineCode",{parentName:"p"},"toggle")," prop has to be explictly set to either ",(0,esm.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,esm.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from 'react'\nimport * as MaterialIcons from '@styled-icons/material'\nimport { IconButton } from '../..'\n\nexport default function ToggleOn() {\n  return <IconButton icon={<MaterialIcons.Add />} label=\"Add\" toggle={true} />\n}\n",mdxType:"Editor"}),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from 'react'\nimport * as MaterialIcons from '@styled-icons/material'\nimport { IconButton } from '../..'\n\nexport default function ToggleOff() {\n  return <IconButton icon={<MaterialIcons.Add />} label=\"Add\" toggle={false} />\n}\n",mdxType:"Editor"}),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React, { useState } from 'react'\nimport * as MaterialIcons from '@styled-icons/material'\nimport { IconButton } from '../..'\n\nexport default function ToggleDynamic() {\n  const [isToggled, setIsToggled] = useState(false)\n\n  return (\n    <IconButton\n      label=\"Add\"\n      icon={isToggled ? <MaterialIcons.AddCircle /> : <MaterialIcons.AddBox />}\n      toggle={isToggled}\n      onClick={() => setIsToggled(!isToggled)}\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"togglebackground"},"ToggleBackground"),(0,esm.kt)("p",null,"Icon buttons have the ",(0,esm.kt)("inlineCode",{parentName:"p"},"toggleBackground")," prop which can be used to show a background color to the Icon. The ",(0,esm.kt)("inlineCode",{parentName:"p"},"toggle")," prop has to be explictly set to either ",(0,esm.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,esm.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React, { useState } from 'react'\nimport * as MaterialIcons from '@styled-icons/material'\nimport { IconButton } from '../..'\n\nexport default function ToggleBackground() {\n  const [isToggled, setIsToggled] = useState(false)\n\n  return (\n    <IconButton\n      label=\"Add\"\n      icon={isToggled ? <MaterialIcons.AddCircle /> : <MaterialIcons.AddBox />}\n      toggle={isToggled}\n      toggleBackground={isToggled}\n      onClick={() => setIsToggled(!isToggled)}\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h3",{id:"togglecolor"},"ToggleColor"),(0,esm.kt)("p",null,"Icon buttons have the ",(0,esm.kt)("inlineCode",{parentName:"p"},"toggleColor")," prop which can be used to specify what the icon's color and background color are when ",(0,esm.kt)("inlineCode",{parentName:"p"},"toggle = true"),". It accepts the following values:\n",(0,esm.kt)("inlineCode",{parentName:"p"},"key")," | ",(0,esm.kt)("inlineCode",{parentName:"p"},"calculation")," | ",(0,esm.kt)("inlineCode",{parentName:"p"},"dimension")," | ",(0,esm.kt)("inlineCode",{parentName:"p"},"measure")),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React, { useState } from 'react'\nimport * as MaterialIcons from '@styled-icons/material'\nimport { IconButton } from '../..'\n\nexport default function ToggleColor() {\n  const [isToggled, setIsToggled] = useState(false)\n\n  return (\n    <IconButton\n      label=\"Add\"\n      icon={isToggled ? <MaterialIcons.AddCircle /> : <MaterialIcons.AddBox />}\n      toggle={isToggled}\n      onClick={() => setIsToggled(!isToggled)}\n      toggleColor=\"calculation\"\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"iconbutton--tooltip"},"IconButton & Tooltip"),(0,esm.kt)("p",null,"You can also use your own ",(0,esm.kt)("inlineCode",{parentName:"p"},"Tooltip")," around ",(0,esm.kt)("inlineCode",{parentName:"p"},"IconButton"),' (this will effectively remove the "built-in" ',(0,esm.kt)("inlineCode",{parentName:"p"},"Tooltip"),")"),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from 'react'\nimport * as MaterialIcons from '@styled-icons/material'\nimport { IconButton, Tooltip } from '../../..'\n\nexport default function TooltipExample() {\n  return (\n    <Tooltip content=\"A more descriptive tooltip\">\n      <IconButton icon={<MaterialIcons.Add />} label=\"Add\" />\n    </Tooltip>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"disabling-the-tooltip"},"Disabling the Tooltip"),(0,esm.kt)("p",null,"If you would like to disable the tooltip entirely, use the ",(0,esm.kt)("inlineCode",{parentName:"p"},"tooltipDisabled")," prop."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\nimport React from 'react'\nimport * as MaterialIcons from '@styled-icons/material'\nimport { IconButton } from '../..'\n\nexport default function TooltipDisabled() {\n  return <IconButton icon={<MaterialIcons.Add />} label=\"Add\" tooltipDisabled />\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"props"},"Props"),(0,esm.kt)(dist_esm.ArgsTable,{of:IconButton.h,exclude:defaultArgTypes.q,mdxType:"ArgsTable"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Docs/IconButton",component:IconButton.h,includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,esm.kt)(MDXContent,null)};const index_stories=componentMeta,__namedExportsOrder=["__page"]}}]);