"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[1196],{"./src/defaultArgTypes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>defaultArgTypes,q:()=>excludedProps});const defaultArgTypes={as:{table:{disable:!0}},forwardedAs:{table:{disable:!0}},ref:{table:{disable:!0}},theme:{table:{disable:!0}}},excludedProps=Object.keys(defaultArgTypes)},"../components/src/Dialog/stories/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>index_stories});__webpack_require__("../../node_modules/react/index.js");var esm=__webpack_require__("../../node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("../../node_modules/@storybook/addon-docs/dist/esm/index.js"),Dialog=__webpack_require__("../components/src/Dialog/Dialog.tsx"),Editor=__webpack_require__("./src/Editor/index.tsx"),defaultArgTypes=__webpack_require__("./src/defaultArgTypes.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const MessageBar=(name="MessageBar",function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),(0,esm.kt)("div",props)});var name;const layoutProps={};function MDXContent({components,...props}){return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(dist_esm.Meta,{component:Dialog.V,title:"Docs/Dialog",mdxType:"Meta"}),(0,esm.kt)("h1",{id:"dialog"},"Dialog"),(0,esm.kt)("p",null,"Dialogs break out of the standard application flow and UI to present new information or required actions."),(0,esm.kt)(MessageBar,{noActions:!0,intent:"warn",mdxType:"MessageBar"},"Dialog provides a general purpose (empty & unstyled) overlay."," ",(0,esm.kt)("a",{href:"./confirm"},"Confirm")," will likely be more useful if your intent is to render a standard user confirmation dialog."),(0,esm.kt)("h2",{id:"standard-use"},"Standard Use"),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"Dialog"),' operates in a "uncontrolled" manner.'),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { Dialog, ButtonOutline } from '../..'\n\nexport default function Basic() {\n  return (\n    <Dialog content=\"Simple Content\">\n      <ButtonOutline>Open Dialog</ButtonOutline>\n    </Dialog>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React, { useContext } from 'react'\nimport { Dialog, DialogContext, DialogLayout } from '../../Dialog'\nimport { Button, ButtonTransparent, ButtonOutline } from '../../Button'\n\nexport default function MediumContent() {\n  return (\n    <Dialog content={<DialogExampleLayout />}>\n      <ButtonOutline>Open Dialog</ButtonOutline>\n    </Dialog>\n  )\n}\n\nconst DialogExampleLayout = () => {\n  const { closeModal } = useContext(DialogContext)\n\n  return (\n    <DialogLayout\n      header=\"Simple header\"\n      footer={\n        <>\n          <Button onClick={closeModal}>Done Reading</Button>\n          <ButtonTransparent color=\"neutral\" onClick={closeModal}>\n            Finish Later\n          </ButtonTransparent>\n        </>\n      }\n    >\n      Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n      Lorem Ipsum has been the industry\\' s standard dummy text ever since the\n      1500s, when an unknown printer took a galley of type and scrambled it to\n      make a type specimen book.\n    </DialogLayout>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"controlled"},"Controlled"),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"Dialog"),' can be used in a "controlled" manner by specifying the ',(0,esm.kt)("inlineCode",{parentName:"p"},"isOpen")," property. An ",(0,esm.kt)("inlineCode",{parentName:"p"},"onClose")," callback should also be specified so that clicking the dialog's backdrop or calling the ",(0,esm.kt)("inlineCode",{parentName:"p"},"DialogContext.closeModal")," method will work as expected."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React, { useState } from 'react'\nimport { Dialog, DialogLayout } from '../../Dialog'\nimport { Button, ButtonTransparent } from '../../Button'\n\nexport default function Controlled() {\n  const [isOpen, setIsOpen] = useState(false)\n\n  return (\n    <>\n      <Dialog\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        content={\n          <DialogLayout\n            header=\"Simple header\"\n            footer={\n              <>\n                <Button onClick={() => setIsOpen(false)}>Done Reading</Button>\n                <ButtonTransparent\n                  color=\"neutral\"\n                  onClick={() => setIsOpen(false)}\n                >\n                  Finish Later\n                </ButtonTransparent>\n              </>\n            }\n          >\n            Lorem Ipsum is simply dummy text of the printing and typesetting\n            industry. Lorem Ipsum has been the industry\\' s standard dummy text\n            ever since the 1500s, when an unknown printer took a galley of type\n            and scrambled it to make a type specimen book.\n          </DialogLayout>\n        }\n      />\n      <Button onClick={() => setIsOpen(true)}>Open Dialog</Button>\n    </>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"hook-usedialog"},"Hook: useDialog"),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"Dialog")," is also offered as a React Hook via ",(0,esm.kt)("inlineCode",{parentName:"p"},"useDialog"),". It returns the ",(0,esm.kt)("inlineCode",{parentName:"p"},"open")," callback and rendered dialog."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { ButtonOutline, useDialog } from '../..'\n\nexport default function UseDialog() {\n  const { dialog, setOpen } = useDialog({ content: 'My Neat Dialog' })\n\n  return (\n    <>\n      {dialog}\n      <ButtonOutline onClick={() => setOpen(true)}>Open Dialog</ButtonOutline>\n    </>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"onafterclose-and-onafteropen-function"},"onAfterClose and onAfterOpen function"),(0,esm.kt)("p",null,"onAfterClose: this function will be called after the ",(0,esm.kt)("inlineCode",{parentName:"p"},"Dialog")," is closed\nonAfterOpne: this function will be called after the ",(0,esm.kt)("inlineCode",{parentName:"p"},"Dialog")," is open"),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { Dialog, ButtonOutline } from '../..'\n\nexport default function AnimationCallbacks() {\n  return (\n    <Dialog\n      content=\"Simple Content\"\n      onAfterClose={() => {\n        alert('Close')\n      }}\n      onAfterOpen={() => {\n        alert('Open')\n      }}\n    >\n      <ButtonOutline>Open Dialog</ButtonOutline>\n    </Dialog>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"terminology"},"Terminology"),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"Dialogs")," are assembled of two pieces: an overlay and a surface. The ",(0,esm.kt)("inlineCode",{parentName:"p"},"Backdrop")," component is the semi-opaque full-screen overlay which signals that the the rest of the application is inaccessible. The ",(0,esm.kt)("inlineCode",{parentName:"p"},"Surface")," component sits on top of the overlay and renders the relevant content."),(0,esm.kt)("p",null,"The most common pattern for a ",(0,esm.kt)("inlineCode",{parentName:"p"},"Dialog")," is the ",(0,esm.kt)("a",{parentName:"p",href:"/components/dialogs/confirm"},(0,esm.kt)("inlineCode",{parentName:"a"},"Confirm"))," pattern."),(0,esm.kt)("h3",{id:"backdrop"},"Backdrop"),(0,esm.kt)("p",null,"This provides the backdrop behind dialogs."),(0,esm.kt)("h3",{id:"surface"},"Surface"),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"Surface")," provides the container that contains the content."),(0,esm.kt)("h2",{id:"width--minheight"},"Width & minHeight"),(0,esm.kt)("p",null,"All variants of Dialog allow you to specify ",(0,esm.kt)("inlineCode",{parentName:"p"},"width")," - it can be specified as ",(0,esm.kt)("inlineCode",{parentName:"p"},"small"),", ",(0,esm.kt)("inlineCode",{parentName:"p"},"medium"),", & ",(0,esm.kt)("inlineCode",{parentName:"p"},"large"),"."),(0,esm.kt)("p",null,"By default, ",(0,esm.kt)("inlineCode",{parentName:"p"},"width")," defaults to ",(0,esm.kt)("inlineCode",{parentName:"p"},"medium")," so that Dialog Surface will conform to the width of its content. At the same time, ",(0,esm.kt)("inlineCode",{parentName:"p"},"maxWidth")," constrains the Dialog surface's width to be no larger than the specified value."),(0,esm.kt)("p",null,"Specify a ",(0,esm.kt)("inlineCode",{parentName:"p"},"minHeight")," to prevent a ",(0,esm.kt)("inlineCode",{parentName:"p"},"Dialog")," from getting any shorter than the specified value."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React, { useContext } from 'react'\nimport { Dialog, DialogContext, DialogLayout } from '../../Dialog'\nimport { Button, ButtonTransparent, ButtonOutline } from '../../Button'\n\nexport default function MediumContent() {\n  const { closeModal } = useContext(DialogContext)\n\n  return (\n    <Dialog\n      height=\"1000rem\"\n      content={\n        <DialogLayout\n          header=\"Simple header\"\n          footer={\n            <>\n              <Button onClick={closeModal}>Done Reading</Button>\n              <ButtonTransparent color=\"neutral\" onClick={closeModal}>\n                Finish Later\n              </ButtonTransparent>\n            </>\n          }\n        >\n          Lorem Ipsum is simply dummy text of the printing and typesetting\n          industry. Lorem Ipsum has been the industry\\' s standard dummy text\n          ever since the 1500s, when an unknown printer took a galley of type\n          and scrambled it to make a type specimen book.\n        </DialogLayout>\n      }\n    >\n      <ButtonOutline>Open Dialog</ButtonOutline>\n    </Dialog>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"placement"},"Placement"),(0,esm.kt)("p",null,"Determines how surface is positioned in the the viewport."),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"center")," (default) - surface is centered horizontally and vertically above mobile breakpoint.",(0,esm.kt)("ul",{parentName:"li"},(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("em",{parentName:"li"},"mobile"),": positioned at top of window and covers entire width."),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("em",{parentName:"li"},"width"),": defaults to 100% in mobile breakpoint and 37.5rem above that unless otherwise specified"),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("em",{parentName:"li"},"height"),": fits content unless it's explicitly specified with ",(0,esm.kt)("inlineCode",{parentName:"li"},"minHeight")," prop"))),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"cover")," - positioned to cover nearly the entire window.",(0,esm.kt)("ul",{parentName:"li"},(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("em",{parentName:"li"},"mobile & tablet"),": cover the entire window.")))),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React, { useContext } from 'react'\nimport { Dialog, DialogContext, DialogLayout } from '../../Dialog'\nimport { Button, ButtonTransparent, ButtonOutline } from '../../Button'\n\nexport default function PlacementCover() {\n  const { closeModal } = useContext(DialogContext)\n\n  return (\n    <Dialog\n      placement=\"cover\"\n      content={\n        <DialogLayout\n          header=\"Simple header\"\n          footer={\n            <>\n              <Button onClick={closeModal}>Done Reading</Button>\n              <ButtonTransparent color=\"neutral\" onClick={closeModal}>\n                Finish Later\n              </ButtonTransparent>\n            </>\n          }\n        >\n          Lorem Ipsum is simply dummy text of the printing and typesetting\n          industry. Lorem Ipsum has been the industry\\' s standard dummy text\n          ever since the 1500s, when an unknown printer took a galley of type\n          and scrambled it to make a type specimen book.\n        </DialogLayout>\n      }\n    >\n      <ButtonOutline>Open Dialog</ButtonOutline>\n    </Dialog>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"top")," - vertically positioned near the top of edge of the window, horizontally centered.",(0,esm.kt)("ul",{parentName:"li"},(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("em",{parentName:"li"},"mobile"),": identical to ",(0,esm.kt)("inlineCode",{parentName:"li"},"default")," placement"),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("em",{parentName:"li"},"height"),": grows to fit content. Total height will keep surface a small amount from top and bottom of viewport"),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("em",{parentName:"li"},"width"),": default ",(0,esm.kt)("inlineCode",{parentName:"li"},"medium")," above mobile breakpoint")))),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React, { useContext } from 'react'\nimport { Dialog, DialogContext, DialogLayout } from '../../Dialog'\nimport { Button, ButtonTransparent, ButtonOutline } from '../../Button'\n\nexport default function PlacementTop() {\n  const { closeModal } = useContext(DialogContext)\n\n  return (\n    <Dialog\n      placement=\"top\"\n      content={\n        <DialogLayout\n          header=\"Simple header\"\n          footer={\n            <>\n              <Button onClick={closeModal}>Done Reading</Button>\n              <ButtonTransparent color=\"neutral\" onClick={closeModal}>\n                Finish Later\n              </ButtonTransparent>\n            </>\n          }\n        >\n          Lorem Ipsum is simply dummy text of the printing and typesetting\n          industry. Lorem Ipsum has been the industry\\' s standard dummy text\n          ever since the 1500s, when an unknown printer took a galley of type\n          and scrambled it to make a type specimen book.\n        </DialogLayout>\n      }\n    >\n      <ButtonOutline>Open Dialog</ButtonOutline>\n    </Dialog>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"dialogcontext"},"DialogContext"),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-js",metastring:"static",static:!0},"import React, { useContext } from 'react'\nimport { Button, DialogContext } from '@looker/components'\n\nexport function DialogContextDemo() {\n  return (\n    <DialogContext.Consumer>\n      {({ close }) => <Button onClick={close}>Close!</Button>}\n    </DialogContext.Consumer>\n  )\n}\n\nexport function DailogUseContextDemo() {\n  const { close } = useContext(DialogContext)\n  return <Button onClick={close}>Close!</Button>\n}\n")),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"DialogContext")," is a ",(0,esm.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html",target:"_blank",rel:"nofollow noopener noreferrer"},"React Context")," that provides\naccess to the ",(0,esm.kt)("inlineCode",{parentName:"p"},"closeModal")," function, which allows you to close the Dialog or Popover."),(0,esm.kt)("h2",{id:"scroll-lock"},"Scroll Lock"),(0,esm.kt)("p",null,"A key part of dialog usability is the scroll lock, which disables scrolling on any part of the page except within the dialog.\nWhen the ",(0,esm.kt)("inlineCode",{parentName:"p"},"Dialog")," component renders, it registers its portal element to both the ",(0,esm.kt)("inlineCode",{parentName:"p"},"ScrollLockContext")," and ",(0,esm.kt)("inlineCode",{parentName:"p"},"FocusTrapContext"),"\nin ",(0,esm.kt)("inlineCode",{parentName:"p"},"ComponentsProvider"),", which manage competing scroll locks and focus traps from other components."),(0,esm.kt)("p",null,"In rare cases, such as nesting a popover from another library inside a ",(0,esm.kt)("inlineCode",{parentName:"p"},"Dialog"),", you may need to temporarily disable these behaviors:"),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-js",metastring:"static",static:!0},"import { ScrollLockContext } from '@looker/components-providers'\nimport { useContext } from 'react'\n\nconst { activeTrapRef, disableCurrentTrap, enableCurrentTrap } = useContext(\n  ScrollLockContext\n)\n\nfunction toggleScrollLock() {\n  if (activeTrapRef && activeTrapRef.current) {\n    disableCurrentTrap()\n  } else {\n    enableCurrentTrap()\n  }\n}\n")),(0,esm.kt)("h2",{id:"props"},"Props"),(0,esm.kt)(dist_esm.ArgsTable,{of:Dialog.V,exclude:defaultArgTypes.q,mdxType:"ArgsTable"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Docs/Dialog",component:Dialog.V,includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,esm.kt)(MDXContent,null)};const index_stories=componentMeta,__namedExportsOrder=["__page"]}}]);