"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[2193],{"./src/defaultArgTypes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>defaultArgTypes,q:()=>excludedProps});const defaultArgTypes={as:{table:{disable:!0}},forwardedAs:{table:{disable:!0}},ref:{table:{disable:!0}},theme:{table:{disable:!0}}},excludedProps=Object.keys(defaultArgTypes)},"../components/src/Form/Inputs/ToggleSwitch/stories/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>index_stories});__webpack_require__("../../node_modules/react/index.js");var esm=__webpack_require__("../../node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("../../node_modules/@storybook/addon-docs/dist/esm/index.js"),src=__webpack_require__("../components/src/index.ts"),Editor=__webpack_require__("./src/Editor/index.tsx"),defaultArgTypes=__webpack_require__("./src/defaultArgTypes.ts");try{Basic.displayName="Basic",Basic.__docgenInfo={description:"",displayName:"Basic",props:{size:{defaultValue:null,description:"",name:"size",required:!1,type:{name:"number"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},"data-autofocus":{defaultValue:null,description:"",name:"data-autofocus",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"",name:"data-testid",required:!1,type:{name:"string"}},on:{defaultValue:null,description:"",name:"on",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/ToggleSwitch/stories/Basic.tsx#Basic"]={docgenInfo:Basic.__docgenInfo,name:"Basic",path:"../components/src/Form/Inputs/ToggleSwitch/stories/Basic.tsx#Basic"})}catch(__react_docgen_typescript_loader_error){}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const layoutProps={};function MDXContent({components,...props}){return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(dist_esm.Meta,{component:src.ToggleSwitch,title:"Docs/ToggleSwitch",mdxType:"Meta"}),(0,esm.kt)("h1",{id:"toggleswitch"},"ToggleSwitch"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"<Checkbox />")," component renders a single checkbox element on the page, with no accompanying label. It is generally used to construct higher-order components like the ",(0,esm.kt)("inlineCode",{parentName:"p"},"<FieldCheckbox />"),". If you are building a form, you probably want to use ",(0,esm.kt)("inlineCode",{parentName:"p"},"<FieldCheckbox />")," instead as it provides label support."),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"ToggleSwitch")," component is essentially a decorated checkbox that is either toggled on or off. For accessibility reasons you should always provide a label with your toggle switch, you can use the ",(0,esm.kt)("inlineCode",{parentName:"p"},"<FieldToggleSwitch>")," component to quickly generate an accessible toggle switch with proper labeling. Its size can be changed using the ",(0,esm.kt)("inlineCode",{parentName:"p"},"size")," prop, which accepts px value as a number. Its default size is 20px."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { useToggle } from '../../../../utils/useToggle'\nimport { ToggleSwitch } from '../..'\nimport type { ToggleSwitchProps } from '../ToggleSwitch'\nexport default function Basic(props: ToggleSwitchProps) {\n  const { value, toggle } = useToggle(false)\n  return <ToggleSwitch onChange={toggle} on={value} {...props} />\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"checked-property"},"Checked Property"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"<ToggleSwitch />"),' component can be rendered in two different states: "on" and "off"'),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { useToggle } from '../../../../utils/useToggle'\nimport { ToggleSwitch } from '../..'\n\nexport default function Checked() {\n  const { value, toggle } = useToggle(true)\n  return <ToggleSwitch onChange={toggle} on={value} />\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"disabled-property"},"Disabled Property"),(0,esm.kt)("p",null,"Use the disable property to gray out the ToggleSwitch, making it unclickable."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { useToggle } from '../../../../utils/useToggle'\nimport { ToggleSwitch } from '../..'\n\nexport default function Checked() {\n  const { value, toggle } = useToggle(false)\n  return <ToggleSwitch onChange={toggle} on={value} disabled />\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"props"},"Props"),(0,esm.kt)(dist_esm.ArgsTable,{of:src.ToggleSwitch,exclude:defaultArgTypes.q,mdxType:"ArgsTable"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Docs/ToggleSwitch",component:src.ToggleSwitch,includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,esm.kt)(MDXContent,null)};const index_stories=componentMeta,__namedExportsOrder=["__page"]}}]);