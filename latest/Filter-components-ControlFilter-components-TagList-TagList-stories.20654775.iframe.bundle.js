"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[4218],{"../filter-components/src/Filter/components/ControlFilter/components/TagList/TagList.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Basic:()=>Basic,WithValues:()=>WithValues,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"),react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),_TagList__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../filter-components/src/Filter/components/ControlFilter/components/TagList/TagList.tsx");const options=[{label:"label1",value:"value1"},{label:"label2",value:"value2"},{label:"label3",value:"value3"},{label:"label11",value:"value11"},{label:"label22",value:"value22"},{label:"label33",value:"value33"},{label:"label111",value:"value111"},{label:"label222",value:"value222"},{label:"label333",value:"value333"}],Template=args=>{const[value,setValue]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(args.value||[]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_TagList__WEBPACK_IMPORTED_MODULE_1__.P,(0,_babel_runtime_helpers_extends__WEBPACK_IMPORTED_MODULE_2__.Z)({},args,{value,onChange:newValue=>{setValue(newValue),args.onChange?.(newValue)}}))},Basic=Template.bind({});Basic.args={options,value:[]};const WithValues=Template.bind({});WithValues.args={...Basic.args,value:options.map((x=>x.value))};const __WEBPACK_DEFAULT_EXPORT__={title:"Filters/Stories/Tag List Filter",component:_TagList__WEBPACK_IMPORTED_MODULE_1__.P,argTypes:{onChange:{action:"onChange"}}};Basic.parameters={storySource:{source:"(args) => {\n  const [value, setValue] = useState(args.value || [])\n  const handleChange = (newValue: string[]) => {\n    setValue(newValue)\n    args.onChange?.(newValue)\n  }\n  return <TagList {...args} value={value} onChange={handleChange} />\n}"},...Basic.parameters},WithValues.parameters={storySource:{source:"(args) => {\n  const [value, setValue] = useState(args.value || [])\n  const handleChange = (newValue: string[]) => {\n    setValue(newValue)\n    args.onChange?.(newValue)\n  }\n  return <TagList {...args} value={value} onChange={handleChange} />\n}"},...WithValues.parameters};const __namedExportsOrder=["Basic","WithValues"]}}]);