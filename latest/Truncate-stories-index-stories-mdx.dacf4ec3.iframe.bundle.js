"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[9522],{"../components/src/Truncate/stories/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>index_stories});__webpack_require__("../../node_modules/react/index.js");var esm=__webpack_require__("../../node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("../../node_modules/@storybook/addon-docs/dist/esm/index.js"),Truncate=__webpack_require__("../components/src/Truncate/Truncate.tsx"),MessageBar=__webpack_require__("../components/src/MessageBar/MessageBar.tsx"),Editor=__webpack_require__("./src/Editor/index.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const layoutProps={};function MDXContent({components,...props}){return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(dist_esm.Meta,{component:Truncate.k,title:"Docs/Truncate",mdxType:"Meta"}),(0,esm.kt)("h1",{id:"truncate"},"Truncate"),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"Truncate")," can be used when you want to prevent text from wrapping. Text will be limited to a single line, and if it overflows an ellipsis will be rendered. In addition, a tooltip will be activated to display the full text on hover."),(0,esm.kt)(MessageBar.c,{intent:"warn",noActions:!0,mb:"medium",mdxType:"MessageBar"},(0,esm.kt)("strong",null,"Caveat:")," the direct parent of this component must have a width or max-width styled on it or else it will invisibly overflow without rendering the proper ellipsis."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { Box, Truncate } from '../..'\n\nexport default function Basic() {\n  return (\n    <Box maxWidth={500}>\n      <Truncate>\n        <strong>Hover over text to see the full content:</strong> Earliest\n        proposed dates for the origin of cheesemaking range from around 8000\n        BCE, when sheep were first domesticated. Since animal skins and inflated\n        internal organs have, since ancient times, provided storage vessels for\n        a range of foodstuffs, it is probable that the process of cheese making\n        was discovered accidentally by storing milk in a container made from the\n        stomach of an animal, resulting in the milk being turned to curd and\n        whey by the rennet from the stomach. There is a legendâ€”with\n        variationsâ€”about the discovery of cheese by an Arab trader who used this\n        method of storing milk.\n      </Truncate>\n    </Box>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"description"},"Description"),(0,esm.kt)("p",null,"You can optionally add the ",(0,esm.kt)("inlineCode",{parentName:"p"},"description")," prop, which is additional content that can be rendered at the end of the tooltip overlay. Specifying ",(0,esm.kt)("inlineCode",{parentName:"p"},"description")," will cause truncation tooltip to always be present on hover, even when the content does not overflow."),(0,esm.kt)(Editor.Editor,{code:"/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport React from 'react'\nimport { Box, Truncate } from '../..'\n\nexport default function Description() {\n  return (\n    <Box maxWidth={500}>\n      <Truncate description=\"This is pretty cheesy ðŸ§€\">\n        <strong>Hover over text to see the description:</strong> Cheese is\n        delicious.\n      </Truncate>\n    </Box>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"props"},"Props"),(0,esm.kt)(dist_esm.ArgsTable,{of:Truncate.k,mdxType:"ArgsTable"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Docs/Truncate",component:Truncate.k,includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,esm.kt)(MDXContent,null)};const index_stories=componentMeta,__namedExportsOrder=["__page"]}}]);