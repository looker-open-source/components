"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[2359],{"./src/defaultArgTypes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>defaultArgTypes,q:()=>excludedProps});const defaultArgTypes={as:{table:{disable:!0}},forwardedAs:{table:{disable:!0}},ref:{table:{disable:!0}},theme:{table:{disable:!0}}},excludedProps=Object.keys(defaultArgTypes)},"../components/src/Form/Inputs/InputSearch/stories/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>index_stories});__webpack_require__("../../node_modules/react/index.js");var esm=__webpack_require__("../../node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("../../node_modules/@storybook/addon-docs/dist/esm/index.js"),src=__webpack_require__("../components/src/index.ts"),Editor=__webpack_require__("./src/Editor/index.tsx"),defaultArgTypes=__webpack_require__("./src/defaultArgTypes.ts");try{Basic.displayName="Basic",Basic.__docgenInfo={description:"",displayName:"Basic",props:{changeOnSelect:{defaultValue:{value:"true"},description:"Selecting an option updates the input's value\n@experimental",name:"changeOnSelect",required:!1,type:{name:"boolean"}},clearOnClose:{defaultValue:{value:"false"},description:"Clear the input value when the option list closes\nDefaults to the inverse of changeOnSelect\n@experimental",name:"clearOnClose",required:!1,type:{name:"boolean"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the clear icon",name:"clearIconLabel",required:!1,type:{name:"string"}},hideSearchIcon:{defaultValue:null,description:"",name:"hideSearchIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:{value:"true"},description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"If defined, the popup will render with this text when there are no options.\n@experimental",name:"noOptionsLabel",required:!1,type:{name:"string"}},onSelectOption:{defaultValue:null,description:"Called when the user selects one of the options\nonChange will also be called with the option's value unless changeOnSelect is set to false\n@experimental",name:"onSelectOption",required:!1,type:{name:"((option?: SelectOptionObject) => void)"}},openOnClick:{defaultValue:{value:"false"},description:"If true, the popover opens when the text box is clicked.\n@experimental",name:"openOnClick",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}},autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/InputSearch/stories/Basic.tsx#Basic"]={docgenInfo:Basic.__docgenInfo,name:"Basic",path:"../components/src/Form/Inputs/InputSearch/stories/Basic.tsx#Basic"})}catch(__react_docgen_typescript_loader_error){}try{AutoResize.displayName="AutoResize",AutoResize.__docgenInfo={description:"",displayName:"AutoResize",props:{changeOnSelect:{defaultValue:{value:"true"},description:"Selecting an option updates the input's value\n@experimental",name:"changeOnSelect",required:!1,type:{name:"boolean"}},clearOnClose:{defaultValue:{value:"false"},description:"Clear the input value when the option list closes\nDefaults to the inverse of changeOnSelect\n@experimental",name:"clearOnClose",required:!1,type:{name:"boolean"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the clear icon",name:"clearIconLabel",required:!1,type:{name:"string"}},hideSearchIcon:{defaultValue:null,description:"",name:"hideSearchIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:{value:"true"},description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"If defined, the popup will render with this text when there are no options.\n@experimental",name:"noOptionsLabel",required:!1,type:{name:"string"}},onSelectOption:{defaultValue:null,description:"Called when the user selects one of the options\nonChange will also be called with the option's value unless changeOnSelect is set to false\n@experimental",name:"onSelectOption",required:!1,type:{name:"((option?: SelectOptionObject) => void)"}},openOnClick:{defaultValue:{value:"false"},description:"If true, the popover opens when the text box is clicked.\n@experimental",name:"openOnClick",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}},autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/InputSearch/stories/AutoResize.tsx#AutoResize"]={docgenInfo:AutoResize.__docgenInfo,name:"AutoResize",path:"../components/src/Form/Inputs/InputSearch/stories/AutoResize.tsx#AutoResize"})}catch(__react_docgen_typescript_loader_error){}try{DefaultValue.displayName="DefaultValue",DefaultValue.__docgenInfo={description:"",displayName:"DefaultValue",props:{changeOnSelect:{defaultValue:{value:"true"},description:"Selecting an option updates the input's value\n@experimental",name:"changeOnSelect",required:!1,type:{name:"boolean"}},clearOnClose:{defaultValue:{value:"false"},description:"Clear the input value when the option list closes\nDefaults to the inverse of changeOnSelect\n@experimental",name:"clearOnClose",required:!1,type:{name:"boolean"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the clear icon",name:"clearIconLabel",required:!1,type:{name:"string"}},hideSearchIcon:{defaultValue:null,description:"",name:"hideSearchIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:{value:"true"},description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"If defined, the popup will render with this text when there are no options.\n@experimental",name:"noOptionsLabel",required:!1,type:{name:"string"}},onSelectOption:{defaultValue:null,description:"Called when the user selects one of the options\nonChange will also be called with the option's value unless changeOnSelect is set to false\n@experimental",name:"onSelectOption",required:!1,type:{name:"((option?: SelectOptionObject) => void)"}},openOnClick:{defaultValue:{value:"false"},description:"If true, the popover opens when the text box is clicked.\n@experimental",name:"openOnClick",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}},autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/InputSearch/stories/DefaultValue.tsx#DefaultValue"]={docgenInfo:DefaultValue.__docgenInfo,name:"DefaultValue",path:"../components/src/Form/Inputs/InputSearch/stories/DefaultValue.tsx#DefaultValue"})}catch(__react_docgen_typescript_loader_error){}try{Disable.displayName="Disable",Disable.__docgenInfo={description:"",displayName:"Disable",props:{changeOnSelect:{defaultValue:{value:"true"},description:"Selecting an option updates the input's value\n@experimental",name:"changeOnSelect",required:!1,type:{name:"boolean"}},clearOnClose:{defaultValue:{value:"false"},description:"Clear the input value when the option list closes\nDefaults to the inverse of changeOnSelect\n@experimental",name:"clearOnClose",required:!1,type:{name:"boolean"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the clear icon",name:"clearIconLabel",required:!1,type:{name:"string"}},hideSearchIcon:{defaultValue:null,description:"",name:"hideSearchIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:{value:"true"},description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"If defined, the popup will render with this text when there are no options.\n@experimental",name:"noOptionsLabel",required:!1,type:{name:"string"}},onSelectOption:{defaultValue:null,description:"Called when the user selects one of the options\nonChange will also be called with the option's value unless changeOnSelect is set to false\n@experimental",name:"onSelectOption",required:!1,type:{name:"((option?: SelectOptionObject) => void)"}},openOnClick:{defaultValue:{value:"false"},description:"If true, the popover opens when the text box is clicked.\n@experimental",name:"openOnClick",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}},autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/InputSearch/stories/Disable.tsx#Disable"]={docgenInfo:Disable.__docgenInfo,name:"Disable",path:"../components/src/Form/Inputs/InputSearch/stories/Disable.tsx#Disable"})}catch(__react_docgen_typescript_loader_error){}try{HideSearchIcon.displayName="HideSearchIcon",HideSearchIcon.__docgenInfo={description:"",displayName:"HideSearchIcon",props:{changeOnSelect:{defaultValue:{value:"true"},description:"Selecting an option updates the input's value\n@experimental",name:"changeOnSelect",required:!1,type:{name:"boolean"}},clearOnClose:{defaultValue:{value:"false"},description:"Clear the input value when the option list closes\nDefaults to the inverse of changeOnSelect\n@experimental",name:"clearOnClose",required:!1,type:{name:"boolean"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the clear icon",name:"clearIconLabel",required:!1,type:{name:"string"}},hideSearchIcon:{defaultValue:null,description:"",name:"hideSearchIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:{value:"true"},description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"If defined, the popup will render with this text when there are no options.\n@experimental",name:"noOptionsLabel",required:!1,type:{name:"string"}},onSelectOption:{defaultValue:null,description:"Called when the user selects one of the options\nonChange will also be called with the option's value unless changeOnSelect is set to false\n@experimental",name:"onSelectOption",required:!1,type:{name:"((option?: SelectOptionObject) => void)"}},openOnClick:{defaultValue:{value:"false"},description:"If true, the popover opens when the text box is clicked.\n@experimental",name:"openOnClick",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}},autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/InputSearch/stories/HideSearchIcon.tsx#HideSearchIcon"]={docgenInfo:HideSearchIcon.__docgenInfo,name:"HideSearchIcon",path:"../components/src/Form/Inputs/InputSearch/stories/HideSearchIcon.tsx#HideSearchIcon"})}catch(__react_docgen_typescript_loader_error){}try{IsClearable.displayName="IsClearable",IsClearable.__docgenInfo={description:"",displayName:"IsClearable",props:{changeOnSelect:{defaultValue:{value:"true"},description:"Selecting an option updates the input's value\n@experimental",name:"changeOnSelect",required:!1,type:{name:"boolean"}},clearOnClose:{defaultValue:{value:"false"},description:"Clear the input value when the option list closes\nDefaults to the inverse of changeOnSelect\n@experimental",name:"clearOnClose",required:!1,type:{name:"boolean"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the clear icon",name:"clearIconLabel",required:!1,type:{name:"string"}},hideSearchIcon:{defaultValue:null,description:"",name:"hideSearchIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:{value:"true"},description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"If defined, the popup will render with this text when there are no options.\n@experimental",name:"noOptionsLabel",required:!1,type:{name:"string"}},onSelectOption:{defaultValue:null,description:"Called when the user selects one of the options\nonChange will also be called with the option's value unless changeOnSelect is set to false\n@experimental",name:"onSelectOption",required:!1,type:{name:"((option?: SelectOptionObject) => void)"}},openOnClick:{defaultValue:{value:"false"},description:"If true, the popover opens when the text box is clicked.\n@experimental",name:"openOnClick",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}},autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/InputSearch/stories/IsClearable.tsx#IsClearable"]={docgenInfo:IsClearable.__docgenInfo,name:"IsClearable",path:"../components/src/Form/Inputs/InputSearch/stories/IsClearable.tsx#IsClearable"})}catch(__react_docgen_typescript_loader_error){}try{Summary.displayName="Summary",Summary.__docgenInfo={description:"",displayName:"Summary",props:{changeOnSelect:{defaultValue:{value:"true"},description:"Selecting an option updates the input's value\n@experimental",name:"changeOnSelect",required:!1,type:{name:"boolean"}},clearOnClose:{defaultValue:{value:"false"},description:"Clear the input value when the option list closes\nDefaults to the inverse of changeOnSelect\n@experimental",name:"clearOnClose",required:!1,type:{name:"boolean"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the clear icon",name:"clearIconLabel",required:!1,type:{name:"string"}},hideSearchIcon:{defaultValue:null,description:"",name:"hideSearchIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:{value:"true"},description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"If defined, the popup will render with this text when there are no options.\n@experimental",name:"noOptionsLabel",required:!1,type:{name:"string"}},onSelectOption:{defaultValue:null,description:"Called when the user selects one of the options\nonChange will also be called with the option's value unless changeOnSelect is set to false\n@experimental",name:"onSelectOption",required:!1,type:{name:"((option?: SelectOptionObject) => void)"}},openOnClick:{defaultValue:{value:"false"},description:"If true, the popover opens when the text box is clicked.\n@experimental",name:"openOnClick",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}},autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/InputSearch/stories/Summary.tsx#Summary"]={docgenInfo:Summary.__docgenInfo,name:"Summary",path:"../components/src/Form/Inputs/InputSearch/stories/Summary.tsx#Summary"})}catch(__react_docgen_typescript_loader_error){}try{ReadOnly.displayName="ReadOnly",ReadOnly.__docgenInfo={description:"",displayName:"ReadOnly",props:{changeOnSelect:{defaultValue:{value:"true"},description:"Selecting an option updates the input's value\n@experimental",name:"changeOnSelect",required:!1,type:{name:"boolean"}},clearOnClose:{defaultValue:{value:"false"},description:"Clear the input value when the option list closes\nDefaults to the inverse of changeOnSelect\n@experimental",name:"clearOnClose",required:!1,type:{name:"boolean"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the clear icon",name:"clearIconLabel",required:!1,type:{name:"string"}},hideSearchIcon:{defaultValue:null,description:"",name:"hideSearchIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:{value:"true"},description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"If defined, the popup will render with this text when there are no options.\n@experimental",name:"noOptionsLabel",required:!1,type:{name:"string"}},onSelectOption:{defaultValue:null,description:"Called when the user selects one of the options\nonChange will also be called with the option's value unless changeOnSelect is set to false\n@experimental",name:"onSelectOption",required:!1,type:{name:"((option?: SelectOptionObject) => void)"}},openOnClick:{defaultValue:{value:"false"},description:"If true, the popover opens when the text box is clicked.\n@experimental",name:"openOnClick",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}},autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/InputSearch/stories/ReadOnly.tsx#ReadOnly"]={docgenInfo:ReadOnly.__docgenInfo,name:"ReadOnly",path:"../components/src/Form/Inputs/InputSearch/stories/ReadOnly.tsx#ReadOnly"})}catch(__react_docgen_typescript_loader_error){}try{ClearIconLabel.displayName="ClearIconLabel",ClearIconLabel.__docgenInfo={description:"",displayName:"ClearIconLabel",props:{changeOnSelect:{defaultValue:{value:"true"},description:"Selecting an option updates the input's value\n@experimental",name:"changeOnSelect",required:!1,type:{name:"boolean"}},clearOnClose:{defaultValue:{value:"false"},description:"Clear the input value when the option list closes\nDefaults to the inverse of changeOnSelect\n@experimental",name:"clearOnClose",required:!1,type:{name:"boolean"}},clearIconLabel:{defaultValue:null,description:"customize the tooltip on the clear icon",name:"clearIconLabel",required:!1,type:{name:"string"}},hideSearchIcon:{defaultValue:null,description:"",name:"hideSearchIcon",required:!1,type:{name:"boolean"}},isClearable:{defaultValue:{value:"true"},description:"The user can clear the current value by clicking an x icon button",name:"isClearable",required:!1,type:{name:"boolean"}},noOptionsLabel:{defaultValue:null,description:"If defined, the popup will render with this text when there are no options.\n@experimental",name:"noOptionsLabel",required:!1,type:{name:"string"}},onSelectOption:{defaultValue:null,description:"Called when the user selects one of the options\nonChange will also be called with the option's value unless changeOnSelect is set to false\n@experimental",name:"onSelectOption",required:!1,type:{name:"((option?: SelectOptionObject) => void)"}},openOnClick:{defaultValue:{value:"false"},description:"If true, the popover opens when the text box is clicked.\n@experimental",name:"openOnClick",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"",name:"readOnly",required:!1,type:{name:"boolean"}},defaultValue:{defaultValue:null,description:"Value of the initial option",name:"defaultValue",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Handle an option being selected",name:"onChange",required:!1,type:{name:"((value: string) => void)"}},value:{defaultValue:null,description:"Value of the current selected option (controlled)",name:"value",required:!1,type:{name:"string"}},fontFamily:{defaultValue:null,description:"",name:"fontFamily",required:!1,type:{name:"ResponsiveValue<FontFamilies, Required<Theme<TLengthStyledSystem>>>"}},fontSize:{defaultValue:null,description:"Use a @looker/components FontSizes to set font size",name:"fontSize",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},fontWeight:{defaultValue:null,description:"Use a @looker/components FontWeights to set weight\n  normal, medium, semiBold, bold",name:"fontWeight",required:!1,type:{name:"ResponsiveValue<FontWeights, Required<Theme<TLengthStyledSystem>>>"}},lineHeight:{defaultValue:null,description:"Use a @looker/components LineHeights (xxsmall - xxxxlarge) to set line height",name:"lineHeight",required:!1,type:{name:"ResponsiveValue<FontSizes, Required<Theme<TLengthStyledSystem>>>"}},onClose:{defaultValue:null,description:"Called when the suggestion list closes, whether via blur, escape or selection",name:"onClose",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},onOpen:{defaultValue:null,description:"Called when the suggestion list opens, whether via typing, click, or focus",name:"onOpen",required:!1,type:{name:"ComboboxCallback<MaybeComboboxOptionObject>"}},options:{defaultValue:null,description:"Options may be flat or grouped, label is optional â€“ without it the value is used",name:"options",required:!1,type:{name:"SelectOptionProps[]"}},windowing:{defaultValue:null,description:"Render only the options visible in the scroll window\ndefaults to false for <100 options, true for >=100 options",name:"windowing",required:!1,type:{name:"boolean"}},validationType:{defaultValue:null,description:"",name:"validationType",required:!1,type:{name:"enum",value:[{value:'"error"'}]}},wrapperAriaLabel:{defaultValue:null,description:"The optional a11y aria label for combobox Wrapper element that has popup",name:"wrapperAriaLabel",required:!1,type:{name:"string"}},openOnFocus:{defaultValue:null,description:"If true, the popover opens when focus is on the text box.",name:"openOnFocus",required:!1,type:{name:"boolean"}},noErrorIcon:{defaultValue:null,description:"Don't show the error icon when validationType is 'error'",name:"noErrorIcon",required:!1,type:{name:"boolean"}},indicator:{defaultValue:null,description:"Customize the area to the left of the label, which by default\nrenders a check mark for the selected option or a spacer\nUse a ReactNode, function component or render-prop-style function, or false to remove",name:"indicator",required:!1,type:{name:"ReactNode | ComboboxOptionIndicatorFunction"}},autoResize:{defaultValue:null,description:"Allows the select width to resize with the current value or placeholder\nContainer will default to `display: inline-flex` and container & list will default to `width: auto`",name:"autoResize",required:!1,type:{name:"boolean"}},listLayout:{defaultValue:null,description:"Control the dimensions of the list\n(use this to untether the list width from the input width)",name:"listLayout",required:!1,type:{name:"LayoutProps<Required<Theme<TLengthStyledSystem>>>"}},isLoading:{defaultValue:{value:"false"},description:"Render a spinner in the list instead of any options",name:"isLoading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["../components/src/Form/Inputs/InputSearch/stories/ClearIconLabel.tsx#ClearIconLabel"]={docgenInfo:ClearIconLabel.__docgenInfo,name:"ClearIconLabel",path:"../components/src/Form/Inputs/InputSearch/stories/ClearIconLabel.tsx#ClearIconLabel"})}catch(__react_docgen_typescript_loader_error){}function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const layoutProps={};function MDXContent({components,...props}){return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(dist_esm.Meta,{component:src.InputSearch,title:"Docs/InputSearch",mdxType:"Meta"}),(0,esm.kt)("h1",{id:"inputsearch"},"InputSearch"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"<InputSearch />")," component renders a single search input element."),(0,esm.kt)("p",null,"You can add a placeholder, and a starter value, also a summary text and a closing button associated with it."),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React from 'react'\nimport { InputSearch } from '../'\nimport type { InputSearchProps } from '../'\n\nexport default function Basic(props: InputSearchProps) {\n  const { placeholder = 'Type your search', ...restProps } = props\n\n  return <InputSearch placeholder={placeholder} {...restProps} />\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"hidesearchicon"},"hideSearchIcon"),(0,esm.kt)("p",null,"If you don't want to see the search ",(0,esm.kt)("inlineCode",{parentName:"p"},"Icon")," use the prop ",(0,esm.kt)("inlineCode",{parentName:"p"},"hideSearchIcon"),"."),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React from 'react'\nimport { InputSearch } from '../'\nimport type { InputSearchProps } from '../'\n\nexport default function HideSearchIcon(props: InputSearchProps) {\n  const {\n    hideSearchIcon = false,\n    placeholder = 'No search icon here',\n    ...restProps\n  } = props\n\n  return (\n    <InputSearch\n      hideSearchIcon={hideSearchIcon}\n      placeholder={placeholder}\n      {...restProps}\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"autoresize"},"autoResize"),(0,esm.kt)("p",null,"Use the ",(0,esm.kt)("inlineCode",{parentName:"p"},"autoResize")," prop to allow the input's width to adjust to its current value or placeholder."),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React from 'react'\nimport { InputSearch } from '../'\nimport type { InputSearchProps } from '../'\n\nexport default function AutoResize(props: InputSearchProps) {\n  const {\n    autoResize = true,\n    placeholder = 'Start typing to resize',\n    ...restProps\n  } = props\n\n  return (\n    <InputSearch\n      autoResize={autoResize}\n      placeholder={placeholder}\n      {...restProps}\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"isclearable"},"isClearable"),(0,esm.kt)("p",null,"To remove the Clear Field button, use ",(0,esm.kt)("inlineCode",{parentName:"p"},"isClearable={false}"),"."),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React from 'react'\nimport { InputSearch } from '../'\nimport type { InputSearchProps } from '../'\n\nexport default function IsClearable(props: InputSearchProps) {\n  const {\n    placeholder = 'Type your search',\n    defaultValue = 'test search 1',\n    isClearable = false,\n    ...restProps\n  } = props\n\n  return (\n    <InputSearch\n      placeholder={placeholder}\n      defaultValue={defaultValue}\n      isClearable={isClearable}\n      {...restProps}\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"summary"},"summary"),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React from 'react'\nimport { InputSearch } from '../'\nimport type { InputSearchProps } from '../'\n\nexport default function Summary(props: InputSearchProps) {\n  const {\n    placeholder = 'Type your search',\n    summary = 'summary text',\n    ...restProps\n  } = props\n\n  return (\n    <InputSearch placeholder={placeholder} summary={summary} {...restProps} />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"defaultvalue"},"defaultValue"),(0,esm.kt)("p",null,"Use ",(0,esm.kt)("inlineCode",{parentName:"p"},"defaultValue")," when you want to set an initial value but still want InputSearch to control state internally."),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React from 'react'\nimport { InputSearch } from '..'\nimport type { InputSearchProps } from '../'\n\nexport default function DefaultValue(props: InputSearchProps) {\n  const {\n    placeholder = 'Type your search',\n    defaultValue = 'test search 0',\n    ...restProps\n  } = props\n\n  return (\n    <InputSearch\n      placeholder={placeholder}\n      defaultValue={defaultValue}\n      {...restProps}\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"controlled-example"},"Controlled Example"),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React, { useState } from 'react'\nimport { InputSearch } from '..'\n\nexport default function Controlled() {\n  const [keyword, setKeyword] = useState('Default Value')\n\n  return (\n    <InputSearch\n      placeholder=\"Type your search\"\n      summary={\n        keyword.length > 0 ? `You typed ${keyword.length} characters` : ''\n      }\n      value={keyword}\n      onChange={setKeyword}\n    />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"disabled"},"Disabled"),(0,esm.kt)("p",null,"Use the ",(0,esm.kt)("inlineCode",{parentName:"p"},"disable")," property to make an input field un-editable."),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React from 'react'\nimport { InputSearch } from '../'\nimport type { InputSearchProps } from '../'\nimport { SpaceVertical } from '../../../../'\n\nexport default function Disable(props: InputSearchProps) {\n  const {\n    disabled = true,\n    placeholder = 'Type your search',\n    value = 'Value Disabled',\n    ...restProps\n  } = props\n\n  return (\n    <SpaceVertical align=\"start\">\n      <InputSearch disabled={disabled} />\n      <InputSearch disabled={disabled} value={value} />\n      <InputSearch\n        disabled={disabled}\n        placeholder={placeholder}\n        {...restProps}\n      />\n    </SpaceVertical>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"readonly-property"},"ReadOnly property"),(0,esm.kt)("p",null,"As the name suggests, readOnly makes the text un-editable."),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React from 'react'\nimport { InputSearch } from '../'\nimport type { InputSearchProps } from '../'\n\nexport default function ReadOnly(props: InputSearchProps) {\n  const {\n    value = \"You can't change me.\",\n    readOnly = true,\n    ...restProps\n  } = props\n\n  return <InputSearch value={value} readOnly={readOnly} {...restProps} />\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"cleariconlabel"},"clearIconLabel"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"InputSearch")," component provides the prop ",(0,esm.kt)("inlineCode",{parentName:"p"},"clearIconLabel")," to customize the input icon label. Hover over the the ",(0,esm.kt)("inlineCode",{parentName:"p"},"x")," icon to see the tooltip."),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React from 'react'\nimport { InputSearch } from '../'\nimport type { InputSearchProps } from '../'\n\nexport default function ClearIconLabel(props: InputSearchProps) {\n  const {\n    clearIconLabel = 'Reset this seach field',\n    value = 'my query',\n    ...restProps\n  } = props\n\n  return (\n    <InputSearch clearIconLabel={clearIconLabel} value={value} {...restProps} />\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"options-experimental"},"Options (experimental)"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"options")," prop offers users suggestions or results as they type, similar to a filterable\n",(0,esm.kt)("a",{parentName:"p",href:"/components/forms/select/"},(0,esm.kt)("inlineCode",{parentName:"a"},"Select")),", but without the intent to restrict the field's value."),(0,esm.kt)("p",null,"Additional props ",(0,esm.kt)("inlineCode",{parentName:"p"},"onSelectOption"),", ",(0,esm.kt)("inlineCode",{parentName:"p"},"changeOnSelect")," (defaults to true), which determines whether the input\nwill be updated with the selected option's value, and ",(0,esm.kt)("inlineCode",{parentName:"p"},"clearOnClose")," (defaults to the opposite of\n",(0,esm.kt)("inlineCode",{parentName:"p"},"changeOnSelect"),"), which determines whether the input value will persist after the option list is closed,\n(via blur, escape, etc)."),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React from 'react'\nimport { InputSearch } from '../'\nimport type { SelectOptionObject } from '../../'\nimport { Space } from '../../../../'\n\nexport default function Options() {\n  const cheeses = [\n    {\n      description: 'Delicious cheese',\n      detail: 'Netherlands ',\n      value: 'Gouda',\n    },\n    { value: 'Cheddar' },\n  ]\n\n  const cheeses2 = [{ value: 'Jack' }, { value: 'Swiss' }]\n\n  const handleSelectOption = (option?: SelectOptionObject) =>\n    option && alert(`You picked ${option.value}`)\n\n  return (\n    <Space>\n      <InputSearch\n        options={cheeses}\n        onSelectOption={handleSelectOption}\n        changeOnSelect={false}\n        placeholder=\"Options act like results\"\n      />\n      <InputSearch\n        options={cheeses2}\n        placeholder=\"Options act like suggestions\"\n      />\n    </Space>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)(dist_esm.ArgsTable,{of:src.InputSearch,exclude:defaultArgTypes.q,mdxType:"ArgsTable"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Docs/InputSearch",component:src.InputSearch,includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,esm.kt)(MDXContent,null)};const index_stories=componentMeta,__namedExportsOrder=["__page"]}}]);