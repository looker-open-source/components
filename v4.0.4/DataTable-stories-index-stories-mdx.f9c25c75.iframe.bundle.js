"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[9943],{"./src/defaultArgTypes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{W:()=>defaultArgTypes,q:()=>excludedProps});const defaultArgTypes={as:{table:{disable:!0}},forwardedAs:{table:{disable:!0}},ref:{table:{disable:!0}},theme:{table:{disable:!0}}},excludedProps=Object.keys(defaultArgTypes)},"../components/src/DataTable/stories/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>index_stories});__webpack_require__("../../node_modules/react/index.js");var esm=__webpack_require__("../../node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("../../node_modules/@storybook/addon-docs/dist/esm/index.js"),src=__webpack_require__("../components/src/index.ts"),Editor=__webpack_require__("./src/Editor/index.tsx"),defaultArgTypes=__webpack_require__("./src/defaultArgTypes.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const makeShortcode=name=>function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),(0,esm.kt)("div",props)},SelectManagerParameterTable=makeShortcode("SelectManagerParameterTable"),SelectManagerReturnTable=makeShortcode("SelectManagerReturnTable"),layoutProps={};function MDXContent({components,...props}){return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(dist_esm.Meta,{component:src.DataTable,title:"Docs/DataTable",mdxType:"Meta"}),(0,esm.kt)("h1",{id:"datatable"},"DataTable"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTable>")," component, like ",(0,esm.kt)("inlineCode",{parentName:"p"},"<Table>"),", displays tabular data. However, unlike a ",(0,esm.kt)("inlineCode",{parentName:"p"},"<Table>"),", a ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTable>")," allows you to bake in a set of actions on each row. Common use cases include:"),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},'A list of users with user details and a "Delete This User" action'),(0,esm.kt)("li",{parentName:"ul"},'A list of groups and their associated permissions with an "Edit This Group\'s Permissions" action on each row'),(0,esm.kt)("li",{parentName:"ul"},'A list of recently run queries and a "Rerun This Query" action on each row')),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTable>")," component acts as the main wrapper to other ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTable>"),"-related components. It must receive an array of type ",(0,esm.kt)("inlineCode",{parentName:"p"},"DataTableColumn")," in its ",(0,esm.kt)("inlineCode",{parentName:"p"},"columns")," prop. That array should contain objects that describe the columns in your ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTable>"),"."),(0,esm.kt)("p",null,"For accessibility ",(0,esm.kt)("inlineCode",{parentName:"p"},"caption")," must be specified to describe the table's contents."),(0,esm.kt)("h2",{id:"columns"},"Columns"),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"DataTableColumn"),"s are defined as an array of objects that conform to the ",(0,esm.kt)("inlineCode",{parentName:"p"},"DataTableColumn")," interface:"),(0,esm.kt)("h3",{id:"title-required"},(0,esm.kt)("strong",{parentName:"h3"},"title")," (required)"),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"title")," for the column"),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"titleIcon")," is an ",(0,esm.kt)("inlineCode",{parentName:"li"},"Icon")," specified instead of the title text in the header row.",(0,esm.kt)("ul",{parentName:"li"},(0,esm.kt)("li",{parentName:"ul"},"NOTE: ",(0,esm.kt)("inlineCode",{parentName:"li"},"title")," will still be used in column selector and will be added as a tooltip to the icon displayed in the header row.")))),(0,esm.kt)("h3",{id:"id-required"},(0,esm.kt)("strong",{parentName:"h3"},"id")," (required)"),(0,esm.kt)("p",null,"A unique identifier for a given column. NOTE: A column object's id should match a key in your data object template, see example below."),(0,esm.kt)("h3",{id:"type"},(0,esm.kt)("strong",{parentName:"h3"},"type")),(0,esm.kt)("p",null,"Defaults to ",(0,esm.kt)("inlineCode",{parentName:"p"},"string"),". In some locales, we may change horizontal alignment of 'number'"),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"string")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"number")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"date"))),(0,esm.kt)("h3",{id:"size"},(0,esm.kt)("strong",{parentName:"h3"},"size")),(0,esm.kt)("p",null,"Specify a size to have the column consume a fixed width. Defaults to ",(0,esm.kt)("inlineCode",{parentName:"p"},"auto")),(0,esm.kt)("p",null,"For content that is not expected to wrap ",(0,esm.kt)("inlineCode",{parentName:"p"},"auto")," is often the best choice as the column will only consume the horizontal room needed to contain its content."),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"auto")," columns will use browser-native table column behavior."),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"small"),", ",(0,esm.kt)("inlineCode",{parentName:"li"},"medium"),", & ",(0,esm.kt)("inlineCode",{parentName:"li"},"large")," are the predefined sizes and will truncate"),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"nowrap")," - column will not truncate and content will not wrap. Use with caution."),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"0-100")," (number) - width is a percentage of the table's width.",(0,esm.kt)("ul",{parentName:"li"},(0,esm.kt)("li",{parentName:"ul"},"Columns sized as a percentage do not support truncation."),(0,esm.kt)("li",{parentName:"ul"},"Mixing percentage columns with other sizing formats is not supported and yields unpredictable behavior."),(0,esm.kt)("li",{parentName:"ul"},"If percentages of all columns do not total 100% column widths may be somewhat unpredictable as well (browser table column calculations vary widely in these scenarios)")))),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport React from 'react'\nimport { DataTableAction, DataTableItem, DataTableCell, DataTable } from '../..'\nimport type { DataTableColumns } from '../../'\n\nexport default function Basic() {\n  const data = [\n    {\n      id: 1,\n      name: 'Gorgonzola',\n    },\n    {\n      id: 2,\n      name: 'Cheddar',\n    },\n    {\n      id: 3,\n      name: `Blue`,\n    },\n  ]\n\n  const columns: DataTableColumns = [\n    {\n      id: 'id',\n      title: 'ID',\n      type: 'number',\n    },\n    {\n      id: 'name',\n      title: 'Name',\n      type: 'string',\n    },\n  ]\n\n  const items = data.map(({ id, name }) => {\n    const actions = (\n      <>\n        <DataTableAction onClick={() => alert(`${name} selected!`)}>\n          Select Cheese\n        </DataTableAction>\n      </>\n    )\n\n    return (\n      <DataTableItem\n        key={id}\n        id={`${id}`}\n        onClick={() => alert('Row clicked')}\n        actions={actions}\n      >\n        <DataTableCell>{id}</DataTableCell>\n        <DataTableCell>{name}</DataTableCell>\n      </DataTableItem>\n    )\n  })\n\n  return (\n    <DataTable caption=\"Cheeses example\" columns={columns}>\n      {items}\n    </DataTable>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"datatableitem"},"DataTableItem"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTableItem>")," component represents a row of data in your DataTable."),(0,esm.kt)("p",null,"To define actions on a row, pass in ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTableAction>")," elements (wrapped in a React.Fragment if there are multiple) into the ",(0,esm.kt)("inlineCode",{parentName:"p"},"actions")," prop."),(0,esm.kt)("p",null,"You can also pass a callback to the ",(0,esm.kt)("inlineCode",{parentName:"p"},"onClick")," prop, but note that this callback will not fire when clicking on the Vertical Dots ",(0,esm.kt)("inlineCode",{parentName:"p"},"<IconButton />"),"."),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"actionsTooltip")," prop can be used to set the tooltip text of a row's actions button. This prop will also be used in a visually hidden label on the actions button, which is especially useful for getting the actions button DOM element when testing."),(0,esm.kt)("h2",{id:"datatablecell"},"DataTableCell"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTableCell>")," component is equivalent to a data cell in your DataTable. ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTableCell>")," elements should always be children of a ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTableItem>")," element (i.e. each row should contain some number of column elements)."),(0,esm.kt)("p",null,"In its simplest form, a ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTableCell>")," element will display whatever child elements it has."),(0,esm.kt)("p",null,"You can also create more advanced layouts within your ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTableCell>")," by utilizing the optional ",(0,esm.kt)("inlineCode",{parentName:"p"},"description")," and ",(0,esm.kt)("inlineCode",{parentName:"p"},"indicator")," props."),(0,esm.kt)("p",null,"Passing in a React element into the ",(0,esm.kt)("inlineCode",{parentName:"p"},"description")," prop will display said element underneath any child elements of your ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTableCell>"),"."),(0,esm.kt)("p",null,"Passing in a React element into the ",(0,esm.kt)("inlineCode",{parentName:"p"},"indicator")," prop will display said element left of any child elements (and any element passed into the ",(0,esm.kt)("inlineCode",{parentName:"p"},"description")," prop)."),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport React from 'react'\nimport * as MaterialIcons from '@styled-icons/material'\nimport { DataTableItem, DataTableCell, DataTable, Link, Icon } from '../..'\nimport type { DataTableColumns } from '../../'\n\nexport default function Indicator() {\n  const link = (\n    <Link\n      onClick={event => event.stopPropagation()}\n      href=\"https://en.wikipedia.org/wiki/Cheddar_cheese\"\n    >\n      Wikipedia\n    </Link>\n  )\n\n  const indicator = (\n    <Icon\n      icon={<MaterialIcons.Person />}\n      color=\"key\"\n      size={24}\n      marginRight=\"small\"\n    />\n  )\n\n  const columns: DataTableColumns = [\n    {\n      id: 'name',\n      title: 'Name',\n      type: 'string',\n    },\n  ]\n\n  return (\n    <DataTable caption=\"Cheeses example\" columns={columns}>\n      <DataTableItem id={'cheddar'} onClick={() => alert(`Row clicked`)}>\n        <DataTableCell description={link} indicator={indicator}>\n          Cheddar\n        </DataTableCell>\n      </DataTableItem>\n    </DataTable>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("p",null,(0,esm.kt)("strong",{parentName:"p"},"Note:")," By default, clicking on any element within a ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTableCell>")," will trigger the ",(0,esm.kt)("inlineCode",{parentName:"p"},"onClick")," of the parent ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTableItem>"),". To prevent this, make sure to include an ",(0,esm.kt)("inlineCode",{parentName:"p"},"event.stopPropagation()")," call within your ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTableCell>"),"'s ",(0,esm.kt)("inlineCode",{parentName:"p"},"onClick"),"."),(0,esm.kt)("h2",{id:"datatableaction"},"DataTableAction"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTableAction>")," component represents an actionable item on the rows of your ",(0,esm.kt)("inlineCode",{parentName:"p"},"DataTable"),". As noted above, you can supply each of your rows with actions by passing ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTableAction>")," elements into the ",(0,esm.kt)("inlineCode",{parentName:"p"},"actions")," prop of the parent ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTableItem>")," element."),(0,esm.kt)("h2",{id:"states"},"States"),(0,esm.kt)("p",null,"In the event that your page and ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTable>")," render before data is available (i.e. before a Promise resolves), you can use the ",(0,esm.kt)("inlineCode",{parentName:"p"},"state")," prop to conditionally render a loading icon until your data is ready."),(0,esm.kt)("p",null,'Passing "loading" into a ',(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTable>"),"'s ",(0,esm.kt)("inlineCode",{parentName:"p"},"state")," prop will render a ",(0,esm.kt)("inlineCode",{parentName:"p"},"<Spinner>")," icon."),(0,esm.kt)("p",null,'Additionally, you can render a "No Results" message using the ',(0,esm.kt)("inlineCode",{parentName:"p"},'state="noResults"')," prop. When ",(0,esm.kt)("inlineCode",{parentName:"p"},'state="noResults"')," the ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTable>"),' will display a "No Results" message in place of its children.'),(0,esm.kt)("p",null,'To customize the "No Results" message text, use the ',(0,esm.kt)("inlineCode",{parentName:"p"},"noResultsDisplay")," prop. Strings will be formatted as shown below, use JSX for custom formattng if you prefer."),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport React from 'react'\nimport { DataTableItem, DataTableCell, DataTable } from '../..'\nimport type { DataTableColumns } from '../../'\n\nexport default function State() {\n  const columns: DataTableColumns = [\n    {\n      id: 'name',\n      title: 'Name',\n      type: 'string',\n    },\n  ]\n\n  // Change state to \"noResults\" to render the noResultsDisplay\n  return (\n    <DataTable caption=\"Cheeses example\" columns={columns} state=\"noResults\">\n      <DataTableItem id={'cheddar'} onClick={() => alert(`Row clicked`)}>\n        <DataTableCell>Cheddar</DataTableCell>\n      </DataTableItem>\n    </DataTable>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"sorting"},"Sorting"),(0,esm.kt)("p",null,"You can implement sorting on a ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTable>")," by passing a function into the optional ",(0,esm.kt)("inlineCode",{parentName:"p"},"onSort")," prop. In addition, sortable columns must have ",(0,esm.kt)("inlineCode",{parentName:"p"},"canSort: true")," on their corresponding column object."),(0,esm.kt)("p",null,"Clicking on the header of a sortable column will lead to an ",(0,esm.kt)("inlineCode",{parentName:"p"},"onSort")," call, with (1) the column's id and (2) the next sort direction, passed in as arguments. The sort direction argument will either be a string 'desc' if the current sort direction of the column is 'asc', or 'asc' in all other cases."),(0,esm.kt)("p",null,"If your data is initially sorted on a specific column, you may want to default the corresponding column object with a ",(0,esm.kt)("inlineCode",{parentName:"p"},"sortDirection")," property."),(0,esm.kt)("p",null,"For default sort behavior, use the ",(0,esm.kt)("inlineCode",{parentName:"p"},"doDataTableSort")," helper function. The ",(0,esm.kt)("inlineCode",{parentName:"p"},"doDataTableSort")," helper function will return a sorted data array as well as an updated columns array, which can then be used to replace your existing arrays post-sort."),(0,esm.kt)("p",null,(0,esm.kt)("strong",{parentName:"p"},"Note:")," ",(0,esm.kt)("inlineCode",{parentName:"p"},"doDataTableSort")," is a generic function. The returned data array will have the same type as the data array argument."),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"doDataTableSort")," currently supports ",(0,esm.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,esm.kt)("inlineCode",{parentName:"p"},"number"),", and ",(0,esm.kt)("inlineCode",{parentName:"p"},"date")," sorting. It will use the ",(0,esm.kt)("inlineCode",{parentName:"p"},"type")," property on the corresponding column object of the passed-in ",(0,esm.kt)("inlineCode",{parentName:"p"},"id")," to determine which sort logic to use."),(0,esm.kt)("p",null,"If using a custom ",(0,esm.kt)("inlineCode",{parentName:"p"},"onSort"),", make sure the function performs the following:"),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},"Updates the corresponding column object's ",(0,esm.kt)("inlineCode",{parentName:"li"},"sortDirection")),(0,esm.kt)("li",{parentName:"ul"},"Sorts the collection representing your data")),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport React, { useState } from 'react'\nimport {\n  DataTableAction,\n  DataTableItem,\n  DataTableCell,\n  DataTable,\n  DateFormat,\n  doDataTableSort,\n} from '../..'\nimport type { DataTableColumns } from '../../'\n\nexport default function Sorting() {\n  const [data, setData] = useState([\n    {\n      createdDate: new Date('11/11/2001'),\n      id: 1,\n      name: 'Gorgonzola',\n    },\n    {\n      createdDate: new Date('03/15/2001'),\n      id: 2,\n      name: 'Cheddar',\n    },\n    {\n      createdDate: new Date('07/20/2001'),\n      id: 3,\n      name: `Blue`,\n    },\n  ])\n\n  const [columns, setColumns] = useState<DataTableColumns>([\n    {\n      canSort: true,\n      id: 'id',\n      title: 'ID',\n      type: 'number',\n    },\n    {\n      canSort: true,\n      id: 'name',\n      title: 'Name',\n      type: 'string',\n    },\n    {\n      canSort: true,\n      id: 'createdDate',\n      size: 'nowrap',\n      title: 'Created Date',\n      type: 'date',\n    },\n  ])\n\n  const onSort = (id: string, sortDirection: 'asc' | 'desc') => {\n    const { columns: sortedColumns, data: sortedData } = doDataTableSort(\n      data,\n      columns,\n      id,\n      sortDirection\n    )\n    setData(sortedData)\n    setColumns(sortedColumns)\n  }\n\n  const items = data.map(({ id, name, createdDate }) => {\n    const actions = (\n      <>\n        <DataTableAction onClick={() => alert(`${name} selected!`)}>\n          Select Cheese\n        </DataTableAction>\n      </>\n    )\n\n    return (\n      <DataTableItem\n        id={`${id}`}\n        key={id}\n        onClick={() => alert('Row clicked')}\n        actions={actions}\n      >\n        <DataTableCell>{id}</DataTableCell>\n        <DataTableCell>{name}</DataTableCell>\n        <DataTableCell>\n          <DateFormat>{createdDate}</DateFormat>\n        </DataTableCell>\n      </DataTableItem>\n    )\n  })\n\n  return (\n    <DataTable caption=\"Cheeses example\" onSort={onSort} columns={columns}>\n      {items}\n    </DataTable>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"selecting-rows"},"Selecting rows"),(0,esm.kt)("p",null,"You can add row select behavior on a ",(0,esm.kt)("inlineCode",{parentName:"p"},"<DataTable />")," by passing a valid into the ",(0,esm.kt)("inlineCode",{parentName:"p"},"select")," prop."),(0,esm.kt)("p",null,"The following properties are ",(0,esm.kt)("strong",{parentName:"p"},"required")," in the object passed into the ",(0,esm.kt)("inlineCode",{parentName:"p"},"select")," prop."),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("p",{parentName:"li"},(0,esm.kt)("inlineCode",{parentName:"p"},"onSelect"),": Clicking on a checkbox will trigger the ",(0,esm.kt)("inlineCode",{parentName:"p"},"onSelect")," callback, with the id of the checkbox's ",(0,esm.kt)("inlineCode",{parentName:"p"},"DataTableItem")," passed in as an argument.")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("p",{parentName:"li"},(0,esm.kt)("inlineCode",{parentName:"p"},"onSelectAll"),": Callback that is triggered when the header's checkbox is clicked")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("p",{parentName:"li"},(0,esm.kt)("inlineCode",{parentName:"p"},"selectedItems"),": An array containing the ",(0,esm.kt)("inlineCode",{parentName:"p"},"id"),"s of all selected items. Will usually be a piece of state.")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("p",{parentName:"li"},(0,esm.kt)("inlineCode",{parentName:"p"},"pageItems"),": An array containing the ",(0,esm.kt)("inlineCode",{parentName:"p"},"id"),"s of all currently visible items. This is mainly used to help calculate the checked state of the header checkbox."))),(0,esm.kt)("p",null,"The following properties are ",(0,esm.kt)("strong",{parentName:"p"},"optional")," in the object passed into the ",(0,esm.kt)("inlineCode",{parentName:"p"},"select")," prop:"),(0,esm.kt)("p",null,(0,esm.kt)("strong",{parentName:"p"},"Note:")," For accessibility purposes, the header checkbox is described by the ID of the header row. To set the ID of the header row, use the ",(0,esm.kt)("inlineCode",{parentName:"p"},"headerRowId")," prop on ",(0,esm.kt)("inlineCode",{parentName:"p"},"DataTable"),"."),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport React, { useState } from 'react'\nimport { DataTableAction, DataTableItem, DataTableCell, DataTable } from '../..'\nimport type { DataTableColumns } from '../../'\n\nexport default function SelectRow() {\n  const data = [\n    {\n      id: 1,\n      name: 'Gorgonzola',\n    },\n    {\n      id: 2,\n      name: 'Cheddar',\n    },\n    {\n      id: 3,\n      name: `Blue`,\n    },\n  ]\n\n  const columns: DataTableColumns = [\n    {\n      id: 'id',\n      size: 20,\n      title: 'ID',\n      type: 'number',\n    },\n    {\n      id: 'name',\n      size: 80,\n      title: 'Name',\n      type: 'string',\n    },\n  ]\n\n  const [selections, setSelections] = useState<string[]>([])\n  const onSelect = (selection: string) => {\n    setSelections(\n      selections.includes(selection)\n        ? selections.filter(item => item !== selection)\n        : [...selections, selection]\n    )\n  }\n\n  const allSelectableItems = data.map(({ id }) => String(id))\n\n  const onSelectAll = () => {\n    setSelections(selections.length ? [] : allSelectableItems)\n  }\n\n  const items = data.map(({ id, name }) => (\n    <DataTableItem\n      id={String(id)}\n      key={id}\n      onClick={() => alert(`${name} clicked`)}\n      actions={\n        <>\n          <DataTableAction onClick={() => alert(`${name} deleted`)}>\n            Delete\n          </DataTableAction>\n        </>\n      }\n    >\n      <DataTableCell>{id}</DataTableCell>\n      <DataTableCell>{name}</DataTableCell>\n    </DataTableItem>\n  ))\n\n  return (\n    <>\n      <DataTable\n        caption=\"Cheeses example\"\n        columns={columns}\n        select={{\n          onSelect,\n          onSelectAll,\n          pageItems: allSelectableItems,\n          selectedItems: selections,\n        }}\n      >\n        {items}\n      </DataTable>\n    </>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h3",{id:"useselectmanager"},"useSelectManager"),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"useSelectManager")," hook can be used to quickly create the standard building blocks of ",(0,esm.kt)("inlineCode",{parentName:"p"},"DataTable")," select behavior."),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"useSelectManager")," accepts the following parameters:"),(0,esm.kt)(SelectManagerParameterTable,{mdxType:"SelectManagerParameterTable"}),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"useSelectManager")," returns an object with the following properties:"),(0,esm.kt)(SelectManagerReturnTable,{mdxType:"SelectManagerReturnTable"}),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport React from 'react'\nimport {\n  DataTableAction,\n  DataTableItem,\n  DataTableCell,\n  DataTable,\n  useSelectManager,\n} from '../..'\nimport type { DataTableColumns } from '../../'\n\nexport default function SelectManager() {\n  const data = [\n    {\n      id: 1,\n      name: 'Gorgonzola',\n    },\n    {\n      id: 2,\n      name: 'Cheddar',\n    },\n    {\n      id: 3,\n      name: `Blue`,\n    },\n  ]\n\n  const columns: DataTableColumns = [\n    {\n      id: 'id',\n      size: 20,\n      title: 'ID',\n      type: 'number',\n    },\n    {\n      id: 'name',\n      size: 80,\n      title: 'Name',\n      type: 'string',\n    },\n  ]\n\n  const allSelectableItems = data.map(({ id }) => String(id))\n\n  const { onSelect, onSelectAll, selections } = useSelectManager(\n    allSelectableItems\n  )\n\n  const items = data.map(({ id, name }) => (\n    <DataTableItem\n      id={String(id)}\n      key={id}\n      onClick={() => alert(`${name} clicked`)}\n      actions={\n        <>\n          <DataTableAction onClick={() => alert(`${name} deleted`)}>\n            Delete\n          </DataTableAction>\n        </>\n      }\n    >\n      <DataTableCell>{id}</DataTableCell>\n      <DataTableCell>{name}</DataTableCell>\n    </DataTableItem>\n  ))\n\n  return (\n    <DataTable\n      caption=\"Cheeses example\"\n      columns={columns}\n      select={{\n        onSelect,\n        onSelectAll,\n        pageItems: allSelectableItems,\n        selectedItems: selections,\n      }}\n    >\n      {items}\n    </DataTable>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"control-bar"},"Control Bar"),(0,esm.kt)("p",null,(0,esm.kt)("inlineCode",{parentName:"p"},"DataTable")," comes with a built-in control bar that allows for bulk actions and additional select control."),(0,esm.kt)("p",null,"A ",(0,esm.kt)("inlineCode",{parentName:"p"},"DataTable")," will reveal its control bar when the following conditions are met:"),(0,esm.kt)("ol",null,(0,esm.kt)("li",{parentName:"ol"},"The array passed into the ",(0,esm.kt)("inlineCode",{parentName:"li"},"select.selectedItems")," prop has length > 0."),(0,esm.kt)("li",{parentName:"ol"},"A valid object is passed into the ",(0,esm.kt)("inlineCode",{parentName:"li"},"bulk")," prop.")),(0,esm.kt)("p",null,"The ",(0,esm.kt)("inlineCode",{parentName:"p"},"bulk")," prop is used to configure a ",(0,esm.kt)("inlineCode",{parentName:"p"},"DataTable"),"'s control bar. The object passed into ",(0,esm.kt)("inlineCode",{parentName:"p"},"bulk")," ",(0,esm.kt)("em",{parentName:"p"},"must")," have the following properties:"),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"actions"),": Bulk actions that are available when one or more items are selected"),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"onTotalClearAll"),': Callback that is triggered when the user presses the "Clear Selection" button'),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"onTotalSelectAll"),': Callback that is triggered when the user presses the "Select all X results" button in the control bar'),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"pageCount"),": The total number of visible items (i.e. the total number of items on the current page in paginated ",(0,esm.kt)("inlineCode",{parentName:"li"},"DataTable"),"s)"),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"totalCount"),": The total number of items, both visible and nonvisible, in this ",(0,esm.kt)("inlineCode",{parentName:"li"},"DataTable"))),(0,esm.kt)("p",null,(0,esm.kt)("strong",{parentName:"p"},"Note:")," The ",(0,esm.kt)("inlineCode",{parentName:"p"},"onSelect")," returned from the ",(0,esm.kt)("inlineCode",{parentName:"p"},"useSelectManager")," hook is designed to work seamlessly with the control bar. In the event that a user selects all items, both visible and non-visible, a follow-up click on a checkbox will unselect both the clicked item and all non-visible items."),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport React, { useState } from 'react'\nimport {\n  DataTableAction,\n  DataTableItem,\n  DataTableCell,\n  DataTable,\n  Flex,\n  Box,\n  Pagination,\n  useSelectManager,\n} from '../..'\nimport type { DataTableColumns } from '../../'\n\nexport default function ControlBar() {\n  const data = [\n    { id: 1, name: 'Gorgonzola' },\n    { id: 2, name: 'Cheddar' },\n    { id: 3, name: `Blue` },\n    { id: 4, name: 'American' },\n    { id: 5, name: 'Cheddar' },\n    { id: 6, name: 'Pepper Jack' },\n  ]\n\n  const columns: DataTableColumns = [\n    {\n      id: 'id',\n      size: 20,\n      title: 'ID',\n      type: 'number',\n    },\n    {\n      id: 'name',\n      size: 80,\n      title: 'Name',\n      type: 'string',\n    },\n  ]\n\n  const [page, setPage] = useState(1)\n  const perPageCount = 3\n\n  // The logic for which items are being displayed on which page will vary\n  const pageItemData = data.filter(\n    ({ id }) => id > (page - 1) * perPageCount && id <= page * perPageCount\n  )\n  const pageItemIds = pageItemData.map(({ id }) => String(id))\n  const pageItems = pageItemData.map(({ id, name }) => (\n    <DataTableItem\n      id={String(id)}\n      key={id}\n      onClick={() => alert(`${name} clicked`)}\n      actions={\n        <>\n          <DataTableAction onClick={() => alert(`${name} deleted`)}>\n            Delete\n          </DataTableAction>\n        </>\n      }\n    >\n      <DataTableCell>{id}</DataTableCell>\n      <DataTableCell>{name}</DataTableCell>\n    </DataTableItem>\n  ))\n\n  const { onSelect, onSelectAll, selections, setSelections } = useSelectManager(\n    pageItemIds\n  )\n\n  const allItems = [...data].map(({ id }) => String(id))\n  const onTotalSelectAll = () => setSelections(allItems)\n  const onTotalClearAll = () => setSelections([])\n\n  const bulkActionsConfig = {\n    actions: (\n      <DataTableAction onClick={() => alert(`Selected Items: ${selections}`)}>\n        View Selected Item IDs\n      </DataTableAction>\n    ),\n    onTotalClearAll,\n    onTotalSelectAll,\n    pageCount: pageItems.length,\n    totalCount: allItems.length,\n  }\n\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"center\">\n      <Box width=\"100%\" mb=\"u3\">\n        <DataTable\n          bulk={bulkActionsConfig}\n          caption=\"Cheeses example\"\n          select={{\n            onSelect,\n            onSelectAll,\n            pageItems: pageItemIds,\n            selectedItems: selections,\n          }}\n          columns={columns}\n        >\n          {pageItems}\n        </DataTable>\n      </Box>\n      <Pagination\n        current={page}\n        pages={data.length / perPageCount}\n        onChange={nextPage => {\n          setSelections([])\n          setPage(nextPage)\n        }}\n      />\n    </Flex>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"truncation"},"Truncation"),(0,esm.kt)("p",null,"DataTable plays nicely with ",(0,esm.kt)("a",{parentName:"p",href:"?path=/docs/docs-truncate--docs"},"Truncate"),", when you wish to condense the table and keep all values to a single line."),(0,esm.kt)(Editor.Editor,{code:"/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport React from 'react'\nimport { DataTableItem, DataTableCell, DataTable, Truncate } from '../..'\nimport type { DataTableColumns } from '../../'\n\nexport default function Basic() {\n  const columns: DataTableColumns = [\n    {\n      id: 'title',\n      size: 50,\n      title: 'Title',\n      type: 'string',\n    },\n    {\n      id: 'description',\n      size: 50,\n      title: 'Description',\n      type: 'string',\n    },\n  ]\n\n  return (\n    <DataTable caption=\"Cheeses example\" columns={columns}>\n      <DataTableItem key=\"cheddar\" id=\"cheddar\">\n        <DataTableCell>Cheddar</DataTableCell>\n        <DataTableCell>\n          <Truncate>\n            Cheddar cheese is a relatively hard, off-white (or orange if\n            colourings such as annatto are added), sometimes sharp-tasting,\n            natural cheese. Originating in the English village of Cheddar in\n            Somerset, cheeses of this style are now produced beyond the region\n            and in several countries around the world.\n          </Truncate>\n        </DataTableCell>\n      </DataTableItem>\n      <DataTableItem key=\"parm\" id=\"parm\">\n        <DataTableCell>Parmesan</DataTableCell>\n        <DataTableCell>\n          <Truncate>\n            Parmigiano-Reggiano or Parmesan is an Italian hard, granular cheese\n            that is produced from cow's milk and has aged 12–36 months. It is\n            named after the producing areas, the provinces of Parma, Reggio\n            Emilia, the part of Bologna west of the Reno, and Modena (all in\n            Emilia-Romagna); and the part of Mantua (Lombardy) south of the Po.\n            Parmigiano is the Italian adjective for Parma and Reggiano that for\n            Reggio Emilia.\n          </Truncate>\n        </DataTableCell>\n      </DataTableItem>\n    </DataTable>\n  )\n}\n",mdxType:"Editor"}),(0,esm.kt)("h2",{id:"props"},"Props"),(0,esm.kt)(dist_esm.ArgsTable,{of:src.DataTable,exclude:defaultArgTypes.q,mdxType:"ArgsTable"}))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Docs/DataTable",component:src.DataTable,includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,esm.kt)(MDXContent,null)};const index_stories=componentMeta,__namedExportsOrder=["__page"]}}]);