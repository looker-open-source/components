"use strict";(globalThis.webpackChunk_looker_storybook=globalThis.webpackChunk_looker_storybook||[]).push([[4051],{"../components/docs/develop/extending.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("../../node_modules/react/index.js");var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/@mdx-js/react/dist/esm.js");__webpack_require__("../../node_modules/@storybook/addon-docs/dist/esm/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const Meta=(name="Meta",function MDXDefaultShortcode(props){return console.warn("Component "+name+" was not imported, exported, or provided by MDXProvider as global scope"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)("div",props)});var name;const layoutProps={};function MDXContent({components,...props}){return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)(Meta,{title:"Docs/Develop/Extending",mdxType:"Meta"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)("h1",{id:"extending"},"Extending"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)("h2",{id:"composition"},"Composition"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)("p",null,"Looker UI Components (and React) rely heavily on the concept of composition, where smaller components can be composed to create higher-order behavior. In the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)("inlineCode",{parentName:"p"},"BoardCard")," example below the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)("inlineCode",{parentName:"p"},"Card"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)("inlineCode",{parentName:"p"},"CardMedia"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)("inlineCode",{parentName:"p"},"CardContent")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)("inlineCode",{parentName:"p"},"Heading")," are composed to define a what it means to display a Board object in Card format."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)("code",{parentName:"pre",className:"language-jsx"},';() => {\n  const BoardCard = ({ title, description, previewImage }) => (\n    <Card raised width="24rem">\n      <CardMedia image={previewImage} />\n      <CardContent>\n        <Heading as="h3" fontWeight="semiBold">\n          {title}\n        </Heading>\n        <Paragraph fontSize="small" color="text2">\n          {description}\n        </Paragraph>\n      </CardContent>\n    </Card>\n  )\n\n  return (\n    <BoardCard\n      title="Business Metrics"\n      previewImage="https://www.fillmurray.com/384/192"\n      description="Important metrics we use to understand our daily operational performance."\n    />\n  )\n}\n')),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)("h2",{id:"extending-behavior"},"Extending behavior"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)("p",null,"In some cases we may not support the exact presentation or behavior necessary. Through composition and styling, most components can be extended and customized. Here's an example of a new LoggerButton that logs every click:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)("code",{parentName:"pre",className:"language-jsx"},";() => {\n  // import React from 'react'\n  // import { Button, ButtonProps } from '@looker/components'\n\n  const logHandler = event => {\n    /**\n     *  Place an actual logging function here.\n     *  For our example we'll simply log to the browser console.\n     **/\n    console.log('You clicked:', event.currentTarget)\n  }\n\n  const LoggerButton = ({ onClick, ...props }) => {\n    const handleClick = event => {\n      logHandler(event)\n      if (onClick) onClick(event)\n    }\n\n    return (\n      <ButtonOutline onClick={handleClick} {...props}>\n        {props.children}\n      </ButtonOutline>\n    )\n  }\n\n  return (\n    <LoggerButton onClick={() => alert('Thanks for the click.')}>\n      Click to run example\n    </LoggerButton>\n  )\n}\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)("h2",{id:"extending-styling"},"Extending styling"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)("p",null,"Styling can also be extended, but care is needed to ensure you do not violate Looker's design principles."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)("code",{parentName:"pre",className:"language-jsx"},";() => {\n  // import { Button } from '@looker/components'\n  // import styled from 'styled-components'\n\n  const CustomButton = styled(Button)`\n    background: white;\n    border-color: transparent;\n    border-radius: 100%;\n    color: hotpink;\n    font-size: 2rem;\n    transition: transform 1.5s, background 2s;\n    width: 42px;\n\n    &:hover,\n    &:focus {\n      background: hotpink;\n      border-color: transparent;\n      color: white;\n      transform: rotate(360deg);\n    }\n\n    &:active {\n      background: orange;\n    }\n  `\n\n  return <CustomButton size=\"large\">+</CustomButton>\n}\n")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Docs/Develop/Extending",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:()=>(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__.kt)(MDXContent,null)};const __WEBPACK_DEFAULT_EXPORT__=componentMeta,__namedExportsOrder=["__page"]}}]);